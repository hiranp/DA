<?xml version="1.0" encoding="UTF-8" ?>
<?xml-stylesheet type="text/xsl" href="menus.xsl"?>
<!--
 *   $HeadURL: svn://slc00rwt.test-domain.com/DiagnosticAssistant/dacore/menus/qa_menus.xml $
 *   $Rev: 1125 $ 
 *   $Date: 2012-01-03 13:59:21 -0500 (Tue, 03 Jan 2012) $
 *
 * Change History 
 *   17-Feb-12 hsp - Added the menus.xsl style sheet to the top for Customer Viewing
 *   25-Mar-13 ssa - Added the ARU Support for testing viewing ARU patch details
 *   09-Jan-14 rjw - Added rda_DBA command_menu to RDA options
 *   01-Apr-14 ssa - Updated SQL to prompt for query inputs and added new
                          File impl package directory to zip method. 
-->
<menus>

<header title="DA Team's QA Testing Menu">
  <!-- Assumes that the RDA version must be 8.00 or Higher 
      <required_targets name="host, oracle_database" />  
  -->
  <required_targets name="oracle_database" />
  <required_products id="9279" />  
  <required_component name="DA" version="2.7.0" />
  <required_component name="RDA" version="8.00" />
</header>

<categories>

  <category id="collect">
     
     <title>DA Built-in Collectors</title>
     <description>DA Built-in Collectors that follow a standard interface.</description>
     <category id="collect.os">        
         <title>Operating System Collection</title>
         <description>Supports OS commands for windows, unix, ssh, visual basic.</description>
     </category>
     <category id="collect.java">        
         <title>Custom Java Collections</title>
         <description>Supports custom java classes that are loaded by DA and run its java main.</description>
     </category>
     <category id="collect.rda">        
         <title>RDA Collections</title>
         <description>Supports the RDA perl collector our team maintains and included with DA.</description>
     </category>     
     <category id="collect.sql">        
         <title>SQL JDBC Collections</title>
         <description>Supports running custom sql commands to output xml, html, text formats.</description>
     </category>
     <category id="collect.sqlplus">        
         <title>SQL*PLUS and PLSQL Collections</title>
         <description>Supports running SQL*PLUS commands to output xml, html, text formats.</description>
     </category>     
     <category id="collect.file">        
         <title>File Collector</title>
         <description>Supports capturing files or parts of files, regex, finding, xpath on xml files.</description>
     </category>          
  </category>
    
  <category id="core">
     <title>General DA Support Features</title>
     <description>Supports checking the operating system and related database files needed for installation.</description>
     <category id="core.prompt">
         <title>Various Prompts such as static and dynamic LOVs</title>
         <description>Check operating system installed patckages and patches for required versions.</description>
     </category>     
     <category id="core.batch">
         <title>Support Running batch DA or more than one command</title>
         <description>Batch DA allows for running one or more commands from this file or another one.</description>
     </category>   
     <category id="core.matching">
         <title>Support Matching regex output and Conditional Message</title>
         <description>Provides a way to use regex to match the output for expected result and display a conditional message.</description>
     </category>        
     <category id="core.sftp">
         <title>Support oracle sftp site for Uploading and Downloading</title>
         <description>Supports both internal and external access to the oracle sftp site..</description>
     </category>
     <category id="core.aru">
         <title>Oracle ARU download of patches, readmes, etc.</title>
         <description>Supports platform specific patch downloads for EBS and General Patches and patchsets as well as readmes.</description>
     </category>
    <category id="core.updates">
         <title>Oracle ARU download of patches, readmes, etc.</title>
         <description>Supports platform specific patch downloads for EBS and General Patches and patchsets as well as readmes.</description>
    </category>        
     
  </category>

  <category id="test_category">
     <title>Test Category for Testing Category collection</title>
     <description>Test Category for Testing Category collection.</description>
 </category>
  
   <category id="other">
     <title>Default Collection Other</title>
     <description>Other supports checking target when a specific problem has not been identified above.</description>
     <category id="other.demo">
         <title>Supports collect category=other.demo</title>
         <description>Shows collecting for a given matching category such as other.demo</description>
         <category id="other.demo.inputs">
           <title>Shows collecting category such as other.demo.inputs</title>
           <description>Batch DA allows collecting with inputs already setup in user.properties or session object.</description>
         </category>   
     </category>                  
  </category>

</categories>


<!-- ALL MENU Sections here -->

<menu>
    <menu_name>main</menu_name>
    <menu_title>Diagnostic Assistant QA Menu</menu_title>
    <menu_text><![CDATA[ 
    This is a set of Test/QA Menus options used to validate
    varies DA Features.
    
    Select one of the following options:                          
   (1) Collector RDA|ADR|OCM menu         (2) System Apis Menu    
   (3) ls -R rda/da, demo source PLUGIN   (4) DOS RDA          
   (5) show env                           (6) Shell Examples and Includes        
   (8) Prompt SAVE_xyz                    (9) show java file - match string
  (10) Internal System command           (11) Platform Specific Check
  (12) Big output - page up/down         (13) SSH Menu  
  (14) Matching & Regex & re-format      (15) Windows Commands
  (16) Required RDA Parms module.        (17) system_run_multiple_commands
  (18) DA_FILE_OUTPUT=matching lastest   (19) Prereq, Static LOV and Session Variables
  (20) Embedded Shell OUTPUT attachment  (21) sftp.oracle.com downl and upload
  (22) install_wfa                       (23) prompt_examples_lov Pablo Menu
  Core Impls (A)ru (F)ile (J)ava (S)ql (SQ)lplus (W)ls (Up)dates
      (H)elp  (U)pload (P)ackage  (E)xit  
   ]]></menu_text>
    <menu_help>   
     Diagnostic Assistant Demo Menu System
     
     Built-in Commands:
     
     Session Recording:
        history      - to see the commands already run during this session
        save_history - to save it to record.xml in DA_HOME/output directory
      
      User Recording:
        record - start the recorder to record all the commands run
        pause  - stops the recorder to run non-recorded commands, 
                 use record to restart
        show_record - shows the recorded commands recorded thus far.
        save_record - saves the recorded commands recorded thus far to a file

      Navigation        
        H - shows help from menu xml file from menu_help element
        B - back goes to the last menu or where B is defined
        E - exits the menu system, Q - quits the Menu of Menus
        
     *) To understand avaialable diagnostics
        There are several tools we support:  See option 6
          RDA
          ADR
          OCM
          FILE - FileApplicationImpl commands support viewing files
          or returning matching lines/ or xpath results of an xml file.
                                  
     *) To bundle up collection problem data.
       
        Once you have tried to solve the problem, 
        you can then decide to package all the results in the
        cart directory and upload them back to Oracle
        with a Support Ticket created..        
     
   </menu_help>
    <menu_map>1:menu:collector_menu</menu_map>
    <menu_map>2:menu:system_menu</menu_map>
    <menu_map>3:command:3</menu_map>
    <menu_map>4:command:4</menu_map>
    <menu_map>5:command:7</menu_map>
    <menu_map>6:menu:shell_examples</menu_map>
    <menu_map>8:menu:prompt_examples</menu_map>
    <menu_map>9:command:9</menu_map>
    <menu_map>10:command:10</menu_map>
    <menu_map>11:command:104</menu_map>
    <menu_map>12:command:11</menu_map>
    <menu_map>13:menu:ssh</menu_map>
    <menu_map>14:menu:matching</menu_map>
    <menu_map>15:menu:windows_commands</menu_map>
    <menu_map>SQ:menu:sqlplus</menu_map>
    <menu_map>16:command:105</menu_map>
    <menu_map>17:command:system_run_multiple_commands</menu_map>    
    <menu_map>S:menu:sqlimpl</menu_map>
    <menu_map>18:command:107</menu_map>
    <menu_map>19:menu:prereq_testing</menu_map>    
    <menu_map>20:command:106</menu_map>
    <menu_map>21:menu:sftp_menu</menu_map>
    <menu_map>22:command:install_wfa</menu_map>
    <menu_map>23:menu:prompt_examples_lov</menu_map>    
    <menu_map>F:menu:fileimpl</menu_map>
    <menu_map>W:menu:wlsimpl</menu_map>
    <menu_map>A:menu:aruimpl</menu_map>
    <menu_map>J:menu:javaimpl</menu_map>
    <menu_map>Up:menu:da_updates</menu_map>
    <menu_map>0:command:999</menu_map>
</menu>   


<menu>
   <menu_name>da_updates</menu_name>
   <menu_title>DA Updates for DA,RDA, and Plugins</menu_title>      
   <menu_text><![CDATA[                         
         
  (1) List all Updates   
  (2) Find available Updates for this DA / Discovered targets plugins etc.
  (3) Download available Updates 
  (4) Stage available Updates
  (5) Apply Staged Updates
  (6) Run all steps 2-6 
          
      (H)elp  (B)ack  (E)xit 
   ]]></menu_text>
    <menu_help>
    DA Updates for DA,RDA, and Plugins
    
    Da supports a self-service update framework that will allow for
    extending the core DA Menus and Targets with Support related 
    Product Menus and content. This DA Administration section allows
    for finding and applying these Plugins as well as updating DA
    and RDA.
    
    The steps can be performed one at a time and if you do not have
    internet access on this host, DA can be used from a HOST that
    does have access and you can download any of the content there
    and then manually STAGE it to this host where the APPLY step
    can then be executed.
      
   </menu_help>
      <menu_map>1:command:da_updates_list_all</menu_map>
      <menu_map>2:command:da_updates_check</menu_map>
      <menu_map>3:command:da_updates_download</menu_map>
      <menu_map>4:command:da_updates_stage</menu_map>
      <menu_map>5:command:da_updates_apply</menu_map>
      <menu_map>6:command:da_updates_run_all_steps</menu_map>              
      <menu_map>B:menu:main</menu_map>   
</menu>  


<menu>
   <menu_name>prompt_examples</menu_name>
   <menu_title>Prompt Examples i.e. SAVE_REPEAT, SAVE_ONCE</menu_title>      
   <menu_text><![CDATA[                         
         
  (1) Basic Prompt   
  (2) Demo SAVE_ONCE, SAVE_REPEAT and SAVE_WALLET
  (3) Prompt SAVE_WALLET or password in prompt with prompt too long 
  (4) Prompt REPEAT_WALLET or password in prompt with prompt too long 
  (5) Refactor : Standard Prompts
  (6) Refactor : Lov Prompts
          
      (H)elp  (B)ack  (E)xit 
   ]]></menu_text>
    <menu_help>   
     Prompt Help - shows how to use the command_prompt{n} options
     Three fields:  Name|prompt message to user|default
     
     The Name of the prompt can have special prefixes:
       SAVE_ONCE   - means save the name=(value} to user.properties
       SAVE_WALLET - means to save the name=value to the wallet if set on, else
                     just reused from the session object during that session
       SAVE_REPEAT - saves the name={value} pair similar to SAVE_ONCE but uses
                     the saved value as the default for the next run.     
   </menu_help>
    <menu_map>1:command:prompt_101</menu_map>
    <menu_map>2:command:prompt_102</menu_map>
    <menu_map>3:command:prompt_103</menu_map>
    <menu_map>4:command:prompt_104</menu_map>
    <menu_map>5:menu:prompt_examples_standard</menu_map>
    <menu_map>6:menu:prompt_examples_lov</menu_map>
    <menu_map>B:menu:main</menu_map>   
</menu>  

<menu>
   <menu_name>prompt_examples_standard</menu_name>
   <menu_title>Prompt Examples for Standard Prompts</menu_title>      
   <menu_text><![CDATA[                         
         
  (1) Standard prompt
  (2) SAVE_ONCE prompt
  (3) SAVE_REPEAT prompt
  (4) SAVE_WALLET prompt
  (5) REPEAT_WALLET prompt
          
      (H)elp  (B)ack  (E)xit 
   ]]></menu_text>
    <menu_help>   
     Prompt Help - shows how to use the command_prompt{n} options
     Three fields:  Name|prompt message to user|default
     
     The Name of the prompt can have special prefixes:
       SAVE_ONCE   - means save the name=(value} to user.properties
       SAVE_WALLET - means to save the name=value to the wallet if set on, else
                     just reused from the session object during that session
       SAVE_REPEAT - saves the name={value} pair similar to SAVE_ONCE but uses
                     the saved value as the default for the next run.     
   </menu_help>
    <menu_map>1:command:prompt_std</menu_map>
    <menu_map>2:command:prompt_std_SaveOnce</menu_map>
    <menu_map>3:command:prompt_std_SaveRepeat</menu_map>
    <menu_map>4:command:prompt_std_SaveWallet</menu_map>
    <menu_map>5:command:prompt_std_RepeatWallet</menu_map>
    <menu_map>B:menu:main</menu_map>   
</menu> 

<menu>
   <menu_name>prompt_examples_lov</menu_name>
   <menu_title>Prompt Examples for LOV Prompts</menu_title>      
   <menu_text><![CDATA[                         
         
  (1) Static - Pick Yes or NO
  (2) Static - Pick value,name or all
  (3) Static - Autoselect
  (4) Dynamic - Pick Country,State,City
  (5) Dynamic - Pick a Number
  (6) Dynamic - Autoselect
  (7) Tokenization Demo 
      (H)elp  (B)ack  (E)xit 
   ]]></menu_text>
    <menu_help>   
      LOV can be static or Dynamic.
   </menu_help>
    <menu_map>1:command:static_lov</menu_map>
    <menu_map>2:command:static_lov2</menu_map>
    <menu_map>3:command:static_lov_autoselect</menu_map>
    <menu_map>4:command:prereq_two</menu_map>
    <menu_map>5:command:dyn_lov_numbers</menu_map>
    <menu_map>6:command:dyn_lov_autoselect</menu_map>
    <menu_map>7:menu:prereq_six</menu_map>     
    <menu_map>B:menu:main</menu_map>   
</menu> 

<menu>
   <menu_name>windows_commands</menu_name>
   <menu_title>Windows wmic and registry commands</menu_title>      
   <menu_text><![CDATA[                         
         
  (1) wmic show all processes
  (2) wmic show jdev processes
  (3) registry example 
  (4) ... future
          
      (H)elp  (B)ack  (E)xit 
   ]]></menu_text>
    <menu_help>   
    The shows how to use the OS impl way to use Windows specific commands
    to show WMIC information such as processes, memory, hardware and registry
    settings using the WindowsCommand class.
   </menu_help>
    <menu_map>1:command:windows_processes</menu_map>
    <menu_map>2:command:windows_jdev_process</menu_map>
    <menu_map>3:command:windows_registry</menu_map>    
    <menu_map>B:menu:main</menu_map>   
</menu>  

<menu>
   <menu_name>sftp_menu</menu_name>
   <menu_title>Oracle sftp.oracle.com upload and download</menu_title>      
   <menu_text><![CDATA[                         
         
  (1) External download - MOS user - port 2021
  (2) External upload 
  (3) Internal download - APS user account port 2024 
  (4) Internal upload
          
      (H)elp  (B)ack  (E)xit 
   ]]></menu_text>
    <menu_help>   
    This shows how to download and upload to the oracle sftp.oracle.com
    site from External using the MOS credentials on port 2021 or from 
    Internal as employees with the APS required login account for downloading
    and uploading to the sftp site.     
   </menu_help>
    <menu_map>1:command:external_download</menu_map>
    <menu_map>2:command:external_upload</menu_map>
    <menu_map>3:command:internal_download</menu_map>
    <menu_map>4:command:internal_upload</menu_map>    
    <menu_map>B:menu:main</menu_map>   
</menu>  



<menu>
   <menu_name>javaimpl</menu_name>
   <menu_title>Java Main and Java Impls examples</menu_title>      
   <menu_text><![CDATA[                         
         
  (1) Java Impl Help Screen
  (2) Java Main Demo - shows java System Properties
  (3) Java Impls example - same idea, but requires interface to code.
  (4) ... future  
          
      (H)elp  (B)ack  (E)xit 
   ]]></menu_text>
    <menu_help>   
    The shows how to use the JavaImpl which supports both java main classes
    that are very simple or our da JavaDaInterface which is more formal and
    requires a setup method for the inputs.        
   </menu_help>
    <menu_map>1:command:java_help</menu_map>
    <menu_map>2:command:java_main</menu_map>
    <menu_map>3:command:java_impl</menu_map>
    <menu_map>B:menu:main</menu_map>
</menu>  


<menu>
   <menu_name>aruimpl</menu_name>
   <menu_title>Aru Menu</menu_title>      
   <menu_text><![CDATA[                         
         
  (1) Status  
  (2) Validate Aru
  (3) Get Readme
  (4) Get Patch Details or Summary
  (5) Download Patch for EBS
  (6) Download non-EBS Patch that requires release_id
  (7) Download EBS Patch BasedOn aru R12 patch
          
      (H)elp  (B)ack  (E)xit 
   ]]></menu_text>
    <menu_help>   
     ARU Help - download and view patch details
     
   </menu_help>
    <menu_map>1:command:aru_status_101</menu_map>
    <menu_map>2:command:aru_validate_102</menu_map>
    <menu_map>3:command:aru_readme_103</menu_map>
    <menu_map>4:command:aru_details_104</menu_map>
    <menu_map>5:command:aru_download_ebs_105</menu_map>
    <menu_map>6:command:aru_download_release_106</menu_map>   
    <menu_map>7:command:aru_download_release_107</menu_map>
    <menu_map>B:menu:main</menu_map>   
</menu>  


<menu>
   <menu_name>collector_menu</menu_name>
   <menu_title>RDA, ADR, OCM Demo Menu</menu_title>      
   <menu_text><![CDATA[                         
         
  (1) RDA module OS NET 
      (1a) RDA Help     (1b) RDA Version       (1c) RDA Profile List
      (1d) RDA Summary  (1e) Summary Details   (1f) Collect
      (1g) RDA rda_DBA
  (2) ADR show homes
      (2a) ADR Help     (2b) ADR Version       (2c) ADR prompt any command
      (2d) ADR Summary  (2e) Summary Details   (2f) Collect
      (2g) ADR Remote
  (3) OCM status
      (3a) OCM Help     (3b) OCM Version       (3c) OCM Collect
      (3d) OCM Summary  (3e) Summary Details   (3f) Start/Stop/Status
          
      (B)ack to main    (H)elp  (E)xit
   ]]></menu_text>
    <menu_help>   
     Collectors Testing Help     
   </menu_help>
    <menu_map>1:command:rda_100</menu_map>
    <menu_map>1a:command:rda_101</menu_map>
    <menu_map>1b:command:rda_102</menu_map>
    <menu_map>1c:command:rda_103</menu_map>
    <menu_map>1d:command:rda_104</menu_map>
    <menu_map>1e:command:rda_105</menu_map>    
    <menu_map>1f:command:rda_106</menu_map>
    <menu_map>1g:command:rda_DBA</menu_map>
    <menu_map>2:command:adr_HOMES</menu_map>
    <menu_map>2a:command:adr_HELP</menu_map>
    <menu_map>2b:command:adr_VERSION</menu_map>
    <menu_map>2c:command:adr_CUSTOM</menu_map>
    <menu_map>2d:command:adr_INC_SUMM</menu_map>
    <menu_map>2e:command:adr_INC_DTL</menu_map>
    <menu_map>2f:command:adr_DEF_COLL</menu_map>    
    <menu_map>2g:command:adr_REMOTE</menu_map>
    <menu_map>3:command:ocm_300</menu_map>
    <menu_map>3a:command:ocm_301</menu_map>
    <menu_map>3b:command:ocm_302</menu_map>
    <menu_map>3c:command:ocm_303</menu_map>
    <menu_map>3d:command:ocm_304</menu_map>
    <menu_map>3e:command:ocm_305</menu_map> 
    <menu_map>3f:command:ocm_306</menu_map> 
    <menu_map>B:menu:main</menu_map>   
</menu>   

<menu>
   <menu_name>fileimpl</menu_name>
   <menu_title>File Viewing, Xpath, Filtering, Line Numbers</menu_title>      
   <menu_text><![CDATA[                         
  (1) Command help  
  (2) Simple View file, (3) View with line_number=true
  (4) Xpath da_collection_map.xml elments 
  (5) Xpath commands from qa_menus.xml - commands, title args contains set_
  (6) Get Directory Listing /etc or C:\
  (7) Octal Dump od %%DA_HOME%%/config/user.properties format=c
  (8) Regex Extract of fields, then field level AND matching regex, csv|xml out
  (9) Regex Extract of fields, then field level OR matching regex (apache.log)
 (10) Regex Extract of fields, then field level OR matching regex ( EM csp.log)
 (11) Package files matching regex into a Zip
          
      (H)elp  (B)ack  (E)xit 
   ]]></menu_text>
   <menu_help><![CDATA[    
File Viewing and Extraction
   
  Get File
    get_file file=D:\\java.java line_numbers=true
    get_file file=D:\\java.java
    get_file contains=ORACLE file=D:\\java.java
    get_file starts_with=ORACLE file=D:\\java.java
    get_file ends_with=ORA, file=D:\\java.java, show_lines=true } ;                   
            
  Xpath Element or Attribute Extraction
    host.xml  
    TargetMetadata META_VER=3.1 TYPE=host CATEGORY_PROPERTIES=OS...
    xpath match=/TargetMetadata/@TYPE|/TargetMetadata/@META_VER|...
    xpath match=//command_title|//command_args file=.\\menus\\qa_menus.xml       
    xpath contains=set_ match=//command_title|//command_args \
          file=.\\menus\\qa_menus.xml 
    xpath starts_with=command_title match=//command_title|//command_args \
          file=.\\menus\\qa_menus.xml
               
  Get Directory Listing
    get_dir path=D:\\tmp, match=RDA_PERF.*.txt output_format=xml } ;     
    get_dir path=%%ORACLE_HOME%%\\rda match=(?i)RDA.* sub_directories=true
    get_dir path=D:\\tmp
    Note: default output_format={text}, other options: html,html_table,xml,csv

  Unix Like Octal Dump 
    Option: format option: c char, d decimal, h hex  
    od file=D:\\java.java format=d 
    od file=D:\\java.java              - should default to c for character mode
    od file=D:\\java.java format=x     - should get invalid format= option
    od file=%%DA_HOME%%/config/user.properties format=h - should replace DA_HOME
    
  General Regex File Extraction into Fields, then AND/OR Field level filtering
        -extract_file
        file=qa\\apache_log_small.log
        save_output_to=qa"+ FS + "csp_parsed.xml" (Optional, defaults to DA_OUTPUT/spool)
        regex_extract=(\\d+\\.\\d+\\.\\d+\\.\\d+) \\- (\\S+) \\[(.+?)\\] \"(.+?)\" (\\d+?) (\\S+) \"(.*?)\" \"(.*?)\"
        fields=ip,user,date,request,ret_code,resp_bytes,url,browser
        row_filter_type=or
        field_filter_regexes=null,null, null, .*RecentSearch.*|.*osso_login_success.*,200,null,null,null     
        oR 
        // "field_filter_regexes=.*,.*, .*, .*RecentSearch.*|.*osso_login_success.*,200,.*,.*,.*"} ;     

    NOTE: extract_file inputs must follow specific ORDER
    NOTE: New optional command input save_output_to=qa"+ FS + "csp_parsed.xml" 
          after the file= input.


    NOTE: When doing and based searches use regex wild card or ".*" for fields
          not to be included in the AND field matching. see: command 608         
         "row_filter_type=and",
         "field_filter_regexes=.*,.*, .*, .*RecentSearch.*|.*osso_login_success.*,200,.*,.*,.*"} ;
    
    NOTE: When doing or matching use "null" string for fields not to be filtered
          with the or clause. see: command 609
          "row_filter_type=or",
          "field_filter_regexes=null,null, null, .*RecentSearch.*|.*osso_login_success.*,200,null,null,null"} ;

   ]]></menu_help>
   <menu_map>B:menu:main</menu_map>   
   <menu_map>1:command:601</menu_map>   
   <menu_map>2:command:602</menu_map>      
   <menu_map>3:command:603</menu_map>           
   <menu_map>4:command:604</menu_map>           
   <menu_map>5:command:605</menu_map>           
   <menu_map>6:command:606</menu_map>           
   <menu_map>7:command:607</menu_map>           
   <menu_map>8:command:608</menu_map>           
   <menu_map>9:command:609</menu_map>           
   <menu_map>10:command:610</menu_map>           
   <menu_map>11:command:611</menu_map>
</menu>   

<menu>
   <menu_name>wlsimpl</menu_name>
   <menu_title>Wls Commands and Python Scripts</menu_title>      
   <menu_text><![CDATA[                         
  (1) Command help  
  (2) Version   
  (3) Summary
  (4) Status
  (5) Validate_Requirements
  (6) wls_file Python Script
  (7) wls_cmd in command_args w/ connection prompts for login 
  (8) wls_cmd in command_args NOT connected
  (9) wls_find Future search for any key... 
 (10) Run your own custom WLST command like ls() or listIncidents()
 (11) WLS Connected Command as File using wlst.sh
          
      (H)elp  (B)ack  (E)xit 
   ]]></menu_text>
   <menu_help><![CDATA[    
WLS Commands Syntax
   
  Core Commands 
    <command_args>help       
    <command_args>version       
    <command_args>summary       
    <command_args>status           
    <command_args>validate_requirements       

    <command_prompt1>FILE_PATH|Please enter path of WLS Script file to run|Listen</command_prompt1>    
    <command_args>wls_file script_path=%%FILE_PATH%%       
    
    <command_args>wls_file If no path, takes lines from command_args and creates
    a tmp file to run them from. 
    
    <command_prompt1>USER|Please the WLS User for connected mode|weblogic</command_prompt1>    
    <command_prompt2>PASS_WORD|Please the WLS password for connected mode|weblogic1</command_prompt2>    
    <command_prompt3>URI|Please the URI connect string|t3://localhost:7001</command_prompt3>    
    <command_args>wls_cmd user=%%USER%% pass=%%PASS_WORD%% uri=%%URI%%       

    <command_prompt1>FIND_CMD|Please enter word to match MBean named key(s)|Listen</command_prompt1>    
    <command_args>wls_find find=%%FIND_CMD%%       

   ]]></menu_help>
   <menu_map>B:menu:main</menu_map>   
   <menu_map>1:command:801</menu_map>   
   <menu_map>2:command:802</menu_map>      
   <menu_map>3:command:803</menu_map>           
   <menu_map>4:command:804</menu_map>           
   <menu_map>5:command:805</menu_map>           
   <menu_map>6:command:806</menu_map>           
   <menu_map>7:command:807</menu_map>           
   <menu_map>8:command:808</menu_map>       
   <menu_map>9:command:809</menu_map>       
   <menu_map>10:command:810</menu_map> 
   <menu_map>11:command:811</menu_map>    
   
   
   
</menu>   

<menu>
   <menu_name>ssh</menu_name>
   <menu_title>SSH Examples for any node and Exadata</menu_title>      
   <menu_text><![CDATA[                         
  (1) Simple SSH prompting for machine, login, command
  (2) Exadata SSH as celladmin
  (3) Exadata SSH as root  
  (4) Server LOV run OS command
          
      (H)elp  (B)ack  (E)xit 
   ]]></menu_text>
   <menu_help>   
     DEMO Help Screen for SSH
     Uses build-in ssh to run the commands
     working with exadata/exalogic /etc/hosts to know all of the 
     COMPUTE_NODE or CELL_NODE: prefix followed by a real machine
     or alias: FIRST_NODE or ALL_NODES.
     
     For exadata, commands can be run as root or celladmin which have
     required properties that are store the password in the wallet. 
     
  Exadata example
  Will need: celladmin user and root as Exadata required users
  and passwords to be persisted in remote ssh commands.    
    a) SSHCELL_AS_ROOT /opt/oracle.SupportTools/sundiag.sh
    b) SSHCELL_AS_CELLADMIN [CELL_NODE:{MACHINE_NAME OR IP}|FIRST_NODE|ALL_NODES] cellcli list 
       CELL_NODE: The value of the CELL_NODE can be prompted for and therefore
                  would look like: 
       SSHCELL_AS_CELLADMIN CELL_NODE:%%MACHINE_NAME%% ls
       MAY NEED: OUTPUT_FILE=, else just std.out to screen ?as default

     Build a map of the /etc/hosts for CELL_NODE and COMPUTE_NODE's 
     with prefix like this for map name=value:
     
        CELL_NODE:dmorlcel03-priv.test-domain.com=192.168.10.7
        COMPUTE_NODE:dmorldb01-priv.test-domain.com=192.168.10.1
        IB:dmorldb02-ibvip.test-domain.com=192.168.10.22     
     
   </menu_help>
   <menu_map>B:menu:main</menu_map>   
   <menu_map>1:command:109</menu_map>   
   <menu_map>2:command:110</menu_map>      
   <menu_map>3:command:111</menu_map>           
   <menu_map>4:command:112</menu_map>
</menu>   

<menu>
   <menu_name>matching</menu_name>
   <menu_title>Matching Strings in Output and Xpath</menu_title>      
   <menu_text><![CDATA[                         
      Test basic                          command_save_format
       (1) contains ORACLE_HOME              (8) xml from name,phone,address
       (2) startsWith "Start"                (9) xml from ps -ef
       (3) endsWith "End" match_only        (10) to database from ps -ef
       (4) = 'TESTS_TRUE'
      Test regex 
       (5) .*rda.* match_only 
       (6) ORACLE_HOME - non_match
       (7) .*PATH.*, all using:
       command_output_matchregex|(?s).*PATH=.*|>0|match_only:product 
                                                   
      (H)elp  (B)ack  (E)xit 
   ]]></menu_text>
   <menu_help><![CDATA[   
     DEMO Help Screen for Matching output and Highlights with Regex and Xpath
     
     NOTE: Looks like xpaht Filtering not setup yet
     ... but is used in FileApplicationImpl to extract parts of files so
         should be easy to add. 
     
     The output of a command can check for certain matching values based on 
     regular expressions and then show different output message based on if
     the match is true or not.
     ie. Examples: 
    <command_output_match>basic|containstring|ORACLE_HOME|all:ORACLE_HOME</command_output_match>
    <command_output_true>No action required, your a great Admin!, command: 50 </command_output_true>    
    <command_output_false>See problem YYY, command: 51</command_output_false>

    <command_args>echo Start a string rda ocm adr to match end</command_args>       
    <command_args_windows>echo Start a string rda ocm adr to match end</command_args_windows>    
    <command_output_match>basic|startsWith|Start|match_only</command_output_match>
    <command_output_true>No action required, your a great Admin!, command: 51</command_output_true>
    <command_output_false>See problem 123, Check your CPU %%pattern%%, command: 51</command_output_false>

    <command_args>echo Start a string rda ocm adr to match end</command_args>       
    <command_args_windows>echo Start a string rda ocm adr to match end</command_args_windows>    
    <command_output_match>basic|endsWith|end|match_only</command_output_match>
    <command_output_true>No action required, your a great Admin!, command: 52</command_output_true>
    <command_output_false>See problem 123, Check your CPU %%pattern%%, command: 52</command_output_false>

    <command_args>echo TESTS_TRUE</command_args>       
    <command_args_windows>echo TESTS_TRUE</command_args_windows>    
    <command_output_match>basic|=|TESTS_TRUE|all</command_output_match>
    <command_output_true>No action required, your test is TRUE, command: 53</command_output_true>
    <command_output_false>See problem 123, NOT finding TESTS_TRUE, command: 53</command_output_false>  

   <command_output_match>regex|{"rda.*\\.[a-z]*"}|{=n|>n|<n|!=n}|{match_every_line|match_any_line}|match_only</command_output_match>
    <command_args>echo Start a string rda ocm adr to match end</command_args>       
    <command_args_windows>echo Start a string rda ocm adr to match end</command_args_windows>    
    <command_output_match>regex|(?s).*rda.*|>0|match_only:rda</command_output_match>
    <command_output_true>No action required after regex Check, 
             Your a great Admin!, command: 60</command_output_true>
    <command_output_false>See problem 123 after regex Check, 
             Review your CPU %%pattern%%, command: 60</command_output_false>  
             
    <command_args>env</command_args>   
    <command_args_windows>set</command_args_windows>          
    <!-- Display Choices: match_only|non_match|all -->
    <command_output_match>regex|(?s).*ORACLE_HOME=.*|>0|non_match</command_output_match>
    <command_output_true>No action required for regex 61, found ORACLE_HOME set.</command_output_true>
    <command_output_false>Problem with regex 61: ORACLE_HOME was not set in env.</command_output_false>

    <command_args>env</command_args>   
    <command_args_windows>set</command_args_windows>          
    <!-- Display Choices: match_only|non_match|all -->
    <command_output_match>regex|(?s).*PATH=.*|>0|match_only:product</command_output_match>
    <command_output_true>No action required for regex 61, found PATH set.</command_output_true>
    <command_output_false>Problem with regex 61: PATH needs $ORACLE_HOME/bin, not set.</command_output_false>          
     
   ]]></menu_help>
   <menu_map>B:menu:main</menu_map>   
   <menu_map>1:command:50</menu_map>      
   <menu_map>2:command:51</menu_map>      
   <menu_map>3:command:52</menu_map>      
   <menu_map>4:command:53</menu_map>         
   <menu_map>5:command:60</menu_map>      
   <menu_map>6:command:61</menu_map>      
   <menu_map>7:command:62</menu_map>            
   <menu_map>8:command:54</menu_map>      
   <menu_map>9:command:55</menu_map>      
   <menu_map>10:command:56</menu_map>      
</menu>   


<menu>
   <menu_name>sqlplus</menu_name>
   <menu_title>Sqlplus Demo</menu_title>      
   <menu_text><![CDATA[                         
      Sqlplus Examples
             (1) sqlplus version
             (2) sqlplus api help issues
             (3) as sysdba "select * from dual"; 
             (4) connect %%USER%%//%%PASSWD%% with prompted values
             (5) connect system/DA_REQUIRED_PASSWORD 
             (6) upgrade script - long             
             (7) sqlhc (COE) Prompts for sql_id
             (8) plsql get alert logs
             (9) OS Type sqlplus with plsql and ACCEPT statements
                          
      (H)elp  (B)ack  (E)xit 
   ]]></menu_text>
   <menu_help><![CDATA[   
     DEMO Help Screen for Sqlplus 

   ]]></menu_help>
   <menu_map>B:menu:main</menu_map>   
   <menu_map>1:command:400</menu_map>      
   <menu_map>2:command:401</menu_map>      
   <menu_map>3:command:402</menu_map>      
   <menu_map>4:command:403</menu_map>      
   <menu_map>5:command:404</menu_map>      
   <menu_map>6:command:405</menu_map>      
   <menu_map>7:command:406</menu_map>      
   <menu_map>8:command:407</menu_map>
   <menu_map>9:command:409</menu_map>
</menu>    

<menu>
   <menu_name>sqlimpl</menu_name>
   <menu_title>Sql Demo</menu_title>      
   <menu_text><![CDATA[                         
      Sqlplus Examples
             (1) sql version
             (2) sql api help issues
             (3) Find invalid DBA_OBJECTS ie. status like 'INVALID'
             (4) connect %%USER%%/%%PASSWD%% with prompted values
             (5) connect %%USER%%/%%PASSWD%% defaults format=text and port=1521
             (6) Shows Failure Lang. translated errors on purpose no user/pw
             (7) Report SQL allows for multiple sqls using: report=html|xml|csv
             (8) JDBC prompt example pass:user:machine:port:sid
                          
      (H)elp  (B)ack  (E)xit 
   ]]></menu_text>
   <menu_help><![CDATA[   
     DEMO Help Screen for Sql which uses JDBC and currently requires:
       db_user=%%SQL_USER%% 
       db_pass=%%SQL_PASS%% 
       db_port=%%SQL_PORT%% 
       db_sid=%%SQL_SID%%
       db_sql=select statement ( when not using invalid_objects option )

    ie. command_args: sql output_format=%%SQL_OUTPUT%% db_user=%%SQL_USER%% db_pass=%%SQL_PASS%% db_port=%%SQL_PORT%% db_sid=%%SQL_SID%%
                      select * from user_objects where object_name like 'EM%'    
     
    ie. command_args: invalid_objects output_format=csv db_user=%%SQL_USER%% db_pass=%%SQL_PASS%% db_port=%%SQL_PORT%% db_sid=%%SQL_SID%%  object_name_like=%%OBJECT_NAME_LIKE%% object_type_like=%%OBJECT_TYPE_LIKE%% show_fields=%%SHOW_FIELDS%% output_delimiter=| show_sql      

     - Needs examples using required_properties.ini
     - Needs to add reporting option to run multiple sqls to generate html reports          
     
     - Support multiple SQLs in command_args to run, with format html|xml
      report=html|xml|csv for each sql
      
   ]]></menu_help>
   <menu_map>B:menu:main</menu_map>   
   <menu_map>1:command:700</menu_map>      
   <menu_map>2:command:701</menu_map>      
   <menu_map>3:command:702</menu_map>      
   <menu_map>4:command:703</menu_map>      
   <menu_map>5:command:704</menu_map>      
   <menu_map>6:command:705</menu_map>   
   <menu_map>7:command:706</menu_map>   
   <menu_map>8:command:707</menu_map>   
   
</menu>    


<menu>
    <menu_name>collect</menu_name>
    <menu_title>Collect Target Data</menu_title>
    <menu_text><![CDATA[        
        Proto-type Collect Menu System 

        Please select the category of problem to build up
        Diagnostic Collection to help Support resolve this problem!

        (1) File related Issue or Setup
        (2) OS Performance Issue
        (3) Other

        (M)ain    (B)ack    (H)elp   (E)xit

]]></menu_text>
    <menu_help><![CDATA[   Demo Menu Help Title.   
     
    The Administration Menu enables you to perform limited 
    admin functions.
    
    Explanation of available options:
    (1) Runs OS command ls -l 
        This selection provides options for viewing and managing files
        There 2 issues that need to be checked with this command:
            o size of directory 
            o any missing files shown below: 
			  
        Note: some extra details here ... to help the user understand              the purpose of running this command and using it to solve              a problem.
			  
    (2) Sub Menu yyy
        This option provides access to yyy detailed information
        of data collections performed
		
]]></menu_help>
    <menu_map>1:menu:config_files</menu_map>
    <menu_map>2:menu:collect_performance</menu_map>
    <menu_map>3:command:rda_host</menu_map>
    <menu_map>B:menu:main</menu_map>
    <menu_map>M:menu:main</menu_map>
</menu>   

<menu>
<!-- NEW SECTION HERE --> 
    <menu_name>system_menu</menu_name>
    <menu_title>System Apis Menu</menu_title>
    <menu_text>          
  (1) Properties List All Properties
      (1a) Show da.properties          (1b) Show user.properties
      (1c) Show session.properties
      (1d) Ocm Summary                 (1e) Ocm Summary Details
      (1f) Show DA Version             (1g) Show Component Versions
  (2) File Management / Reports Settings
      (2a) Show All collected files    (2b) Show Current Session key      
      (2c) da.property DA.mos_username (2d) password DA.mos_password
      (2e) Set da prop use_wallet=true  
      (2f) Update all Da Properties showing default
      (2g) Reset Da Properties to defaults, rm wallet_key           
  (3) SR Creation and Uploading
      (3a) Package todays Files        (3d) Pick timeframe
      (3b) Create Draft SR             (3c) Package and Upload Files
  (4) MOS KM Downloading
      (4a) Download Note               (4b) Download DA Menu
      (4c) Download All Files      
      (B)ack to main menu  (H)elp  (E)xit
   </menu_text>
    <menu_help>   
     This is the start of the admin System menu options
     that will be used to create the DA ADMIN screens the
     user will call to change setups, view properties, 
     upload files, etc.     
        ...
        ...
        ...
     To be completed!!        
   </menu_help>
    <menu_map>1:command:510</menu_map>
    <menu_map>1a:command:511</menu_map>
    <menu_map>1b:command:512</menu_map>
    <menu_map>1c:command:513</menu_map>
    <menu_map>1d:command:514</menu_map>
    <menu_map>1e:command:515</menu_map>
    <menu_map>1f:command:516</menu_map>
    <menu_map>1g:command:517</menu_map>
    <menu_map>2:command:520</menu_map>
    <menu_map>2a:command:521</menu_map>
    <menu_map>2b:command:522</menu_map>
    <menu_map>2c:command:523</menu_map>
    <menu_map>2d:command:524</menu_map>
    <menu_map>2e:command:525</menu_map>
    <menu_map>2f:command:526</menu_map>
    <menu_map>2g:command:527</menu_map>
    <menu_map>3:command:530</menu_map>
    <menu_map>3a:command:531</menu_map>
    <menu_map>3d:command:534</menu_map>
    <menu_map>3b:command:532</menu_map>
    <menu_map>3c:command:533</menu_map>
    <menu_map>4a:command:540</menu_map>
    <menu_map>4b:command:541</menu_map>
    <menu_map>4c:command:542</menu_map>
    <menu_map>B:menu:main</menu_map>
</menu>   




<menu>
    <menu_name>shell_examples</menu_name>
    <menu_title>Shell Examples</menu_title>
    <menu_text><![CDATA[        
        Shows some of the features of all OS related commands and scripts.

        (1) Find Files Under ORACLE_HOME
        (2) Platform Specific Check        
        (3) Visual Basic Script Hello World 
        (4) Visual Basic Complex ~600 lines
        (5) Perl Basic Demo on Windows and Unix or perl -e print xyz
        (6) Timeout testing (Must wait 60000 seconds)
        (7) Shell Includes or Merge commands
        (8) Javascript demo        
        Perl Examples
        (9) Perl simple for loop running Windows and Unix versions
       (10) Perl platform specific options for Windows and Unix
       (11) ...
       (12) Perl use DaPerl.pm to support Win and Unix os stuff, cp,cat,ls
       (13) Perl Include myPerl.pm automatically from command_required_content
       (14) Perl Oracle Database module demo using DaDB.pm in lib/includes
       (15) Perl File to Stream inputs and run another perl 16 from itself
       (16) Just perl command from 15 not called from another da command
       (17) OS command running Da Perl command Unix Only demo
       (18) Stream from perl using sqlplus with password

        (M)ain    (B)ack    (H)elp   (E)xit

]]></menu_text>
    <menu_help><![CDATA[   Demo Menu Help Title.   
     
    The Administration Menu enables you to perform limited 
    admin functions.
    
    Explanation of available options:
    (1) Find files under ORACLE_HOME directory
        using find in unix and FIND.com in Windows
			  
   (2) Shows the platform specific command options
       This allows for coding an OS command or script in multiple
       languages such as for Windows with batch or vbs and in unix
       as needed for multiple types of unix.
		
]]></menu_help>
    <menu_map>1:command:os_101</menu_map>
    <menu_map>2:command:os_102</menu_map>
    <menu_map>3:command:os_103</menu_map>
    <menu_map>4:command:os_104</menu_map>
    <menu_map>5:command:os_105</menu_map>
    <menu_map>6:command:os_106</menu_map>    
    <menu_map>7:command:da_includes_demo</menu_map>
    <menu_map>8:command:os_107</menu_map>    
    <menu_map>9:command:os_109</menu_map>    
    <menu_map>10:command:os_110</menu_map>        
    <menu_map>11:command:os_111</menu_map>            
    <menu_map>12:command:os_112</menu_map>    
    <menu_map>13:command:os_113</menu_map>    
    <menu_map>14:command:os_114</menu_map>
    <menu_map>15:command:stream_115</menu_map>
    <menu_map>16:command:os_115</menu_map>
    <menu_map>17:command:stream_116</menu_map>
    <menu_map>18:command:stream_from_perl</menu_map>
    <menu_map>B:menu:main</menu_map>
    <menu_map>M:menu:main</menu_map>
</menu>


<menu>
    <menu_name>config_files</menu_name>
    <menu_title>Type of Files</menu_title>
    <menu_text><![CDATA[        
        Select Type of Files

        (1) Configuration Files
        (2) Log Files

        (M)ain    (B)ack    (H)elp   (E)xit
]]></menu_text>
    <menu_help><![CDATA[   Demo Menu Help Title.   
     
    The Administration Menu enables you to perform limited 
    admin functions.
    
    Explanation of available options:
    (1) Runs OS command ls -l 
        This selection provides options for viewing and managing files
        There 2 issues that need to be checked with this command:
            o size of directory 
            o any missing files shown below: 
			  
        Note: some extra details here ... to help the user understand              the purpose of running this command and using it to solve              a problem.
			  
    (2) Sub Menu yyy
        This option provides access to yyy detailed information
        of data collections performed
		
]]></menu_help>
    <menu_map>1:command:config_files1</menu_map>
    <menu_map>B:menu:main</menu_map>
    <menu_map>M:menu:main</menu_map>
    <menu_map>2:command:config_files2</menu_map>
</menu>


<menu>
    <menu_name>collect_perform</menu_name>
    <menu_title>Performance Issue</menu_title>
    <menu_text><![CDATA[        
        Please select type of Performance Issue        

        (1) CPU related
        (2) Disk related 
        (3) Memory related
        (4) Version or Patching

        (M)ain    (B)ack    (H)elp   (E)xit
]]></menu_text>
    <menu_help><![CDATA[   Demo Menu Help Title.   
     
    The Administration Menu enables you to perform limited 
    admin functions.
    
    Explanation of available options:
    (1) Runs OS command ls -l 
        This selection provides options for viewing and managing files
        There 2 issues that need to be checked with this command:
            o size of directory 
            o any missing files shown below: 
			  
        Note: some extra details here ... to help the user understand              the purpose of running this command and using it to solve              a problem.
			  
    (2) Sub Menu yyy
        This option provides access to yyy detailed information
        of data collections performed
		
]]></menu_help>
    <menu_map>1:command:collect_perform1</menu_map>
    <menu_map>B:menu:main</menu_map>
    <menu_map>M:menu:main</menu_map>
    <menu_map>2:command:collect_perform2</menu_map>
    <menu_map>3:command:collect_perform3</menu_map>
    <menu_map>4:command:collect_perform4</menu_map>
</menu>


<menu>
    <menu_name>prereq_testing</menu_name>
    <menu_title>Prereqs Demo build LOV and Session Variables</menu_title>
    <menu_text><![CDATA[                         
             (1) prereq_one - gets list of HOME env=values to pick from OS
             (2) prereq_two - three level prompt using values from last OS
             (3) prereq_three - WLS Domains and Servers listings System Cmds
             (4) prereq_four - Select All demo from choices
             (5) prereq_five - Testing pass :all option to next prompt
             (7) Session Test, set DA_SESSION_PROCESS_COUNT
             (8) Session Usage of PROCESS_COUNT in command_args
             (9) Static LOV - yes; no type
             (10) Static LOV where first one used in second one.
             (11) Pick files to grep LOV 
             (12) prereq_six - Usage of known value for tokens in prereq commands
             (13) prereq_seven - Demo run of multiple commands after getting all prompts
             (14) prereq_one_1 - Check if only one is returned in lov
                            
      (H)elp  (B)ack  (E)xit 
   ]]></menu_text>
    <menu_help><![CDATA[   
     Prereq testing allows for calling another command first and allowing
     that to build a pick-list of name=value pairs that can be used for 
     the value of that input based on user selection. This allows for
     n-number of other prompts to use the value from the prior LOV also
     providing an n-number of pick-lists ui.

   ]]></menu_help>
    <menu_map>B:menu:main</menu_map>
    <menu_map>1:command:prereq_one</menu_map>
    <menu_map>2:command:prereq_two</menu_map>
    <menu_map>3:command:prereq_three</menu_map>
    <menu_map>4:command:prereq_four</menu_map>
    <menu_map>5:command:51</menu_map>
    <menu_map>6:command:52</menu_map>
    <menu_map>7:command:session_set</menu_map>
    <menu_map>8:command:session_use</menu_map>
    <menu_map>9:command:static_lov</menu_map>
    <menu_map>10:command:static_lov2</menu_map>
    <menu_map>11:command:grep_files_lov</menu_map>
    <menu_map>12:menu:prereq_six</menu_map>
    <menu_map>13:menu:prereq_seven</menu_map>
    <menu_map>14:command:prereq_one_1</menu_map>
    <menu_map>99:command:60</menu_map>
</menu>   

<menu>
    <menu_name>prereq_six</menu_name>
    <menu_title>Prereqs Demo tokenized values in commad_args for a prereq command</menu_title>
    <menu_text><![CDATA[                         
             (1) prereq_six_one - Sets value for the comman_args token in prereq command
             (2) prereq_six_two - Uses the value set and tokenizes command_args in prereq command
                            
      (H)elp  (B)ack  (E)xit 
   ]]></menu_text>
    <menu_help><![CDATA[   
     Prereq testing  , set a value for a token that is used in a prereq command.
     Second execution of the command MUST use the value set tokenizing the contents
     of command_args where the token is used.

   ]]></menu_help>
    <menu_map>B:menu:prereq_six</menu_map>
    <menu_map>1:command:prereq_six_one</menu_map>
    <menu_map>2:command:prereq_six_two</menu_map>
</menu>   

<!-- 
   GENERAL KEYS: 
   
   600 FileImpl
   700 SqlImpl
   800 WlsImpl
   
-->


<commands>

  <command>
     <command_menu>PREREQ_ADR_BASE</command_menu>
     <command_title>Internal LOV: Pick ADR Base</command_title>
             <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

     <command_type>System</command_type>
     <command_args>adr_lovs bases</command_args>
  </command>

  <command>
     <command_menu>PREREQ_ADR_BASE_HOMES</command_menu>
     <command_title>Internal LOV: Pick ADR Home from ADR Base
     </command_title>
             <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

     <command_type>System</command_type>
     <command_args>adr_lovs homes base=%%PREREQ_ADR_BASE%%</command_args>
  </command>

  <command>
    <command_menu>1</command_menu>    
    <command_title>RDA run module OS and Net</command_title> 
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Rda</command_type>
    <command_args>run_module=OS,NET</command_args>
    <command_args_windows>@echo off
    echo "Line one was missing Bug 14243927 testing with output > 40 lines "
    REM DIR /S %ORACLE_HOME%\rda\da
    DIR
    </command_args_windows>
  </command>
  
  <command>
    <command_menu>2</command_menu>    
    <command_title>OS Check pmon running Process</command_title> 
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_args>ps -ef | grep ora_</command_args>   
    <command_args_windows>windows wmic.exe PROCESS WHERE (NAME="jdeveloper.exe")    
    </command_args_windows>
  </command>
  
<!-- 
  #############################################################################
  WINDOWS EXAMPLES - windows [wmic|registry [recursive]] args
  #############################################################################
-->
  <command>
    <command_menu>windows_processes</command_menu>    
    <command_title>OS Check pmon running Process</command_title> 
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_args>ps -ef | grep ora_</command_args>   
    <command_args_windows>windows wmic.exe PROCESS    
    </command_args_windows>
  </command>
  
  <command>
    <command_menu>windows_jdev_process</command_menu>    
    <command_title>OS Check pmon running Process</command_title> 
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <category_id>collect.os</category_id>
    <command_args>ps -ef | grep ora_</command_args>   
    <command_args_windows>windows wmic.exe PROCESS WHERE (NAME="jdeveloper.exe")    
    </command_args_windows>
  </command>
<!--  value  =windowsCommands.readRegistry("HKLM\\Software\\Oracle\" /s"); 
      WORKS: <command_args_windows>windows registry recursive HKLM\Software\Oracle
-->
  <command>
    <command_menu>windows_registry</command_menu>    
    <command_title>OS Check pmon running Process</command_title> 
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <category_id>collect.os</category_id>
    <command_args>ps -ef | grep ora_</command_args>   
    <command_args_windows>windows registry recursive HKLM\Software\Oracle
    </command_args_windows>
  </command>
  
<!-- 
   Support for platform specifc OS Commands:   
   If you put one or more of these commands in place, then when the
   OS command gets executed it will use the java os.name to match the
   corresponding platform. If there is no match, the OS command will use
   the default command_args value as the default. 
   
   Use these optional plaform specific elements to code one menu OS 
   command to support multiple platforms that use different syntax.
   
     command_args_windows
     command_args_aix
     command_args_hpux
     command_args_irix
     command_args_linux
     command_args_mac
     command_args_macx
     command_args_solaris
     command_args_sunos
     command_args_osf1 (Tru64)

     ie. To support any platform with the default and Windows with its own
         command, use this:
         
         <command_args>ls -l $ORACLE_HOME/rda</command_args>   
         <command_args_windows>DIR %ORACLE_HOME%\rda\</command_args_windows>    
  -->
  <command>
    <command_menu>3</command_menu>    
    <command_title>List OH/RDA Files DA</command_title>
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>    
    <command_args>
    echo "Demo 1 - Testing Da Plugin: lib/plugins/da_shell_functions.sh"    
    . $DA_HOME/lib/includes/da_shell_functions.sh
    func_what_platform
    echo "os_name = $os_name"
    echo "os_bit = $os_bit"
    echo "os_arch = $os_arch"
    echo 
    echo "Demo 2 - show a few Unix Alias values after Setup_OS is run"
    Setup_OS
    echo "SAR and CPU commands"
    env | egrep 'CPU|SAR_g|OS_'
    echo 
    echo "Example Usage: Show OS Version and SubVersion - works for all UNIX "
    echo "OS_VERSION=$OS_VERSION"
    echo "OS_SUBVERSION=$OS_SUBVERSION"
    echo "SAR_g=$SAR_g"
    echo "CPU_INFO=$CPU_INFO"
    echo 
    echo "ORACLE_HOME listing $ORACLE_HOME/rda/da "
    ls -l $ORACLE_HOME/rda/da         
    
    </command_args>   
    <command_args_windows>@echo off
    echo "ORACLE_HOME listing %ORACLE_HOME%"
    REM DIR /S %ORACLE_HOME%\rda\da
    DIR %ORACLE_HOME%
    </command_args_windows>
  </command>  
  <command>
    <command_menu>4</command_menu>    
    <command_title>List OH/RDA Files</command_title>
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>  
    <command_args>ls $ORACLE_HOME/rda/</command_args>   
    <command_args_windows>DIR %ORACLE_HOME%\\rda\\</command_args_windows>   
  </command>  
  <command>
    <command_menu>5</command_menu>    
    <command_title>Show ENV settings</command_title>    
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>    
    <command_args>env</command_args>   
    <command_args_windows>set</command_args_windows>           
    <command_output_match>basic|contains|DA_HOME|match_only</command_output_match>
    <command_output_true>No action required, your a great Admin! </command_output_true>
    <command_output_false>See problem 123, Check your DA env does not have %%pattern%%</command_output_false>
  </command>  
  <command>
    <command_menu>6</command_menu>    
    <command_title>Show /etc/password file</command_title>    
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>    
    <command_args>cat /etc/passwd</command_args>   
  </command>
  <command>
    <command_menu>7</command_menu>
    <command_title>Show ENV settings</command_title>    
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>    
    <command_args>env</command_args>   
    <command_args_windows>set</command_args_windows>          
    <!-- Display Choices: match_only|non_match|all -->
    <command_output_match>basic|contains|ORACLE_HOME|non_match</command_output_match>
    <command_output_true>No action required for menu 7</command_output_true>
    <command_output_false>See problem xyz, caused by improper setup. See Note: 123, used menu 7 %%pattern%%</command_output_false>
  </command>
<!-- 
   For Windows, the find.exe command was not found in the 
   C:\\windows\\system32\\ directory in a PIPE. 
   This may mean that the default shell needs the PATH setup 
   first. It did work when full pathing it and using double
   back slashes for the PATH to match files with a FILTER or STRING
   matching the name. Could do this more easily with just DIR %%FILTER%%
   but trying to test everything.
-->  
  <command>
    <command_menu>8</command_menu>    
    <command_title>Match Directory Files</command_title>    
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_prompt1>PATH|Please enter dir path to list|.</command_prompt1>    
    <command_prompt2>FILTER|Please enter file match filter|.txt</command_prompt2>    
    <command_args>ls %%PATH%% | grep %%FILTER%%</command_args>       
    <command_args_windows>DIR %%PATH%% | C:\\windows\\system32\\find "%%FILTER%%"</command_args_windows>    
    <command_output_match>basic|contains|RDA|non_match</command_output_match>
    <command_output_true>Matched True, no action required.</command_output_true>
    <command_output_false>Matched False...see patch xyz</command_output_false>
  </command>
  <command>
    <command_menu>9</command_menu>
    <command_title>Display da.sh file</command_title>    
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_args>cat $ORACLE_HOME/ccr/da/da.sh</command_args>   
    <command_args_windows>TYPE D:\\2k.txt</command_args_windows>
    <command_output_match>basic|contains|import|match_only</command_output_match>
    <command_output_true>Matched True, no action required.</command_output_true>
    <command_output_false>Matched False...see patch xyz</command_output_false>
  </command>    
  <command>
    <command_menu>10</command_menu>
    <command_title>Show Properties</command_title>    
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>System</command_type>    
    <command_args>show_properties</command_args>   
  </command>    
  <command>
    <command_menu>11</command_menu>
    <command_title>ORACLE_HOME Files</command_title>    
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_args>DIR %%ORACLE_HOME%%</command_args>
    <command_args_linux>ls -l $ORACLE_HOME</command_args_linux>       
  </command>
  <command>
    <command_menu>12</command_menu>        
    <command_title>adrci show homes</command_title>    
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_args>adrci exec="show homes"</command_args>   
  </command>  
  <command>
    <command_menu>13</command_menu>
    <command_title>test echo</command_title>    
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_args>echo To check disk problems you must go to the remote hosts disk drives</command_args>   
  </command>  
    
  <command>
  <command_menu>os_101</command_menu>
  <command_title>Find Files Under ORACLE_HOME</command_title>
  <command_descr><![CDATA[Used find files under ORACLE_HOME]]></command_descr>
  <category_id>collect.os</category_id>
  <command_type>OS</command_type>
    <command_prompt1>FILE_NAME_MATCH|Please enter a path or file to match under ORACLE_HOME|.</command_prompt1>
  <command_args><![CDATA[find $ORACLE_HOME -name "%%FILE_NAME_MATCH%%"]]></command_args>
  <command_args_windows>DIR /S %ORACLE_HOME%\\%%FILE_NAME_MATCH%%</command_args_windows>
  </command>   
    
  <command>
    <command_menu>os_102</command_menu>
    <command_title>Testing Platform Specific OS</command_title>  
    <command_descr>Used for testing platform specific commands</command_descr>
    <category_id>collect.os</category_id>
    <command_type>OS</command_type>    
    <command_args>env</command_args>       
    <command_args_aix>echo aix; env</command_args_aix>    
    <command_args_hpux>echo hpux; env</command_args_hpux>
    <command_args_irix>echo irix; env</command_args_irix>
    <command_args_linux>echo linux; env</command_args_linux>
    <command_args_mac>echo mac; env</command_args_mac>       
    <command_args_macx>echo macx; env</command_args_macx>       
    <command_args_solaris>echo solaris; env</command_args_solaris>       
    <command_args_sunos>echo sunos; env</command_args_sunos>       
    <command_args_windows>echo windows
    set</command_args_windows>    
  </command>   

<!-- 
    HOW TO CALL VBS SCRIPT FROM CMD:
    START /WAIT CScript <path>\<filename>.vbs //NoLogo 
-->
  <command>
    <command_menu>os_103</command_menu>
    <command_title>Simple VBS Script</command_title>
    <command_descr><![CDATA[Used to show how VBS Scripts can be used.]]></command_descr>
    <category_id>collect.os</category_id>
    <command_type>OS</command_type>
    <command_args><![CDATA[echo Nothing for unix]]></command_args>
    <command_args_windows><![CDATA['VBSCRIPT:
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' FileSystemObject Sample Code
' Copyright 1998 Microsoft Corporation.   All Rights Reserved. 
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit
Dim NewLine

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' The main routine
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Sub Main
   NewLine = Chr(10)
   ' Set up global data.    
   WScript.Echo "Hello Visual Basic!" & NewLine & NewLine
End Sub

Call Main

  ]]></command_args_windows>
  </command>       
    

  <command>
    <command_menu>os_104</command_menu>
    <command_title>DOS VBS Script</command_title>    
    <command_descr><![CDATA[Used to show how VBS Scripts can be used.]]></command_descr>
    <category_id>collect.os</category_id>
    <command_type>OS</command_type>
    <command_args><![CDATA[echo Nothing for unix]]></command_args>
    <command_args_windows><![CDATA['VBSCRIPT:
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' FileSystemObject Sample Code
' Copyright 1998 Microsoft Corporation.   All Rights Reserved. 
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Option Explicit

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Regarding code quality:
' 1) The following code does a lot of string manipulation by 
'    concatenating short strings together with the "&" operator. 
'    Since string concatenation is expensive, this is a very 
'    inefficient way to write code. However, it is a very 
'    maintainable way to write code, and is used here because this 
'    program performs extensive disk operations, and because the 
'    disk is much slower than the memory operations required to 
'    concatenate the strings. Keep in mind that this is demonstration 
'    code, not production code.
'
' 2) "Option Explicit" is used, because declared variable access is 
'    slightly faster than undeclared variable access. It also prevents 
'    bugs from creeping into your code, such as when you misspell 
'    DriveTypeCDROM as DriveTypeCDORM.
'
' 3) Error handling is absent from this code, to make the code more 
'    readable. Although precautions have been taken to ensure that the 
'    code will not error in common cases, file systems can be 
'    unpredictable. In production code, use On Error Resume Next and 
'    the Err object to trap possible errors.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Some handy global variables
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Dim TabStop
Dim NewLine

Const TestDrive = "C"
Const TestFilePath = "C:\Test"

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Constants returned by Drive.DriveType
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Const DriveTypeRemovable = 1
Const DriveTypeFixed = 2
Const DriveTypeNetwork = 3
Const DriveTypeCDROM = 4
Const DriveTypeRAMDisk = 5

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Constants returned by File.Attributes
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Const FileAttrNormal   = 0
Const FileAttrReadOnly = 1
Const FileAttrHidden = 2
Const FileAttrSystem = 4
Const FileAttrVolume = 8
Const FileAttrDirectory = 16
Const FileAttrArchive = 32 
Const FileAttrAlias = 64
Const FileAttrCompressed = 128

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Constants for opening files
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Const OpenFileForReading = 1 
Const OpenFileForWriting = 2 
Const OpenFileForAppending = 8 

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' ShowDriveType
' Purpose: 
'    Generates a string describing the drive type of a given Drive object.
' Demonstrates the following 
'  - Drive.DriveType
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function ShowDriveType(Drive)

   Dim S
   
   Select Case Drive.DriveType
   Case DriveTypeRemovable
      S = "Removable"
   Case DriveTypeFixed
      S = "Fixed"
   Case DriveTypeNetwork
      S = "Network"
   Case DriveTypeCDROM
      S = "CD-ROM"
   Case DriveTypeRAMDisk
      S = "RAM Disk"
   Case Else
      S = "Unknown"
   End Select

   ShowDriveType = S

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' ShowFileAttr
' Purpose: 
'    Generates a string describing the attributes of a file or folder.
' Demonstrates the following 
'  - File.Attributes
'  - Folder.Attributes
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function ShowFileAttr(File) ' File can be a file or folder

   Dim S
   Dim Attr
   
   Attr = File.Attributes

   If Attr = 0 Then
      ShowFileAttr = "Normal"
      Exit Function
   End If

   If Attr And FileAttrDirectory Then S = S & "Directory "
   If Attr And FileAttrReadOnly Then S = S & "Read-Only "
   If Attr And FileAttrHidden Then S = S & "Hidden "
   If Attr And FileAttrSystem Then S = S & "System "
   If Attr And FileAttrVolume Then S = S & "Volume "
   If Attr And FileAttrArchive Then S = S & "Archive "
   If Attr And FileAttrAlias Then S = S & "Alias "
   If Attr And FileAttrCompressed Then S = S & "Compressed "

   ShowFileAttr = S

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' GenerateDriveInformation
' Purpose: 
'    Generates a string describing the current state of the 
'    available drives.
' Demonstrates the following 
'  - FileSystemObject.Drives 
'  - Iterating the Drives collection
'  - Drives.Count
'  - Drive.AvailableSpace
'  - Drive.DriveLetter
'  - Drive.DriveType
'  - Drive.FileSystem
'  - Drive.FreeSpace
'  - Drive.IsReady
'  - Drive.Path
'  - Drive.SerialNumber
'  - Drive.ShareName
'  - Drive.TotalSize
'  - Drive.VolumeName
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function GenerateDriveInformation(FSO)

   Dim Drives
   Dim Drive
   Dim S

   Set Drives = FSO.Drives
   S = "Number of drives:" & TabStop & Drives.Count & NewLine & NewLine

   ' Construct 1st line of report.
   S = S & String(2, TabStop) & "Drive" 
   S = S & String(3, TabStop) & "File" 
   S = S & TabStop & "Total"
   S = S & TabStop & "Free"
   S = S & TabStop & "Available" 
   S = S & TabStop & "Serial" & NewLine

   ' Construct 2nd line of report.
   S = S & "Letter"
   S = S & TabStop & "Path"
   S = S & TabStop & "Type"
   S = S & TabStop & "Ready?"
   S = S & TabStop & "Name"
   S = S & TabStop & "System"
   S = S & TabStop & "Space"
   S = S & TabStop & "Space"
   S = S & TabStop & "Space"
   S = S & TabStop & "Number" & NewLine   

   ' Separator line.
   S = S & String(105, "-") & NewLine

   For Each Drive In Drives
      S = S & Drive.DriveLetter
      S = S & TabStop & Drive.Path
      S = S & TabStop & ShowDriveType(Drive)
      S = S & TabStop & Drive.IsReady

      If Drive.IsReady Then
         If DriveTypeNetwork = Drive.DriveType Then
            S = S & TabStop & Drive.ShareName 
         Else
            S = S & TabStop & Drive.VolumeName 
         End If
         S = S & TabStop & Drive.FileSystem
         S = S & TabStop & Drive.TotalSize
         S = S & TabStop & Drive.FreeSpace
         S = S & TabStop & Drive.AvailableSpace
         S = S & TabStop & Hex(Drive.SerialNumber)
      End If

      S = S & NewLine

   Next

   GenerateDriveInformation = S

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' GenerateFileInformation
' Purpose: 
'    Generates a string describing the current state of a file.
' Demonstrates the following 
'  - File.Path
'  - File.Name
'  - File.Type
'  - File.DateCreated
'  - File.DateLastAccessed
'  - File.DateLastModified
'  - File.Size
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function GenerateFileInformation(File)

   Dim S

   S = NewLine & "Path:" & TabStop & File.Path
   S = S & NewLine & "Name:" & TabStop & File.Name
   S = S & NewLine & "Type:" & TabStop & File.Type
   S = S & NewLine & "Attribs:" & TabStop & ShowFileAttr(File)
   S = S & NewLine & "Created:" & TabStop & File.DateCreated
   S = S & NewLine & "Accessed:" & TabStop & File.DateLastAccessed
   S = S & NewLine & "Modified:" & TabStop & File.DateLastModified
   S = S & NewLine & "Size" & TabStop & File.Size & NewLine

   GenerateFileInformation = S

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' GenerateFolderInformation
' Purpose: 
'    Generates a string describing the current state of a folder.
' Demonstrates the following 
'  - Folder.Path
'  - Folder.Name
'  - Folder.DateCreated
'  - Folder.DateLastAccessed
'  - Folder.DateLastModified
'  - Folder.Size
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function GenerateFolderInformation(Folder)

   Dim S

   S = "Path:" & TabStop & Folder.Path
   S = S & NewLine & "Name:" & TabStop & Folder.Name
   S = S & NewLine & "Attribs:" & TabStop & ShowFileAttr(Folder)
   S = S & NewLine & "Created:" & TabStop & Folder.DateCreated
   S = S & NewLine & "Accessed:" & TabStop & Folder.DateLastAccessed
   S = S & NewLine & "Modified:" & TabStop & Folder.DateLastModified
   S = S & NewLine & "Size:" & TabStop & Folder.Size & NewLine

   GenerateFolderInformation = S

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' GenerateAllFolderInformation
' Purpose: 
'    Generates a string describing the current state of a
'    folder and all files and subfolders.
' Demonstrates the following 
'  - Folder.Path
'  - Folder.SubFolders
'  - Folders.Count
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function GenerateAllFolderInformation(Folder)

   Dim S
   Dim SubFolders
   Dim SubFolder
   Dim Files
   Dim File

   S = "Folder:" & TabStop & Folder.Path & NewLine & NewLine
   Set Files = Folder.Files

   If 1 = Files.Count Then
      S = S & "There is 1 file" & NewLine
   Else
      S = S & "There are " & Files.Count & " files" & NewLine
   End If

   If Files.Count <> 0 Then
      For Each File In Files
         S = S & GenerateFileInformation(File)
      Next
   End If

   Set SubFolders = Folder.SubFolders

   If 1 = SubFolders.Count Then
      S = S & NewLine & "There is 1 sub folder" & NewLine & NewLine
   Else
      S = S & NewLine & "There are " & SubFolders.Count & " sub folders" & NewLine & NewLine
   End If

   If SubFolders.Count <> 0 Then
      For Each SubFolder In SubFolders
         S = S & GenerateFolderInformation(SubFolder)
      Next
      S = S & NewLine
      For Each SubFolder In SubFolders
         S = S & GenerateAllFolderInformation(SubFolder)
      Next
   End If

   GenerateAllFolderInformation = S

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' GenerateTestInformation
' Purpose: 
'    Generates a string describing the current state of the C:\Test
'    folder and all files and subfolders.
' Demonstrates the following 
'  - FileSystemObject.DriveExists
'  - FileSystemObject.FolderExists
'  - FileSystemObject.GetFolder
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function GenerateTestInformation(FSO)

   Dim TestFolder
   Dim S

   If Not FSO.DriveExists(TestDrive) Then Exit Function
   'STEVE IGNORES FOR TESTING
   'If Not FSO.FolderExists(TestFilePath) Then Exit Function

   Set TestFolder = FSO.GetFolder(TestFilePath)

   GenerateTestInformation = GenerateAllFolderInformation(TestFolder) 

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' DeleteTestDirectory
' Purpose: 
'    Cleans up the test directory.
' Demonstrates the following 
'  - FileSystemObject.GetFolder
'  - FileSystemObject.DeleteFile
'  - FileSystemObject.DeleteFolder
'  - Folder.Delete
'  - File.Delete
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Sub DeleteTestDirectory(FSO)

   Dim TestFolder
   Dim SubFolder
   Dim File
   
   ' Two ways to delete a file:

   FSO.DeleteFile(TestFilePath & "\Beatles\OctopusGarden.txt")

   Set File = FSO.GetFile(TestFilePath & "\Beatles\BathroomWindow.txt")
   File.Delete   

   ' Two ways to delete a folder:
   FSO.DeleteFolder(TestFilePath & "\Beatles")
   FSO.DeleteFile(TestFilePath & "\ReadMe.txt")
   Set TestFolder = FSO.GetFolder(TestFilePath)
   TestFolder.Delete

End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' CreateLyrics
' Purpose: 
'    Builds a couple of text files in a folder.
' Demonstrates the following 
'  - FileSystemObject.CreateTextFile
'  - TextStream.WriteLine
'  - TextStream.Write
'  - TextStream.WriteBlankLines
'  - TextStream.Close
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Sub CreateLyrics(Folder)

   Dim TextStream
   
   Set TextStream = Folder.CreateTextFile("OctopusGarden.txt")
   
   ' Note that this does not add a line feed to the file.
   TextStream.Write("Octopus' Garden ") 
   TextStream.WriteLine("(by Ringo Starr)")
   TextStream.WriteBlankLines(1)
   TextStream.WriteLine("I'd like to be under the sea in an octopus' garden in the shade,")
   TextStream.WriteLine("He'd let us in, knows where we've been -- in his octopus' garden in the shade.")
   TextStream.WriteBlankLines(2)
   
   TextStream.Close

   Set TextStream = Folder.CreateTextFile("BathroomWindow.txt")
   TextStream.WriteLine("She Came In Through The Bathroom Window (by Lennon/McCartney)")
   TextStream.WriteLine("")
   TextStream.WriteLine("She came in through the bathroom window protected by a silver spoon")
   TextStream.WriteLine("But now she sucks her thumb and wanders by the banks of her own lagoon")
   TextStream.WriteBlankLines(2)
   TextStream.Close

End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' GetLyrics
' Purpose: 
'    Displays the contents of the lyrics files.
' Demonstrates the following 
'  - FileSystemObject.OpenTextFile
'  - FileSystemObject.GetFile
'  - TextStream.ReadAll
'  - TextStream.Close
'  - File.OpenAsTextStream
'  - TextStream.AtEndOfStream
'  - TextStream.ReadLine
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function GetLyrics(FSO)

   Dim TextStream
   Dim S
   Dim File

   ' There are several ways to open a text file, and several 
   ' ways to read the data out of a file. Here's two ways 
   ' to do each:

   Set TextStream = FSO.OpenTextFile(TestFilePath & "\Beatles\OctopusGarden.txt", OpenFileForReading)
   
   S = TextStream.ReadAll & NewLine & NewLine
   TextStream.Close

   Set File = FSO.GetFile(TestFilePath & "\Beatles\BathroomWindow.txt")
   Set TextStream = File.OpenAsTextStream(OpenFileForReading)
   Do    While Not TextStream.AtEndOfStream
      S = S & TextStream.ReadLine & NewLine
   Loop
   TextStream.Close

   GetLyrics = S
   
End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' BuildTestDirectory
' Purpose: 
'    Builds a directory hierarchy to demonstrate the FileSystemObject.
'    We'll build a hierarchy in this order:
'       C:\Test
'       C:\Test\ReadMe.txt
'       C:\Test\Beatles
'       C:\Test\Beatles\OctopusGarden.txt
'       C:\Test\Beatles\BathroomWindow.txt
' Demonstrates the following 
'  - FileSystemObject.DriveExists
'  - FileSystemObject.FolderExists
'  - FileSystemObject.CreateFolder
'  - FileSystemObject.CreateTextFile
'  - Folders.Add
'  - Folder.CreateTextFile
'  - TextStream.WriteLine
'  - TextStream.Close
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function BuildTestDirectory(FSO)

   Dim TestFolder
   Dim SubFolders
   Dim SubFolder
   Dim TextStream

   ' Bail out if (a) the drive does not exist, or if (b) the directory is being built 
   ' already exists.

   If Not FSO.DriveExists(TestDrive) Then
      BuildTestDirectory = False
      Exit Function
   End If

   If FSO.FolderExists(TestFilePath) Then
      BuildTestDirectory = False
      Exit Function
   End If

   Set TestFolder = FSO.CreateFolder(TestFilePath)

   Set TextStream = FSO.CreateTextFile(TestFilePath & "\ReadMe.txt")
   TextStream.WriteLine("My song lyrics collection")
   TextStream.Close

   Set SubFolders = TestFolder.SubFolders
   Set SubFolder = SubFolders.Add("Beatles")
   CreateLyrics SubFolder   
   BuildTestDirectory = True

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' The main routine
' First, it creates a test directory, along with some subfolders 
' and files. Then, it dumps some information about the available 
' disk drives and about the test directory, and then cleans 
' everything up again.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Sub Main

   Dim FSO

   ' Set up global data.
   TabStop = Chr(9)
   NewLine = Chr(10)
   
   Set FSO = CreateObject("Scripting.FileSystemObject")

   If Not BuildTestDirectory(FSO) Then 
      WScript.Echo "Test directory already exists or cannot be created.   Cannot continue."
      Exit Sub
   End If

   WScript.Echo GenerateDriveInformation(FSO) & NewLine & NewLine
   WScript.Echo GenerateTestInformation(FSO) & NewLine & NewLine
   WScript.Echo GetLyrics(FSO) & NewLine & NewLine
   DeleteTestDirectory(FSO)

End Sub

Call Main

  ]]></command_args_windows>
  </command>       
  
<!-- PERL 
  D:\lap\DIAG_TEAM\Unified_Data_Collection\DIAG_ASSIT\SVN\dacore\bin>C:\oraclexe\a
pp\oracle\product\10.2.0\server\ccr\engines\Windows\perl\5.8.3\bin\MSWin32-x86-m
ulti-thread\perl.exe hi.pl
Hello Perl
-->    
 <command>
    <command_menu>os_105</command_menu>
    <command_title>Testing Perl</command_title>  
    <command_descr>Used for Running perl script</command_descr>
    <category_id>collect.os</category_id>
    <command_type>OS</command_type>    
    <command_args>echo "Top line matters, do not put p e r l in it"
    perl -e 'print "Hello Unix, from perl -d option\n"'    #Unix
    </command_args>       
    <command_args_windows>echo "Top line matters, do not put p e r l in it"
    perl -e "print \"Hello Windows, from perl -e option.\n\""  #Win32
    </command_args_windows>
  </command>    

 <command>
    <command_menu>os_106</command_menu>
    <command_title>Timeout message in for loop </command_title>  
    <command_descr>Loops with hello 1 seconds until timeout message</command_descr>
    <category_id>collect.os</category_id>
    <command_type>OS</command_type>    
    <command_args>
x=0
while [ $x -lt 60 ]
 do
   x=`expr $x + 1`
   sleep 1;
   echo "Waiting till time: $x"
done
    </command_args>       
    <command_args_windows>C:\oraclexe\app\oracle\product\10.2.0\server\ccr\engines\Windows\perl\5.8.3\bin\MSWin32-x86-multi-thread\perl.exe D:\lap\DIAG_TEAM\Unified_Data_Collection\DIAG_ASSIT\SVN\dacore\menus\hi.pl</command_args_windows>
  </command>    

  <command>
    <command_menu>os_107</command_menu>
    <command_title>Javascript From DA</command_title>    
    <command_descr><![CDATA[Used to show how Javascripts can be used.]]></command_descr>
    <category_id>collect.os</category_id>
    <command_type>OS</command_type>    
    <command_args><![CDATA[JAVASCRIPT:
    println('hello DA javascript !!')
    ]]></command_args>       
  </command>    

 <command>
    <command_menu>os_109</command_menu>
    <command_title>Testing Perl</command_title>    
    <command_descr><![CDATA[
  Command Summary
    Used for Running Perl script
       
  Command Detail
    o Because of the information collected by this command, a valid user/pass 
      with DBA role must be provided
       
  Input Requirements
    o DB username assigned DBA role and password
    
  Output Details
    o List of DB Service Names]]></command_descr>
    <category_id>collect</category_id>
    <command_type>OS</command_type>    
    <command_args><![CDATA[#!%%PERL_EXE%%
    print "Hello Unix Perl World: %%PERL_EXE%%\n"; 
    while ($nextname = </etc/host*>) {
      $nextname =~ s#.*/##; # remove part before last slash
      print "one of the files is $nextname\n";
    }
    ]]></command_args>       
    <command_args_windows><![CDATA[#!%%PERL_EXE%%
    print "Hello Perl World %%PERL_EXE%%\n\n";     
    print "Expect to see da menu files: \n\n"; 
    while ($nextname = <./menus/*>) {
      $nextname =~ s#.*/##; # remove part before last slash
      print "one of the files is $nextname\n";
    }
    ]]></command_args_windows>    
  </command>    
  
  
  <command>
    <command_menu>os_110</command_menu>
    <command_title>Testing Perl unix or windows version</command_title>  
    <command_descr><![CDATA[
  Command Summary
    Used for Running Perl script
       
  Command Detail
    o This shows how to use Perl       
       
  Input Requirements
    o No inputs
    
  Output Details
    o Perl script output]]></command_descr>    
    <category_id>collect</category_id>
    <command_type>OS</command_type>    
    <command_args><![CDATA[#!%%PERL_EXE%%
use strict;
use warnings;
use POSIX qw(strftime);

### START SETUP OS STUFF ###
my $NT = 0;
my $isUnix = 0;
my $isWindows = 0;
if ($^O =~ /MSWin32/i){
    $NT = 1;
  $isWindows = 1;
  print "\nSetup, Hello Windows Perl World\n\n"; 
} else {
  $isUnix = 1;
  print "\nHello Unix Perl World\n\n"; 
}

my $pathseparator = $NT ? "\\" : "\/";
my $classpath_separator = $NT ? ";":":";

print "\n\n## Setup key header constants: \n"; 
print " OS:".$^O."\n";
print " isUnix=".$isUnix." isWindows=".$isWindows."\n";
print " pathseparator: ".$pathseparator."\n";  
print " classpath_separator: ".$classpath_separator."\n";  

# After an environment variable is tied, you can use it like a normal variable.
use Env qw(PATH HOME HOMEPATH TERM);  # import only specified variables
print "\n\n## Demo Env.pm\n"; 
print " PATH: ".$PATH."\n"; 
print " HOME: ".$HOME."\n" if($HOME); 
print " HOMEPATH: ".$HOMEPATH."\n" if($HOMEPATH); 
print " TERM: ".$TERM."\n" if($TERM); 
my @path = split(/:/, $PATH);
# or modify it any way you like:
$PATH .= ":.";
# To remove a tied environment variable from the environment, make it the undefined value:
# undef $PATH;
# Note that the corresponding operation performed directly against %ENV is not undef, but delete:
# delete $ENV{PATH};

use Cwd;
my $dir = cwd();             # get current working directory safest way
my $saveDir = cwd(); 
# use Cwd 'chdir';        # override chdir; keep PWD up to date
print "\n\n## Cwd.pm cwd(): ".$dir."\n";         
print "  Before chdir tmp, ENV CURRENT DIR: ".$ENV{PWD}."\n";          # prints "/tmp"
# Requies Cwd.pm 
chdir "C:/";
$dir = cwd();
print "  Pwd - after chdir tmp,  ENV CURRENT DIR: ".$dir."\n";          # prints "/tmp"
print "  Any Env with \$ENV{name} or PATH: ".$ENV{PATH}."\n";   
chdir $saveDir; 

# Built-ins
print "\n## Perl Built-ins \n"; 
print "\n  \@_	\@ARG                 :".@_; 
print "\n  \$_	\$ARG                 :".$_ if ($_); 
print "\n  \$\$     \$PROCESS_ID          :".$$; 
print "\n  \$\0	\$PROGRAM_NAME        :".$0;
print "\n  \$\>	\$EFFECTIVE_USER_ID   :".$>;
print "\n  \$\]	\$PERL_VERSION        :".$]; 
print "\n  \$\^P	\$PERLDB              :".$^P;
print "\n  \$\^X	\$EXECUTABLE_NAME     :".$^X;
print "\n  \$\^T	\$BASETIME            :".$^T;
# print "\n  \$\^\O	\$OSNAME              :".$^O;
print "\n  \$\!	\$OS_ERROR            :".$!; 
print "\n  \$\!	\$ERRNO               :".$!; 

print "\n\n# ARGS passing command line and passing into methods testArgs(1,2,3)\n"; 
my ($one, $two) = @ARGV; 
if (not defined $one) {
#  die "No args passed at command line, show help since it would exit \n";
  print "  No args passed at command line, show help since it would exit \n";
} else {
  print "  Args pass: one=$one two=$two\n"; 
}

sub testArgs {
  my ($a, $b, $c) = @_;
  print "\n\n## Passing arguments and procedures: testArgs(a=".$a." b=".$b." c=".$c.")\n";
}
# call the test sub with the parameters
testArgs('alice', 'bob', 'charlie');

my $sec;
my $min;
my $hour;
my $mday;
my $mon;
my $year;
my $wday;
my $yday;
my $isdst; 
($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();
printf("\n\n## Time DATE Support Format - HH:MM:SS: ");
printf("%02d:%02d:%02d:  ", $hour, $min, $sec."\n");

# Requires: use POSIX qw(strftime);
my $datestring = strftime "%a %b %e %H:%M:%S %Y", localtime();
print "\n\n## POSIX Date strings: $datestring\n"; 

# System Command to run any OS commands
my $perlLogfile = "perllogger.log";
system("echo Hi > $perlLogfile"); 

sub appendFile {
    my $logmessage = shift;
    open my $logfile, ">>", $perlLogfile or die "Could not open my.log: $!";
    print $logfile "$hour:$min:$sec, ".$logmessage."\n";
}
print "\n\n## Simple Append File or Loggger, use appendFile(xyz mesg) writes to file $perlLogfile\n"; 
appendFile("line 1: We have a write subroutine!");
appendFile("line 2: We have a write subroutine!");

print "\n\n## Expect to see da menu files, simple List Files: \n"; 
my $nextname; 
while ($nextname = <./menus/oracle_d*.xml>) {
  $nextname =~ s#.*/##; # remove part before last slash
  print " ... menu files starting with: oracle_d are: $nextname\n";
}

## WINODWS SPECIFIC Examples if on windows
if ( $isWindows ) {
  # [CORE] Returns the name of the filesystem of the currently active drive (like 'FAT' or 'NTFS').
  print "\n\n## Build in methods from: Win32::...\n"; 
  print "######################################################\n"; 
  my $a; 
  $a=Win32::FsType();print "DEMO: Win32::FsType() api: ".$a."\n";
  print "Win32::ExpandEnvironmentStrings(%USERNAME%): ".Win32::ExpandEnvironmentStrings("%USERNAME%")."\n"; 
  print "Win32::ExpandEnvironmentStrings(%PROCESSOR_ARCHITECTURE%): ".Win32::ExpandEnvironmentStrings("%PROCESSOR_ARCHITECTURE%")."\n"; 
  print "Win32::ExpandEnvironmentStrings(%ComSpec%): ".Win32::ExpandEnvironmentStrings("%ComSpec%")."\n"; 
  print "Win32::DomainName(): ".Win32::DomainName()."\n"; 
  print "Win32::CreateFile(FILE) 1-means good, else check \$\^E: ".Win32::CreateFile("junk.txt")."\n"; 
  print "Create check for any errors in \$\^E: ".$^E."\n";
  print "Win32::CopyFile(FROM, TO, OVERWRITE[0-dont 1-do]) returns 1 ok: ".Win32::CopyFile("junk.txt", "junk2.txt", 1)."\n"; 
  print "Copy check for any errors in \$\^E: ".$^E."\n";  
  # Returns the processor type: 386, 486 or 586 for x86 processors, 8664
  # for the x64 processor and 2200 for the Itanium. Since it returns the
  print "Win32::GetChipName(): ".Win32::GetChipName()."\n"; 
  my $pwd; 
  $pwd=Win32::GetCwd();
  print "Win32::GetCwd(): ".$pwd."\n"; 
  # OR in $$
  print "Win32::GetCurrentProcessId() or \$\$: ".Win32::GetCurrentProcessId()."\n"; 
  print "Win32::GetCurrentThreadId(): ".Win32::GetCurrentThreadId()."\n"; 
  # FAILED: print "Win32::GetFileVersion($perlLogfile): ".Win32::GetFileVersion("C:\Perl64\bin\perl520.dll")."\n"; 
  print "Win32::GetFullPathName($perlLogfile): ".Win32::GetFullPathName($perlLogfile)."\n"; 
  print "Win32::GetLongPathName(PATHNAME): ".Win32::GetLongPathName($perlLogfile)."\n"; 
  print "Win32::GetNextAvailDrive(): ".Win32::GetNextAvailDrive()."\n";   
  # print "Win32::GetOSDisplayName(): ".Win32::GetOSDisplayName()."\n"; 
  # print "Win32::GetProductInfo(): ".Win32::GetProductInfo()."\n"; 
  # print "Win32::GetSystemMetrics(): ".Win32::GetSystemMetrics()."\n"; 
  print "Win32::GetOSName(): ".Win32::GetOSName()."\n";   
  # This function should only be used to display the actual OS name to
  # the user; it should not be used to determine the class of operating
  # systems this system belongs to. The Win32::GetOSName(),
  # Win32::GetOSVersion, Win32::GetProductInfo() and
  # Win32::GetSystemMetrics() functions provide the base information to
  # check for certain capabilities, or for families of OS releases.
}
 
my $newfile = "newFile.txt"; 
print "\n## Copy / Move Or use System copy: system(copy $perlLogfile $newfile);\n";
if ( $isWindows ) {
  system("copy $perlLogfile $newfile");       # dos, vms
} else {
  system("cp $perlLogfile $newfile");       # unix
}

use File::Copy;
print "\n\n## Better to use: File::Copy copy($perlLogfile $newfile); or move(from,to) \n";
copy($perlLogfile , $newfile)
    or die "copy failed: $!";
move($newfile, $newfile."MOVED")
    or die "move failed: $!";


##############################################################################
# Only shows ones that are set, windows only shows Readable and Writable
##############################################################################
print "\n\n## Use stat(file) and -f -r -x options \n"; 
if ( -f $perlLogfile ) { print " ... its a FILE if -f: ".$perlLogfile."\n"; }
stat($perlLogfile);
if ( -r _ ) { print "Readable\n"; }
# Same as above: 
print "Writable\n" if -w _;
print "Executable\n" if -x _;
print "Setuid\n" if -u _;
print "Setgid\n" if -g _;
print "Sticky\n" if -k _;
print "Text\n" if -T _;
print "Binary\n" if -B _;


# { exec ('foo') }; print STDERR "couldn't exec foo: $!";
# Doesn't fully return to prompt below, but works: 
# my $tt = eval { exec ('DIR *.pl'); return 0; };
# print STDERR "couldn't exec DIR: $!";
# print $tt; 

# my @args = ( "echo surprise\n" );    
# exec @args;               # subject to shell escapes
# if @args == 1
# exec { $args[0] } @args;  # safe even with one-arg list
        
use Socket;
my $packed_ip = gethostbyname("www.oracle.com");
my $ip_address; 
if (defined $packed_ip) {
  $ip_address = inet_ntoa($packed_ip);
  print "\n\n## ip lookup with gethostbyname(www.oracle.com): ".$ip_address."\n"; 
}

##############################################################################
# Some Basics to Formatting
##############################################################################
print "\n\n## String Formatting Basics, ltrim, rtrim, block print## \n"; 
print "##############################################################################\n"; 

# Declare the subroutines
sub trim($);
sub ltrim($);
sub rtrim($);

# Perl trim function to remove whitespace from the start and end of the string
sub trim($)
{
  my $string = shift;
  $string =~ s/^\s+//;
  $string =~ s/\s+$//;
  return $string;
}

# Left trim function to remove leading whitespace
sub ltrim($)
{
  my $string = shift;
  $string =~ s/^\s+//;
  return $string;
}

# Right trim function to remove trailing whitespace
sub rtrim($)
{
  my $string = shift;
  $string =~ s/\s+$//;
  return $string;
} 

print "\n## Function Demo for simple trim, see sub trim()\n"; 
print "rtrim( steve ): =>".rtrim(" STEVE ")."<=\n"; 
print "ltrim( steve ): =>".ltrim(" STEVE ")."<=\n"; 

print <<"END";

BLOCK PRINT EXAMPLE
-------------------
  This shows the 
  print <<END
  ... text until the next end
  on a line alone with a single CR 
  Note: Used for blocks of text.
  
END


my $cost = 100;
my $quantity = 2; 
my $str = "widget";
my $num = $cost/$quantity;

print "\n\n## \"format\" allows putting certain data in columns using a named key\n";
format Something =
  Test: @<<<<<<<< @||||| @>>>>>
        $str,     $%,    '$' . int($num)
.
    
$~ = 'Something';
write;
    
    ]]></command_args>  
  </command> 
   
   <command>
    <command_menu>os_112</command_menu>
    <command_title>Shows DaPerl.pm windows or unix provided module PERL5LIB</command_title>  
    <command_descr>Used for Running methods in DA provided DaPerl.pm modules found in da_home/lib/includes</command_descr>
    <category_id>collect.os</category_id>
    <command_type>OS</command_type>          
    <command_required_content>myPerl.pm,</command_required_content>
    <command_args><![CDATA[#!%%PERL_EXE%%
use DaPerl; 
#################################################################
# File: daDemo.pl                      Date: 7/29/15
#
# Demo the DaPerl.pm library of supported Perl Methods
# - Done by adding DA_HOME/lib/include to the PERL5LIB
#   during discovery. This file DaPerl.pm is put in that
#   directory with other DA provided supporting libraries
#   similar to shell.
# - This could also be generic for any perl developer(s) and not
#   just for the Da provided DaPerl.pm module. The other location
#   to be added would be for plugins PLUGIN_HOME/lib for any 
#   installed plugins.
#
# Optionally the default log file / location can be provided as long
# as called set at the top before calling the log command.
# $DaPerl::perlLogfile = "output/log/steve.log.txt"; 
#
#   TODO: Consider a map of any OS commands that could be called either from unix
#         or windows, and then translate them ... if possible to a similar command
#         for windows ?? Maybe a bad idea because they would not be exact.........
#         Probably better to build 'exact utilities' like I have done with ls but
#         only support basic options like ls_l ls_r
#
#  USAGE: This script must be run from $DA_HOME and have 
#         PERL5LIB set to $DA_HOME/lib/includes to run as
#         intended.  
#         Example on Unix:
#           export PERL5LIB=.:$DA_HOME/lib/includes
#           cd $DA_HOME
#           perl daDemo.pl
#################################################################

DaPerl::log("Top: About to add to da log from DaPerl.pm "); 
my $ret = 0; 
my $true = 1;
my $false = 0; 

# Shared available globals from DaPerl.pm
##################################################################
print "\$DaPerl::NT=".$DaPerl::NT."\n"; 
print "\$DaPerl::HOME=".$DaPerl::HOME."\n"; 
print "\$DaPerl::daHome=".$DaPerl::daHome."\n"; 
print "\$DaPerl::daOutput=".$DaPerl::daOutput."\n"; 
print "\$DaPerl::perlVersion=".$DaPerl::perlVersion."\n"; 
print "\$DaPerl::perlPath=".$DaPerl::perlPath."\n";
# Checking for installed products, 
# and setting home variables rdaHome, ocmHome, adrHome, tfaHome
print "\$DaPerl::isInstalled(RDA, verbose)=".DaPerl::isInstalled("RDA", $false),"\n";
print "\$DaPerl::isInstalled(OCM, verbose)=".DaPerl::isInstalled("OCM", $false),"\n";
print "\$DaPerl::isInstalled(ADR, verbose)=".DaPerl::isInstalled("ADR", $false),"\n";
print "\$DaPerl::isInstalled(TFA, verbose)=".DaPerl::isInstalled("TFA", $false),"\n"; 

DaPerl::log(" ... calling ls with: *.pl "); 
print "\n#### DaPerl::ls(path) on windows or unix #### \n".DaPerl::ls("*.pl"),"\n";

if ( $DaPerl::isWindows ) {  
  print "\n#### OS command DaPerl::run(ipconfig) on windows #### \n".DaPerl::run("ipconfig"),"\n";
} else {
  print "\n#### OS command DaPerl::run(/sbin/ifconfig) on unix #### \n".DaPerl::run("/sbin/ifconfig"),"\n";
}

## How to run other DA Command types from perl using java
## This would include types: OS, SQL/SQLPLUS, RDA, ADR, OCM, FILE, WLS
## Below is a demo to call a simple os command: os_114 in the qa_menus.xml 
## that demonstrates how to 'stream' inputs from perl to the DA command
## and return the output. Look for the value of HIRAN to be tokenized in the
## output of your command and then put in the output of your perl code.
#####
## TODO: REWRITE as DaPerl::runDaCmd("file", "cmd", @inputs);
#####
my $daCmdOut =  ""; 
if ( $DaPerl::isWindows ) {
  DaPerl::log(" ... calling windows exec_da command "); 
  print "\n#### WINDOWS \n";   
  # system("echo HIRAN=DEMO_IMPL_FROM_WINDOWS_PERL_STREAMED_SECURE_DATA > INPUT.txt");
  # system("echo STEVE=STEVE_IMPL_FROM_WINDOWS_PERL_STREAMED_SECURE_DATA >> INPUT.txt");
  DaPerl::writeToFile('INPUT.txt', 'HIRAN=DEMO_IMPL_FROM_WINDOWS_PERL_STREAMED_SECURE_DATA');   
  DaPerl::appendToFile('INPUT.txt', 'STEVE=STEVE_IMPL_FROM_WINDOWS_PERL_STREAMED_SECURE_DATA');
  my $daImplCmd = "java oracle.sysman.da.cli.DaSystemCli -DDA_OUTPUT=$DaPerl::daOutput -exec_da -s menu_file=menus/qa_menus.xml command=os_113 < INPUT.txt"; 
  $daCmdOut =  DaPerl::run($daImplCmd);
  print "\n#### exec_da: ".$daCmdOut,"\n";
} else { 
  DaPerl::log(" ... calling Unix exec_da command "); 
  print "\n#### UNIX \n";
  my $daImplCmd = "java oracle.sysman.da.cli.DaSystemCli -DDA_OUTPUT=$DaPerl::daOutput -exec_da -s menu_file=menus/qa_menus.xml command=os_113 << Zen\n"."HIRAN=DEMO_IMPL_FROM_UNIX_PERL_STREAMED_SECURE_DATA\n"."STEVE=STEVE_IMPL_FROM_WINDOWS_PERL_STREAMED_SECURE_DATA\n"."\nZen\n"; 
  print "Running: ",$daImplCmd,"\n";
  $daCmdOut =  DaPerl::run($daImplCmd); 
  print "\n#### exec_da: ".$daCmdOut,"\n";  
}

DaPerl::log(" ... calling pwd() "); 
print "\n#### DaPerl::pwd() ####:\n  pwd=".DaPerl::pwd(),"\n";

# print "\n#### DaPerl::cat(.pl) #### \n".DaPerl::cat("*.pl"),"\n";

DaPerl::log(" ... calling cp() "); 
print "\n#### DaPerl::cp() to JJJ.txt ####:\n";
$ret = DaPerl::cp('da.sh', 'JJJ.txt', 'VERBOSE'); 
print "cp return code: $ret\n"; 

DaPerl::log(" ... calling mv() "); 
print "\n#### DaPerl::mv() move to RRR.txt ####:\n";
$ret = DaPerl::mv('JJJ.txt', 'RRR.txt', 'VERBOSE'); 
print "mv return code: $ret\n"; 

DaPerl::log(" ... calling rm() "); 
print "\n#### DaPerl::rm() RRR.txt ####:\n";
DaPerl::rm('RRR.txt'); 

DaPerl::log(" ... calling ps() "); 
my $match = "java";
print "\n#### DaPerl::ps() - Show running processes matching $match ####:\n";
my $ret = DaPerl::ps($match);
print "out : $ret\n"; 

my $fileMatch = "./menus/oracle_d*.xml"; 
my $txtMatch = "<header title"; 
DaPerl::log(" ... calling find($fileMatch, $txtMatch) "); 
print "\n#### DaPerl::find() - Show find of PERL5LIB string in perl files ####:\n";
my @matches = DaPerl::find($fileMatch, $txtMatch); 
print "\n\n## DaPerl::find() files matching: $txtMatch with string: $txtMatch\n"; 
foreach (@matches) {
  print "$_\n";
}

DaPerl::log("End of program"); 

    ]]></command_args>    
  </command>   


   <command>
    <command_menu>os_113</command_menu>
    <command_title>Shows automatic Perl Module extraction from same Menu xml file</command_title>  
    <command_descr>Example shows how myPerl.pm is in the shown in command_required_content
    as a required_content tag is automatically extracted to DA_OUTPUT/downloads which has
    been added to our PERL5LIB path so anything we write their can be included with 
    perl use command.
    </command_descr>
    <command_required_content>myPerl.pm</command_required_content>
    <command_type>OS</command_type>          
    <command_args><![CDATA[#!%%PERL_EXE%%
use myPerl; 
#################################################################
# File: daInclude.pl                      Date: 7/29/15
#
# Demo the myPerl.pm library of supported Perl Methods
# - Done by adding DA_OUTPUT/download to the PERL5LIB
#   during discovery. This file myPerl.pm is put in that
#   directory.
#
#  USAGE: This script must be run from $DA_HOME and have 
#         PERL5LIB set to $DA_OUTPUT/downloads to run as
#         intended.  
#         Example on Unix:
#           export PERL5LIB=.:$DA_OUTPUT/downloads
#           cd $DA_HOME
#           perl daInclude.pl
#  NOTE:
#  When run from DA Menus, the above steps are done automatically
#  by DA OS execution.
#################################################################

print "Start of program daInclude.pl showing how modules get extracted \n\n"; 

print "Demo using: myPerl::printHello(\'    STEVE INCLUDE \') \n"; 
myPerl::printHello('    STEVE INCLUDE '); 

print "\n"; 
print "Show some constants from myPerl::HOME, myPerl::daHome etc. \n"; 
# Shared available globals from DaPerl.pm
##################################################################
print "\$myPerl::NT=".$myPerl::NT."\n"; 
print "\$myPerl::HOME=".$myPerl::HOME."\n"; 
print "\$myPerl::daHome=".$myPerl::daHome."\n"; 
print "\$myPerl::daOutput=".$myPerl::daOutput."\n"; 
print "\$myPerl::perlVersion=".$myPerl::perlVersion."\n"; 
print "\$myPerl::perlPath=".$myPerl::perlPath."\n";

print "\nEnd of program\n"; 

    ]]></command_args>    
  </command>   
    
   <command>
    <command_menu>os_114</command_menu>
    <command_title>Shows myDb.pm which used lib/include/DaDB.pm for DBI.pm</command_title>  
    <command_descr>Shows general Oracle Database commands such as SQL, Listener, etc.
    </command_descr>    
    <command_type>OS</command_type>          
    <command_prompt1>SQL_USER|Please enter user to connect as|system</command_prompt1>        
    <command_prompt2>SQL_PASS|Please enter sql password|</command_prompt2>    
    <command_prompt3>SID|Please enter data ORACLE_SID|%%ORACLE_SID%%</command_prompt3>    
    <command_args><![CDATA[#!%%PERL_EXE%%
#################################################################
# File: myDB.pl                      Date: 7/29/15
#################################################################
use DaDB; 

print "\nDemo program myDb.pl using lib/includes/DaDB.pm, shows DBI.pm calls to sql.\n"; 

my $sqlout = DaDB::runSql("%%SQL_USER%%", "%%SQL_PASS%%", "%%SID%%", "select * from dual", "xml");
print "\n#### DaDB::runsql() - output: ####:\n";
print "sql output:\n",$sqlout;     

print "\nEnd of program myDb.pl.\n"; 

    ]]></command_args>    
  </command>      
    
   <command>
    <command_menu>os_115</command_menu>
    <command_title>Running perl as an API from another DA command such os OS or Perl</command_title>  
    <command_descr><![CDATA[Example usage: 
    
     java oracle.sysman.da.cli.DaSystemCli  -exec_da menu_file=menus\qa_menus.xml -s command=os_115 < INPUT.txt
     where INPUT.txt has STEVE= and HIRAN=values... to stream in... for windows
     
    ]]></command_descr>
    <category_id>collect.os</category_id>
    <command_type>OS</command_type>          
    <command_args><![CDATA[#!perl
#################################################################
# File: exec_da.pl                      Date: 7/29/15
# Demo the calling perl from OS commands or another Perl
#################################################################
print "Start of command: os_115, a perl being used in another command\n\n";
print "TESTING STREAMED INPUTS from DA API:\n"; 
print "    SESSION: STEVE=%%STEVE%%\n";
print "  ENV VALUE: STEVE=".$ENV{"STEVE"}."\n";
print "    SESSION: HIRAN=%%HIRAN%%\n";
print "  ENV VALUE: HIRAN=".$ENV{"HIRAN"}."\n";
# system "set";
# system "env";
print "\nEnd of program os_115 \n"; 
    ]]></command_args>
  </command>   

   <command>
    <command_menu>stream_115</command_menu>
    <command_title>Running perl as an API from another DA command such as another Perl</command_title>  
    <command_descr>Example usage: 
     DaSystemCli -exec_da "menu_file=qa_menus.xml" , "command=os_115"    
    </command_descr>
    <category_id>collect.os</category_id>
    <command_type>OS</command_type>          
    <command_args><![CDATA[#!perl
use DaPerl;
## How to run other DA Command types from perl using java
## This would include types: OS, SQL/SQLPLUS, RDA, ADR, OCM, FILE, WLS
## Below is a demo to call a simple os command: os_114 in the qa_menus.xml 
## that demonstrates how to 'stream' inputs from perl to the DA command
## and return the output. Look for the value of HIRAN to be tokenized in the
## output of your command and then put in the output of your perl code.
my $daCmdOut =  ""; 
if ( $DaPerl::isWindows ) {
  DaPerl::log(" ... calling windows exec_da command "); 
  print "\n## WINDOWS \n";   
  DaPerl::writeToFile('INPUT.txt', 'HIRAN=DEMO_IMPL_FROM_WINDOWS_PERL_STREAMED_SECURE_DATA');   
  DaPerl::appendToFile('INPUT.txt', 'STEVE=STEVE_IMPL_FROM_WINDOWS_PERL_STREAMED_SECURE_DATA');
  print "\n## DA_OUTPUT is: $DaPerl::daOutput \n";   
  my $daImplCmd = "java -DDA_OUTPUT=$DaPerl::daOutput oracle.sysman.da.cli.DaSystemCli  -exec_da -s menu_file=menus/qa_menus.xml command=os_115 < INPUT.txt"; 
  $daCmdOut =  DaPerl::run($daImplCmd);
  print "\n\n####################### OUTPUT FROM exec_da: ".$daCmdOut,"\n#######################\n";
} else { 
  DaPerl::log(" ... calling Unix exec_da command "); 
  print "\n## UNIX \n";
  my $daImplCmd = "java -DDA_OUTPUT=$DaPerl::daOutput oracle.sysman.da.cli.DaSystemCli -exec_da -s menu_file=menus/qa_menus.xml command=os_115 << Zen\n"."HIRAN=DEMO_IMPL_FROM_UNIX_PERL_STREAMED_SECURE_DATA\n"."STEVE=STEVE_IMPL_FROM_WINDOWS_PERL_STREAMED_SECURE_DATA\n"."\nZen\n"; 
  print "Running: ",$daImplCmd,"\n";
  $daCmdOut =  DaPerl::run($daImplCmd); 
  print "\n\n####################### OUTPUT FROM exec_da: ".$daCmdOut,"\n#######################\n";
}    ]]></command_args>   
  </command> 
  
 <command>
    <command_menu>stream_116</command_menu>
    <command_title>Running perl as an API from another DA command Unix Shell</command_title>  
    <command_descr>Example usage: 
     DaSystemCli -exec_da "menu_file=qa_menus.xml" , "command=os_115"    
    </command_descr>
    <category_id>collect.os</category_id>
    <command_type>OS</command_type>          
    <command_args><![CDATA[
    echo "Top of stream_116"
java -DDA_OUTPUT=$DA_OUTPUT oracle.sysman.da.cli.DaSystemCli -exec_da -s menu_file=menus/qa_menus.xml command=os_115 <<Zen
HIRAN=HAPPY
STEVE=OLD
    
Zen
    echo "End of stream_116"
    ]]></command_args>    
    <command_args_windows><![CDATA[
    @echo off
    echo "Top of stream_116"
    echo HIRAN=HAPPY > INPUT.txt    
    echo STEVE=OLD >> INPUT.txt    
    java -DDA_OUTPUT=%DA_OUTPUT% oracle.sysman.da.cli.DaSystemCli -exec_da -s menu_file=qa_menus.xml command=os_115 < INPUT.txt
    echo "End of stream_116"
    ]]></command_args_windows>    
    
  </command> 


   <command>
    <command_menu>stream_117</command_menu>
    <command_title>Running perl as an API stream_117 using DaPerl.pm multiple DA commands</command_title>  
    <command_descr>Example usage: 
    PERL: 
     DaPerl::runDaCommand("menus/qa_menus.xml", "707", '', @streamInputs );  
    CALLS: 
     DaSystemCli -exec_da "menu_file=qa_menus.xml" , "command=707"    
     
     This can be setup to run multiple DA commands as is done in this
     example running both qa_menus.xml 707 and then 4.
     
    </command_descr>
    <category_id>collect.os</category_id>
    <command_type>OS</command_type>              
    <command_prompt1>JDBC_INFO|Enter jdbc details machine:port:sid|localhost:1521:%%ORACLE_SID%%</command_prompt1>
    <command_prompt2>SQL_PASS|Please enter sql password|</command_prompt2>    
    <command_args><![CDATA[#!perl
use DaPerl;
my $daCmdOut =  "";
my @streamInputs = ( "NO=DATA" );

print "\n##########################################################################\n";
print "TOP stream_117 Examples\n";
print " - Details: EXAMPLE CALLS TWO DIF. DA IMPL APIS FROM PERL\n";
print "##########################################################################\n";

print "SQL Impl using SQL JDBC:\n";
# @streamInputs = ("JDBC=system:127.0.0.1:1521:ORCL","SQL_PASS=manager","SQL_OUTPUT=xml");
@streamInputs = ("JDBC=system:%%JDBC_INFO%%","SQL_PASS=%%SQL_PASS%%","SQL_OUTPUT=xml");
$daCmdOut =  DaPerl::runDaCommand("menus/qa_menus.xml", "707", '', @streamInputs );    
print "\n\n######## OUTPUT FROM SQL IMPL exec_da: ".$daCmdOut,"\n########\n";

# TMPE
print "OS Impl using Platform specific OS commands to list ORACLE_HOME.\n";
@streamInputs = ( "NO=DATA", "FUN=YES" );
$daCmdOut =  DaPerl::runDaCommand("menus/qa_menus.xml", "4", '', @streamInputs );    
print "\n\n######## OUTPUT FROM OS IMPL exec_da: ".$daCmdOut,"\n########\n";

print "##########################################################################\n";
print "END stream_117\n";
print "##########################################################################\n";

]]></command_args>   
  </command> 
  
   <command>
    <command_menu>stream_118</command_menu>
    <command_title>Running perl as an API stream_117 using DaPerl.pm DA to run RDA.</command_title>  
    <command_descr>Example usage: 
     DaSystemCli -exec_da "menu_file=qa_menus.xml" , "command=os_115"    
    </command_descr>
    <category_id>collect.os</category_id>
    <command_type>OS</command_type>              
    <command_prompt1 type="string" validation_match = "" required="true">RUNTIME_ORACLE_HOME|ORACLE_HOME path|%%ORACLE_HOME%%</command_prompt1>
    <command_prompt2 type="string" validation_match = "" required="true">RUNTIME_HOST|Host|%%HOSTNAME%%</command_prompt2>
    <command_prompt3 type="string" validation_match = "" required="true">RUNTIME_PORT|Port|%%SQL_PORT%%</command_prompt3>
    <command_prompt4 type="string" validation_match = "" required="true">RUNTIME_SID|Oracle Database Service Name (SID)|%%ORACLE_SID%%</command_prompt4>
    <command_prompt5 type="string" validation_match = "" required="true">SAVE_REPEAT.ORACLE_DATABASE.DBUSERNAME|DBA user|</command_prompt5>
    <command_prompt6 type="password" validation_match = "" required="true">REPEAT_WALLET.ORACLE_DATABASE.DBPASSWORD|Password|</command_prompt6>    
    <command_args><![CDATA[#!perl
use DaPerl;
my $daCmdOut =  "";
my @streamInputs = ( "NO=DATA" );

print "\n##########################################################################\n";
print "TOP stream_118 Examples\n";
print " - Details: EXAMPLE CALLS RDA DA IMPL FROM PERL\n";
print "##########################################################################\n";

# TMPE
print "OS Impl using Platform specific OS commands to list ORACLE_HOME.\n";
@streamInputs = ( "NO=DATA", "FUN=YES" );
$daCmdOut =  DaPerl::runDaCommand("menus/qa_menus.xml", "4", "", @streamInputs );    
print "\n\n######## OUTPUT FROM OS IMPL exec_da: ".$daCmdOut,"\n########\n";

print "RDA Impl using rda_DB_DBA command: \n";
@streamInputs = ( "RUNTIME_ORACLE_HOME=%%RUNTIME_ORACLE_HOME%%", "RUNTIME_HOST=%%RUNTIME_HOST%%", "RUNTIME_PORT=%%RUNTIME_PORT%%", "RUNTIME_SID=%%RUNTIME_SID%%", "SAVE_REPEAT.ORACLE_DATABASE.DBUSERNAME=%%SAVE_REPEAT.ORACLE_DATABASE.DBUSERNAME%%", "REPEAT_WALLET.ORACLE_DATABASE.DBPASSWORD=%%REPEAT_WALLET.ORACLE_DATABASE.DBPASSWORD%%" );
$daCmdOut =  DaPerl::runDaCommand("menus/oracle_database.xml", "rda_DB_DBA", "", @streamInputs );    
print "\n\n######## OUTPUT FROM RDA IMPL exec_da: ".$daCmdOut,"\n########\n";

print "##########################################################################\n";
print "END stream_118\n";
print "##########################################################################\n";

]]></command_args>   
  </command>   
  
   <command>
    <command_menu>stream_new</command_menu>
    <command_title>Simple Streaming Test using perl API in command stream_new with DaPerl.pm to DA</command_title>  
    <command_descr>Example usage: 
     DaSystemCli -exec_da "menu_file=qa_menus.xml" , "command=os_115"    
    </command_descr>
    <category_id>collect.os</category_id>
    <command_type>OS</command_type>              
    <command_prompt1 type="string" validation_match = "" required="true">HIRAN|Enter Happy or Sad|Happy</command_prompt1>
    <command_prompt2 type="string" validation_match = "" required="true">STEVE|Enter Happy or Sad|Sad</command_prompt2>
    <command_args><![CDATA[#!perl
use DaPerl;
my $daCmdOut =  "";
# print "OS Impl using Platform specific OS commands stream Happy or Sad values.\n";
my @streamInputs = ( "HIRAN=%%HIRAN%%", "STEVE=%%STEVE%%" );
# print "optionally passing -z\n";
# $daCmdOut =  DaPerl::runDaCommand('menus/qa_menus.xml', 'os_115', '-z', @streamInputs );    
$daCmdOut =  DaPerl::runDaCommand('menus/qa_menus.xml', 'os_115', '', @streamInputs );    
print "$daCmdOut";
]]></command_args>   
  </command>   
  
   <command>
    <command_menu>run_diaglet_script</command_menu>
    <command_title>Show how to run RDA Diaglet language from Perl using DaPerl.pm</command_title>  
    <command_descr>Example usage:      
    </command_descr>
    <category_id>collect.os</category_id>
    <command_type>OS</command_type>              
    <command_prompt1 type="string" validation_match = "" required="true">DIAGLET_NAME|Enter name of Diaglet|myDiaglet</command_prompt1>
    <command_prompt2 type="string" validation_match = "" required="true">DIAGLET_TITLE|Enter Description|My Demo RDA Diaglet</command_prompt2>
    <command_args><![CDATA[#!perl
use DaPerl;
my $daDiagletOut =  "";

# Need to convert \ path to / in case its windows 
# $RDA_HOME =~ s#\\#/#g;
my $RDA_HOME = DaPerl::fixWindowsPath($ENV{"RDA_HOME"}); 
my $oracleHome = DaPerl::fixWindowsPath($ENV{"ORACLE_HOME"}); 
# print "ORACLE_HOME=$oracleHome\n"; 

my $rda_script_lang_text = <<SCRIPT_EOF; 
if or(isUnix())
{report etc_passwd
 write '---+ /etc/passwd'
 call writeFile('/etc/passwd')
 write '---+ ls -l /etc'
 call writeCommand('ls -l /etc')
}
if or(isWindows(),isCygwin())
{report rda_cmd
 write '---+ rda.cmd'
 call writeFile('$RDA_HOME/rda.cmd') 
 report rda_sh
 write '---+ rda.sh'
 call writeFile('$RDA_HOME/rda.sh') 
}
SCRIPT_EOF

my $title = "%%DIAGLET_TITLE%%"; 
my $diaglet_name = "%%DIAGLET_NAME%%"; 
$daDiagletOut = DaPerl::runDiagletScript($diaglet_name, $title, $rda_script_lang_text ); 

print "\n\nRan Diaglet run_diaglet: $diaglet_name, Title: $title\n",$daDiagletOut; 

]]></command_args>   
  </command>   

 
   <command>
    <command_menu>run_diaglet</command_menu>
    <command_title>Show how to run RDA Diaglet language from Perl using DaPerl.pm</command_title>  
    <command_descr>Example usage:      
    </command_descr>
    <category_id>collect.os</category_id>
    <command_type>OS</command_type>              
    <command_prompt1 type="string" validation_match = "" required="true">DIAGLET_NAME|Enter name of Diaglet|myDiaglet</command_prompt1>
    <command_prompt2 type="string" validation_match = "" required="true">DIAGLET_TITLE|Enter Description|My Demo RDA Diaglet</command_prompt2>
    <command_args><![CDATA[#!perl
use DaPerl;

my $title = "%%DIAGLET_TITLE%%"; 
my $diagletName = "%%DIAGLET_NAME%%";    
my $daDiagletOut =  "";
# Need to convert \ path to / in case its windows 
my $daOutput = DaPerl::fixWindowsPath($ENV{"DA_OUTPUT"}); 
my $RDA_HOME = DaPerl::fixWindowsPath($ENV{"RDA_HOME"}); 
my $oracleHome = DaPerl::fixWindowsPath($ENV{"ORACLE_HOME"}); 
print "ORACLE_HOME=$oracleHome\n"; 

my $CDATA_START = "<![CDATA"."["; 
my $CDATA_END = "]]".">"; 

my $rda_diaglet_text = <<SCRIPT_EOF; 
<sdp_diaglet title="SRDC $diagletName errors" type="S">
<sdp_meta id="\$Id\$" type="version"/>
<sdp_meta author="MSC" change="Initial version." date="20150830" type="history"/>

<sdp_meta type="copyright">
 Copyright (c) 2002, @YR@, Oracle and/or its affiliates. All rights reserved.
</sdp_meta>

<sdp_meta type="trademark">
 Oracle and Java are registered trademarks of Oracle and/or its
 affiliates. Other names may be trademarks of their respective owners.
</sdp_meta>

<sdp_content title="Data Collection Setup" type="eval">
<sdp_exec command="PROFILE.DEFINE">$CDATA_START
[$diagletName]
*=OS:DCinst-opatch_detail
@=OH
LVL/RDA:DCconfig/W_LIMIT=0
OS.INST.B_OPATCH=1
PRF/DB.DB.B_LOCAL=1
PRF/DB.DB.B_SYSDBA=1
PRF/DB.LOG.B_TESTS=0
PRF/RDA.CONFIG.W_LIMIT=e
DB.LOG.B_ALERT_TEXT=1
DB.LOG.N_TRACE_BDUMP=100
DB.LOG.R_TRACE_BVOLUME=102400
DB.LOG.R_TRACE_UVOLUME=102400
DB.LOG.T_PBK_FILTER="ORA[\0x5C-\0x5Cs]*4030\0x5Cb"
OS.INST.B_OPATCH=0
$CDATA_END</sdp_exec>

<sdp_exec command="RDA.SETUP">
  <sdp_attribute name="display" type="value">0</sdp_attribute>
  <sdp_attribute name="profiles" type="value">$diagletName</sdp_attribute>
</sdp_exec>

<sdp_exec command="RDA.COLLECT">
  <sdp_attribute name="profiles" type="value">$diagletName</sdp_attribute>
</sdp_exec>

<sdp_exec command="SDCL.RUN">$CDATA_START
call setAbbr('SRDC_ORA4030_')
if or(isUnix())
{report etc_passwd
 write '---+ /etc/passwd'
 call writeFile('/etc/passwd')
 write '---+ ls -l /etc'
 call writeCommand('ls -l /etc')
}
if or(isWindows(),isCygwin())
{report rda_cmd
 write '---+ rda.cmd'
 call writeFile('$RDA_HOME/rda.cmd') 
 report rda_sh
 write '---+ rda.sh'
 call writeFile('$RDA_HOME/rda.sh') 
}
$CDATA_END</sdp_exec>

<sdp_exec command="CONVERT.GEN_XML"/>
<sdp_exec command="RENDER.GEN_HTML"/>
<sdp_exec command="CONVERT.GEN_BUNDLE" name="end" output="\[collect\]SRDC_BUNDLE_end.xml">
  <sdp_attribute name="bundle" type="list">$CDATA_START*=RDA.END/-files$CDATA_END</sdp_attribute>
</sdp_exec>
<sdp_exec command="PACKAGE.RESULTS" display="0"/>

</sdp_content>
</sdp_diaglet>

SCRIPT_EOF
 
    DaPerl::log(" ... calling rda.sh -ns$diagletName -XDiaglet with title $title.");     
    my $runDirectory = $daOutput . "/rda/".$diagletName; 
    mkdir $runDirectory; 
    chdir $runDirectory; 
    print "WRITE FILE TO: $runDirectory as $diagletName xml \n"; 
    # print "XML: $rda_diaglet_text \n"; 
    DaPerl::writeToFile($diagletName.".xml",$rda_diaglet_text);          
    if ( $DaPerl::isWindows ) {      
      $rdaPath = $RDA_HOME."/rda.cmd"; 
    } else {      
      $rdaPath = $RDA_HOME."/rda.sh"; 
    }    
    my $rdaCmd =$rdaPath." -yns".$diagletName." -XDiaglet run $diagletName";             
    print "Running Rda: $rdaCmd\n"; 
    DaPerl::log(" ... running rdaCmd: $rdaCmd with script:\n",,$rda_diaglet_text);         
    my $diagletOutput = DaPerl::run($rdaCmd); 
    print "\n\nRan Diaglet run_diaglet: $diagletName, Title: $title\n",$diagletOutput; 
    print "DA_DIR_COLLECTED=$runDirectory\n";          
]]></command_args>   
  </command>   
 
 

 <command>
    <command_menu>stream_rda_tfa_days</command_menu>
    <command_title>Running stream_rda_tfa_days using DaPerl.pm DA using rda run_tool=-nXTfa.</command_title>  
    <command_descr>Example usage: 
     DaSystemCli -exec_da "menu_file=qa_menus.xml" , "command=os_115"    
    </command_descr>
    <category_id>collect.os</category_id>
    <command_type>OS</command_type>
    <command_prompt1 type="string" validation_match = "" required="true">days_since|Collect for x days</command_prompt1>
    <command_args><![CDATA[#!perl
use DaPerl;
my $daCmdOut =  "";

my @streamInputs = ( "days_since=%%days_since%%" );
$daCmdOut =  DaPerl::runDaCommand("menus/oracle_database.xml", "rda_TFA_days", '', @streamInputs );    
print "\n\n####################### OUTPUT FROM RDA IMPL exec_da: ".$daCmdOut,"\n#######################\n";

]]></command_args>   
  </command>   
  
 <command>
    <command_menu>stream_from_perl</command_menu>
    <command_title>Running sqlplus with DaPerl.pm stream_from_perl or streamCommand</command_title>  
    <command_descr><![CDATA[Example usage: 
    Similar to: 
    sqlplus system  <<Zen
    passWordHere
    select * from dual;
    exit        
    Zen
    OR
    Usage:
    use DaPerl;
    my @streamInputs = ( "manager", "select \* from dual;", "exit", "\n"  );
    $daCmdOut =  DaPerl::streamCommand("D:/app/oracle/product/12.1.0/dbhome_1/bin/sqlplus system", @streamInputs );       
    ]]></command_descr>
    <category_id>collect.os</category_id>
    <command_type>OS</command_type>
    <command_prompt1 type="string" validation_match = "" required="true">STREAM_PASSWORD|Enter system password</command_prompt1>
    <command_args><![CDATA[#!perl
use DaPerl;
my $daCmdOut =  "";
my @streamInputs = ( %%STREAM_PASSWORD%%, "select \* from dual;", "exit", "\n"  );
my $daOutput = DaPerl::fixWindowsPath($ENV{"DA_OUTPUT"}); 
my $oracleHome = DaPerl::fixWindowsPath($ENV{"ORACLE_HOME"}); 
my $sqlplus = $oracleHome."/bin/sqlplus -s"; 

# print "Using sqlplus=$sqlplus and streaming sql and password\n"; 

$daCmdOut =  DaPerl::streamCommand( $sqlplus." system", @streamInputs );   
print "\n\n##### Example sql streaming with DaPerl::streamCommand: select \* from dual";
print "".$daCmdOut,"\n#####\n";

]]></command_args>   
  </command>   
  
   <command>
    <command_menu>104</command_menu>
    <command_title>Testing Platform Specific OS</command_title>  
    <command_descr>Used for testing platform specific commands</command_descr>
    <category_id>collect.os</category_id>
    <command_type>OS</command_type>    
    <command_args>env</command_args>       
    <command_args_aix>echo aix; env</command_args_aix>    
    <command_args_hpux>echo hpux; env</command_args_hpux>
    <command_args_irix>echo irix; env</command_args_irix>
    <command_args_linux>echo linux; env</command_args_linux>
    <command_args_mac>echo mac; env</command_args_mac>       
    <command_args_macx>echo macx; env</command_args_macx>       
    <command_args_solaris>echo solaris; env</command_args_solaris>       
    <command_args_sunos>echo sunos; env</command_args_sunos>       
    <command_args_windows>set</command_args_windows>    
  </command>    
    <!-- TEST required properties: 
    [applicationName=rda commandMatch=run_module=exadata_assessment 
    propertyName=DA.cluster.CELLADMIN_PASSWORD propertyValue= 
    userPrompt=Enter password for 'CELLADMIN' propertyDefault= storageType=wallet]
    -->    
  <!-- OUTPUT CAN BE PUT IN USER DEFINED LOCATIONS BY USING A PROMPT:
       of:
       DA_DIR_COLLECTED
       or
       DA_FILE_COLLECTED
  --> 
   <command>
    <command_menu>demo_da_file_collect</command_menu>
    <command_title>Shell Script Demo</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_prompt1>DA_FILE_COLLECTED|Please enter desired output file path|%%DA_HOME%%\\menus\\oracle_database.xml</command_prompt1>    
    <command_args>
    #!/bin/bash
    echo "Start collection to: %%DA_FILE_COLLECTED%% "
    date;     
    echo 1
    echo 2
    echo Can handle 100s of lines or more.  
    echo DA_FILE_COLLECTED=%%DA_FILE_COLLECTED%%    
    </command_args>       
    <command_args_windows>
    @echo off
    echo "Windows: Add DA_FILE_COLLECTED da_collection.log"
    echo "Start dir collection to: %%DA_FILE_COLLECTED%% "
    echo DA_FILE_COLLECTED=%%DA_FILE_COLLECTED%%
    </command_args_windows>      
  </command>  

   <command>
    <command_menu>demo_da_file_collect2</command_menu>
    <command_title>Shell Script Demo</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_prompt1>DA_FILE_COLLECTED|Please enter desired output file path|C:\\Windows\\system.ini</command_prompt1>    
    <command_args>
    #!/bin/bash
    echo "Start collection to: %%DA_FILE_COLLECTED%% "
    date;     
    echo 1
    echo 2
    echo Can handle 100s of lines or more.  
    echo DA_FILE_COLLECTED=%%DA_FILE_COLLECTED%%    
    </command_args>       
    <command_args_windows>
    @echo off
    echo "Windows: Add DA_FILE_COLLECTED da_collection.log"
    echo "Start dir collection to: %%DA_FILE_COLLECTED%% "
    echo DA_FILE_COLLECTED=%%DA_FILE_COLLECTED%%
    </command_args_windows>      
  </command>  

   <command>
    <command_menu>demo_da_dir_collect</command_menu>
    <command_title>Da Collect Dir under DA_HOME Menus</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>
    <command_type>OS</command_type>
    <command_prompt1>DA_DIR_COLLECTED|Please enter desired output dir path|%%DA_HOME%%\\menus</command_prompt1>    
    <command_args>
    #!/bin/bash
    echo "Start dir collection to: %%DA_DIR_COLLECTED%% "
    date;     
    echo 1
    echo 2
    echo Can handle 100s of lines or more  
    echo DA_DIR_COLLECTED=%%DA_DIR_COLLECTED%%    
    </command_args>
    <command_args_windows>
    @echo off
    echo "Windows: Add DA_DIR_COLLECTED da_collection.log"
    echo "Start dir collection to: %%DA_DIR_COLLECTED%% "
    echo DA_DIR_COLLECTED=%%DA_DIR_COLLECTED%%
    </command_args_windows>      

  </command>  
    
   <command>
    <command_menu>demo_da_dir_collect2</command_menu>
    <command_title>Da Collect Dir outside DA_HOME</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>
    <command_type>OS</command_type>
    <command_prompt1>DA_DIR_COLLECTED|Please enter desired output dir path|C:\\Windows\\Boot\\Fonts</command_prompt1>    
    <command_args>
    #!/bin/bash
    echo "Start dir collection outside DA_HOME, from: %%DA_DIR_COLLECTED%%"
    date;     
    echo 1
    echo 2
    echo Can handle 100s of lines or more 
    echo DA_DIR_COLLECTED=%%DA_DIR_COLLECTED%%    
    </command_args>    
    <command_args_windows>
    @echo off
    echo "Windows: Add DA_[FILE|DIR]_COLLECTED to da_collection.log SCRIPT controlled "
    echo DA_DIR_COLLECTED=%%DA_DIR_COLLECTED%%
    </command_args_windows>          
  </command>  
  
   <command>
    <command_menu>106</command_menu>
    <command_title>Shell Script DA_FILE_COLLECTED</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>  
    <command_args>
    #!/bin/bash
    echo "Start Last lines with FILE path to add to da_collection.log SCRIPT controlled "        
    date > /tmp/date.txt
    echo DA_FILE_COLLECTED=/tmp/date.txt    
    env > /tmp/out.txt    
    zip /tmp/File1234.zip /tmp/out.txt
    echo Can handle 100 lines or more..
    echo "example directory collection by script"
    mkdir /tmp/ssandrew
    date > /tmp/ssandrew/date1.txt    
    date >> /tmp/ssandrew/date2.txt    
    date >> /tmp/ssandrew/date3.txt    
    echo "DA_DIR_COLLECTED=/tmp/ssandrew"
    echo "example file collection by script"
    echo DA_FILE_COLLECTED=/tmp/File.*.zip    
    </command_args>  
    <command_args_windows>
    @echo off
    echo "Windows: Add DA_FILE|DIR_COLLECTED to da_collection.log SCRIPT controlled "
    echo " ... adding file DA_HOME DA_FILE_COLLECTED da.properties " 
    echo DA_FILE_COLLECTED=%%DA_HOME%%\\config\\da.properties
    echo " ... adding directory DA_DIR_COLLECTED  DA_OUTPUT/config "
    echo DA_DIR_COLLECTED=%%DA_OUTPUT%%\config
    echo "end output"
    </command_args_windows>  
    
  </command>
  
   <command>
    <command_menu>107</command_menu>    
    <command_title>sundiag.sh script</command_title>
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>    
    <command_args><![CDATA[    
#!/bin/bash  
# /opt/oracle.SupportTools/sundiag.sh
# Copyright (c) 2009, 2010, Oracle and/or its affiliates. All rights reserved.

megacli_status ()
{
  CONT="a0"
  STATUS=0
  MEGACLI=/opt/MegaRAID/MegaCli/MegaCli64
  echo -n "Checking RAID status on "
  hostname
  for a in $CONT
  do
    NAME=`$MEGACLI -AdpAllInfo -$a |grep "Product Name" | cut -d: -f2`
    echo "Controller $a: $NAME"
    noonline=`$MEGACLI PDList -$a | grep Online | wc -l`
    echo "No of Physical disks online : $noonline"
    DEGRADED=`$MEGACLI -AdpAllInfo -a0  |grep "Degrade"`
    echo $DEGRADED
    NUM_DEGRADED=`echo $DEGRADED |cut -d" " -f3`
    [ "$NUM_DEGRADED" -ne 0 ] && STATUS=1
    FAILED=`$MEGACLI -AdpAllInfo -a0  |grep "Failed Disks"`
    echo $FAILED
    NUM_FAILED=`echo $FAILED |cut -d" " -f4`
    [ "$NUM_FAILED" -ne 0 ] && STATUS=1
  done
  return $STATUS
}

datestamp="`date +%Y_%m_%d_%H_%M`"
mkdir -p /tmp/sundiag_$datestamp
cd /tmp/sundiag_$datestamp

cp /var/log/messages* .

/bin/dmesg > `hostname -a`_dmesg_$datestamp.out

/opt/oracle.cellos/imageinfo -all > `hostname -a`_imageinfo-all_$datestamp.out

/sbin/lspci > `hostname -a`_lspci_$datestamp.out

/sbin/lspci -xxxx > `hostname -a`_lspci-xxxx_$datestamp.out

/usr/bin/lsscsi > `hostname -a`_lsscsi_$datestamp.out

/sbin/fdisk -l > `hostname -a`_fdisk-l_$datestamp.out

/usr/bin/ipmitool sel elist > `hostname -a`_sel-list_$datestamp.out

/opt/MegaRAID/MegaCli/MegaCli64 -AdpAllInfo -aALL > `hostname -a`_megacli64-AdpA
llInfo_$datestamp.out

/opt/MegaRAID/MegaCli/MegaCli64 -PDList -aALL | awk '/Slot Number/ { counter +=
1; slot[counter] = $3 } /Device Id/ { device[counter] = $3 } /Firmware state/ {
state_drive[counter] = $3 } /Inquiry/ { name_drive[counter] = $3 " " $4 " " $5 "
 " $6 } END { for (i=1; i<=counter; i+=1) printf ( "Slot %02d Device %02d (%s) s
tatus is: %s \n", slot[i], device[i], name_drive[i], state_drive[i]); }' > `host
name -a`_megacli64-PdList_short_$datestamp.out

/opt/MegaRAID/MegaCli/MegaCli64 -AdpEventLog -GetEvents -f ./`hostname -a`_megac
li64-GetEvents-all_$datestamp.out -aALL

/opt/MegaRAID/MegaCli/MegaCli64 -fwtermlog -dsply -aALL > `hostname -a`_megacli6
4-FwTermLog_$datestamp.out

/opt/MegaRAID/MegaCli/MegaCli64 -cfgdsply -aALL > `hostname -a`_megacli64-CfgDsp
ly_$datestamp.out

/opt/MegaRAID/MegaCli/MegaCli64 -adpbbucmd -aALL > `hostname -a`_megacli64-BbuCm
d_$datestamp.out

/opt/MegaRAID/MegaCli/MegaCli64 -LdPdInfo -aALL  > `hostname -a`_megacli64-LdPdI
nfo_$datestamp.out

/opt/MegaRAID/MegaCli/MegaCli64 -PDList -aALL > `hostname -a`_megacli64-PdList_l
ong_$datestamp.out

/opt/MegaRAID/MegaCli/MegaCli64 -LDInfo -LALL -aALL > `hostname -a`_megacli64-Ld
Info_$datestamp.out

if [ -f /opt/oracle.cellos/ORACLE_CELL_NODE ]; then

  cellcli -e list cell detail > `hostname -a`_cell-detail_$datestamp.out

  cellcli -e list celldisk detail > `hostname -a`_celldisk-detail_$datestamp.out

  cellcli -e list lun detail > `hostname -a`_lun-detail_$datestamp.out

  cellcli -e list physicaldisk detail  > `hostname -a`_physicaldisk-detail_$date
stamp.out

  cellcli -e list physicaldisk where status!=normal  > `hostname -a`_physicaldis
k-fail_$datestamp.out

  cellcli -e list griddisk detail  > `hostname -a`_griddisk-detail_$datestamp.ou
t

  cellcli -e list flashcache detail  > `hostname -a`_flashcache-detail_$datestam
p.out

  cellcli -e list alerthistory  > `hostname -a`_alerthistory_$datestamp.out

  sh /opt/oracle/cell/cellsrv/deploy/scripts/unix/hwadapter/diskadp/scripts_aura
.sh > `hostname -a`_scripts-aura_$datestamp.out

  perl /opt/oracle/cell/cellsrv/deploy/scripts/unix/hwadapter/diskadp/get_disk_d
evices.pl 5042 > `hostname -a`_disk_devices_$datestamp.out

  cp /opt/oracle/cell/log/diag/asm/cell/`hostname -a`/trace/alert.log .

  cp /opt/oracle/cell/log/diag/asm/cell/`hostname -a`/trace/ms-odl.trc .

  /usr/bin/flash_dom -l > `hostname -a`_fdom-l_$datestamp.out

  #get data on the list of flash disks
  flash_list=`/usr/bin/lsscsi | grep MARVELL | awk '{print $7}'`
  for dev in $flash_list; do
      echo "aurasmart for $dev" >> `hostname -a`_aurasmart_$datestamp.out
      aurasmart -D $dev -N >> `hostname -a`_aurasmart_$datestamp.out
      aurasmart -v -d $dev -N >> `hostname -a`_aurasmart_$datestamp.out
  done

fi

if [ $# -eq 1 ]; then
  case "$1" in
    osw)
      #copy the oswatcher archive
      cp -r /opt/oracle.oswatcher/osw/archive .
      ;;
    *)
      echo "Unknown option: $1. Usage: sundiag.sh [osw]"
  esac
fi

megacli_status > `hostname -a`_megacli64-status_$datestamp.out

cd /tmp
tar -pjcvf /tmp/sundiag_$datestamp.tar.bz2 sundiag_$datestamp
echo "==========================================================================
===="
echo "Done the report files are in bzip2 compressed /tmp/sundiag_$datestamp.tar.
bz2"
echo "==========================================================================
===="
/bin/rm -rf sundiag_$datestamp
exit 0 
    ]]></command_args>       
  </command>        
    <!--
    TEST user prompt required properties prompt and tokenization 
    NOTE: Must have /tmp/steve.sh or some directory in place with this
          script steve.sh to test it.
    -->   
  <command>
    <command_menu>108</command_menu>
    <command_title>steve.sh script Prompt Dir</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_args>%%DA_CUSTOM_PROG1_DIR%%/steve.sh %%DA_CUSTOM_PROG1_ARG1%%</command_args>       
 </command>    

    <!--
    Generic SSH Example    
    WORKED: 
    <command_args>SSH %%PASS%% %%USER%%@%%MACHINE%% -output_path D:\\ssh_junk.txt %%CMD%%</command_args>       
    -->    
  <command>
   <command_menu>109</command_menu>
   <command_title>Simple SSH Prompt Dir</command_title>  
           <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

   <command_type>OS</command_type>
   <command_prompt1>MACHINE|Please enter hostname|poseidon.test-domain.com</command_prompt1>    
   <command_prompt2>USER|Please enter ssh user login|oracle</command_prompt2>    
   <command_prompt3>PASS|Please ssh password for user|oracle</command_prompt3>       
   <command_prompt4>CMD|Please enter command to execute|cat /etc/hosts</command_prompt4>       
   <command_prompt5>OUT_FILE|Please enter full path to output file|/tmp/testSSH.txt</command_prompt5>       
   <command_args>SSH %%PASS%% %%USER%%@%%MACHINE%% -output_path %%OUT_FILE%% %%CMD%%
   </command_args>       
  </command>
    <!--
    Exadata example
    Will need: celladmin user and root as Exadata required users
    and passwords to be persisted in remote ssh commands.    
      a) SSHCELL_AS_ROOT /opt/oracle.SupportTools/sundiag.sh
      b) SSHCELL_AS_CELLADMIN [{MACHINE_VALUE}FIRST_NODE|ALL_NODES] cellcli list 
         MAY NEED: OUTPUT_FILE=, else just std.out to screen ?as default
    -->    
   <command>
    <command_menu>110</command_menu>    
    <command_title>OS SSHCELL AS ADMIN Command</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_prompt1>CMD|Please enter command or /opt/oracle.SupportTools/sundiag.sh|ls -l</command_prompt1>    
    <command_prompt2>CELL_NODE|Please select cell(s) FIRST_NODE, ALL_NODES, entered name/ip 192.168.10.5 |ALL_NODES</command_prompt2>    
    <command_args>SSHCELL_AS_CELLADMIN %%CELL_NODE%% %%CMD%%</command_args>       
  </command>
  
   <command>
    <command_menu>111</command_menu> 
    <command_title>OS SSHCELL AS ROOT Command</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_prompt1>CMD|Please enter command|uname -a</command_prompt1>    
    <command_prompt2>CELL_NODE|Please select cell(s) FIRST_NODE, ALL_NODES, entered name/ip|ALL_NODES</command_prompt2>    
    <command_args>SSHCELL_AS_ROOT %%CELL_NODE%% %%CMD%%</command_args>       
  </command>  
  
   <command>
    <command_menu>112</command_menu> 
    <command_title>New SERVERS LIST Command</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_prompt1>SERVER_LIST|Please enter your saved Server List name|steves_server_list</command_prompt1>        
    <command_prompt2>PREREQ_SERVERS|Please select servers from your server list|PREREQ_SERVERS:all</command_prompt2>    
    <command_args>SSH_SERVERS list_name=%%SERVER_LIST%% server_list=%%PREREQ_SERVERS%% output_path=/tmp/ssh_output.txt
#!/bin/sh
# echo "PREREQ_SERVERS=%%PREREQ_SERVERS%%" 
MACHINE=`uname -n`
echo "###################################################"
echo "# Running shell script from uname=$MACHINE"
echo "# RUN FROM DIRECTORY: `pwd`"
echo "# TIME RAN: `date`"
echo "###################################################"
echo 
echo "Files listing in CWD: ls -l | tail -10"
echo "###################################################"
ls -l | tail -10
echo 
echo "ls -lrt /tmp | tail -10"
echo "###################################################"
ls -lrt /tmp | tail -10
    </command_args>       
  </command>  

  <command>
    <command_menu>PREREQ_SERVERS</command_menu>
    <command_title>Internal Only LOV: Pick ADR Home</command_title>
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>System</command_type>
    <command_args>servers_lov list_name=%%SERVER_LIST%%</command_args>
  </command>

  <command>
    <command_menu>113</command_menu> 
    <command_title>OS SSHCELL AS ROOT Command</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_prompt1>CMD|Please enter command|uname -a</command_prompt1>    
    <command_prompt2>SERVER_LIST|Please enter your saved Server List name|steves_server_list</command_prompt2>    
    <command_args>SSH_SERVERS list_name=%%SERVER_LIST%% NODE_CHOICE output_path=/tmp/ssh_output.txt
#!/bin/sh
%%CMD%%
</command_args>       
  </command>  
  
  
<!-- 
         Menu demo_menu - RDA 1XX, ADR 2XX, OCM 3XX, System 5XX Commands
         +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  -->
  <!-- ALL the RDA commands 1XX SERIES --> 
  <command>
    <command_menu>rda_100</command_menu>
    <command_title>RDA run OS,NET modues</command_title>    
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <category_id>collect.rda</category_id>
    <command_type>Rda</command_type>
    <command_args>run_module=OS,NET</command_args>       
  </command>
  <command>
    <command_menu>rda_101</command_menu>
    <command_title>RDA Help</command_title>    
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <category_id>collect.rda</category_id>
    <command_type>Rda</command_type>
    <command_args>help</command_args>       
  </command>  
  <command>
    <command_menu>rda_102</command_menu>
    <command_title>RDA Version</command_title>    
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <category_id>collect.rda</category_id>
    <command_type>Rda</command_type>
    <command_args>version</command_args>       
  </command>  
  <!-- runAppliction(opt) opt: get_profile_list, get_module_list, or get_tool_list -->
  <command>
    <command_menu>rda_103</command_menu>
    <command_title>RDA Show Profiles</command_title>    
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <category_id>collect.rda</category_id>
    <command_type>Rda</command_type>
    <command_args>get_profile_list</command_args>       
  </command>     
   <command>
    <command_menu>rda_104</command_menu>
    <command_title>RDA Collection Summary</command_title>    
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <category_id>collect.rda</category_id>
    <command_type>Rda</command_type>
    <command_args>summary</command_args>   
 </command> 
   <command>
    <command_menu>rda_105</command_menu>
     <command_title>RDA Detailed Collection Summary</command_title>  
             <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

        String summary = "Command Summary"; 
        String details =  "Command Detail";
        String inputs = "Input Requirements"; 
        String outputs = "Output Details"; 
        

          Output Details
            o 
          ]]></command_descr>

     <category_id>collect.rda</category_id>
    <command_type>Rda</command_type>
    <command_args>summary detail</command_args>       
  </command>
 
  <!-- Requires a password SYSTEM_PASSWORD -->
   <command>
    <command_menu>rda_106</command_menu>
     <command_title>Run Collect</command_title>  
             <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

     <category_id>collect.rda</category_id>
    <command_type>Rda</command_type>
    <command_args>collect</command_args>       
  </command>    


<!-- //  rda|run_profile=DB11g|||DA.oracle_database.system@oracle@SID||
     Enter the Oracle database SYSTEM_PASSWORD. If a password is not provided~CR~     
     the SYSDBA account will be used||wallet|12.0.0.0
-->
 <command>
    <command_menu>rda_999</command_menu>
     <category_id>other,install.db</category_id>
     <command_title>Run Collect</command_title>  
             <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Rda</command_type>
    <command_args>run_profile=DB11g</command_args>       
    <command_prompt1 type="string" validation_match="^XYZ" required="false">PREREQ_sql_type|Enter SQL query type|PREREQ_sql_type:all</command_prompt1>
    <command_prompt2 type="string" validation_match="" required="false">sql|Please enter the %%PREREQ_sql_type%% |</command_prompt2>
  </command>    
 


  
  <!-- ALL the ADR commands 2XX SERIES --> 
  <command>
    <command_menu>adr_HOMES</command_menu>
    <command_title>Home Directories</command_title>
    <command_descr><![CDATA[
  Command Summary
    Shows the available ADR homes in the current ADR base  
      
  Input Requirements
    o Select the desired ADR home, if prompted
    
  Output Details
    o All ADR homes in the current ADR base will display
    o Example:
      ADR base = "/u01/app/oracle/product/11.2.0.1.0"
      ADR Homes:
        diag/rdbms/v1121/V1121
        diag/rdbms/v1123/V1123
        diag/tnslsnr/dtplnx08/listener
        diag/tnslsnr/coesrv23/listener
        diag/clients/user_oracle/host_2323999488_76]]></command_descr>
    <command_type>Adr</command_type>
    <command_args><![CDATA[show_home]]></command_args>
  </command>
<command>
<command_menu>adr_HELP</command_menu>
<command_title>Tool Help</command_title>
<command_descr><![CDATA[
  Command Summary
    This option invokes the ADRCI help utility and give a list of available
    ADR topics.
      
  Input Requirements
    o None
    
  Output Details
    o List of available topics]]></command_descr>
<command_type>Adr</command_type>
<command_args><![CDATA[help]]></command_args>
</command>
<command>
<command_menu>adr_VERSION</command_menu>
<command_title>Tool Version</command_title>
<command_descr><![CDATA[
  Command Summary
    The version of ADR installed in the current environment will be retrieved.
    This information will be helpful when having issues with DA ADR menus
    and a service request is needed.
      
  Input Requirements
    o None
    
  Output Details
    o Version of ADR installed in the current environment]]></command_descr>
<command_type>Adr</command_type>
<command_args><![CDATA[version]]></command_args>
</command>

 <command>
    <command_menu>adr_CUSTOM</command_menu>
    <command_title>Custom Command</command_title>
    <command_descr><![CDATA[
  Command Summary
    Use this command to allow the user to execute their own ADR command
    within the Diagnostic Assistant.
      
  Input Requirements
    o Select the desired ADR base
    o Select the desired ADR home
    
  Output Details
    o Results will vary based on the command entered]]></command_descr>
    <command_type>Adr</command_type>
    <command_prompt1 type="multichoice" validation_match = "" required="false">PREREQ_ADR_BASE|Enter an ADR Base|PREREQ_ADR_BASE:name</command_prompt1>
    <command_prompt2 type="multichoice" validation_match = "" required="false">PREREQ_ADR_BASE_HOMES|Enter an ADR Home for Base %%PREREQ_ADR_BASE%%|PREREQ_ADR_BASE_HOMES:name</command_prompt2>
    <command_prompt3 type="string" validation_match = "" required="false">CUSTCMD|Enter your custom adrci command|SHOW HOMES</command_prompt3>
    <command_args><![CDATA[custom adrBase=%%PREREQ_ADR_BASE%% adrHome=%%PREREQ_ADR_BASE_HOMES%% %%CUSTCMD%%]]></command_args>
  </command>

  <command>
    <command_menu>adr_INC_SUMM</command_menu>
    <command_title>Summary of Incidents</command_title>
    <command_descr><![CDATA[
  Command Summary
    This command retrieves the latest configuration summary data and provides
    immediate viewing of this data.

  Input Requirements
    o Select the desired ADR base
    o Select the desired ADR home
    
  Output Details
    o Example: sample below has 0 incidents so is not truly reflective
               of a production environment
              
                           ADR Summary
          =================================================
        ORACLE_HOME:  /u01/app/oracle/product/11.2.0.1.0
             ADR Base:  /u01/app/oracle
             ADR Home:  diag/rdbms/v1121/V1121
        ORACLE_SID:  V1121
          =================================================
          =================================================
          Displaying the 5 Most recent ADR incidents
          =================================================
          Incident ID: 0
          Created: <NULL>
          Error: <NULL>-0]]></command_descr>
    <command_type>Adr</command_type>
    <command_prompt1 type="multichoice" validation_match = "" required="false">PREREQ_ADR_BASE|Enter an ADR Base|PREREQ_ADR_BASE:name</command_prompt1>
    <command_prompt2 type="multichoice" validation_match = "" required="false">PREREQ_ADR_BASE_HOMES|Enter an ADR Home for Base %%PREREQ_ADR_BASE%%|PREREQ_ADR_BASE_HOMES:name</command_prompt2>
    <command_args><![CDATA[summary adrBase=%%PREREQ_ADR_BASE%% adrHome=%%PREREQ_ADR_BASE_HOMES%%]]></command_args>
  </command>

  <command>
    <command_menu>adr_INC_DTL</command_menu>
    <command_title>Incidents Detail</command_title>
    <command_descr><![CDATA[
  Command Summary
    This command retrieves the latest configuration summary detail and provides
    immediate viewing of this data.
    NOTE: Limited summary details are currently available
          More details will be added in coming releases    
      
  Input Requirements
    o Select the desired ADR base
    o Select the desired ADR home
    
  Output Details
    o Example:
                          Summary Detail
          =================================================
        ORACLE_HOME:  /u01/app/oracle/product/11.2.0.1.0
             ADR Base:  /u01/app/oracle
             ADR Home:  diag/rdbms/v1121/V1121
        ORACLE_SID:  V1121
          =================================================
          =================================================
          Displaying the 5 Most recent ADR incidents
          =================================================

                        Additional Details
          =================================================
          Displaying the last 500 lines of
          /u01/app/oracle/diag/rdbms/v1121/V1121/trace/V1121_ora_6782.trc
          -------------------------------------------------
          _bloom_predicate_enabled            = true
          _optimizer_enable_extended_stats    = true
          _is_lock_table_for_ddl_wait_lock    = 0
          _pivot_implementation_method        = choose
        optimizer_capture_sql_plan_baselines = false
        optimizer_use_sql_plan_baselines    = true
          _optimizer_star_trans_min_cost      = 0
          ...]]></command_descr>
    <command_type>Adr</command_type>
    <command_prompt1 type="multichoice" validation_match = "" required="false">PREREQ_ADR_BASE|Enter an ADR Base|PREREQ_ADR_BASE:name</command_prompt1>
    <command_prompt2 type="multichoice" validation_match = "" required="false">PREREQ_ADR_BASE_HOMES|Enter an ADR Home for Base %%PREREQ_ADR_BASE%%|PREREQ_ADR_BASE_HOMES:name</command_prompt2>
    <command_args><![CDATA[summary adrBase=%%PREREQ_ADR_BASE%% adrHome=%%PREREQ_ADR_BASE_HOMES%% detail]]></command_args>
  </command>

  <command>
    <command_menu>adr_DEF_COLL</command_menu>
    <command_title>Default Collection</command_title>
    <command_descr><![CDATA[
  Command Summary
    The default collector for ADR will execute.  
      
  Input Requirements
    o Select the desired ADR base
    o Select the desired ADR home
    
  Output Details
    o Key ADR elements will be included in the default collection output]]></command_descr>
    <command_type>Adr</command_type>
    <command_prompt1 type="multichoice" validation_match = "" required="false">PREREQ_ADR_BASE|Enter an ADR Base|PREREQ_ADR_BASE:name</command_prompt1>
    <command_prompt2 type="multichoice" validation_match = "" required="false">PREREQ_ADR_BASE_HOMES|Enter an ADR Home for Base %%PREREQ_ADR_BASE%%|PREREQ_ADR_BASE_HOMES:name</command_prompt2>
    <command_args><![CDATA[collect adrBase=%%PREREQ_ADR_BASE%% adrHome=%%PREREQ_ADR_BASE_HOMES%%]]></command_args>
  </command>
  
<!--
    Simple ADR REMOTE CHECK: 
--> 
  <command>
    <command_menu>adr_REMOTE</command_menu>
    <command_title>Default Collection</command_title>
    <command_descr><![CDATA[
  Command Summary
    The default collector for ADR will execute.  
      
  Input Requirements
    o Select the desired ADR home, if prompted
    
  Output Details
    o Key ADR elements will be included in the default collection output]]></command_descr>
    <command_type>Adr</command_type>      
    <command_prompt1 type="string" validation_match = "" required="false">HOST|Enter an ADR remote host|dtplnx08.test-domain.com</command_prompt1>      
    <command_prompt2 type="string" validation_match = "" required="false">USER|Enter an ADR remote unix user|oracle</command_prompt2>
    <command_prompt3 type="string" validation_match = "" required="false">PASS|Enter an ADR remote user password |</command_prompt3>
    <command_prompt4 type="string" validation_match = "" required="false">REMOTE_ORACLE_HOME|Enter an ADR remote oracle_home |/u01/app/oracle/product/11.2.0.1.0</command_prompt4>
    <command_prompt5 type="string" validation_match = "" required="false">ADR_BASE|Enter an ADR remote adr_base |/u01/app/oracle</command_prompt5>
    <command_prompt6 type="string" validation_match = "" required="false">ADR_HOME|Enter an ADR remote adr_home |diag/rdbms/v1121/V1121</command_prompt6>  
    <command_prompt7 type="string" validation_match = "" required="false">ADR_COMMAND|Enter an ADR remote commands|LOV:value:Show Homes=show_homes;Show Control=show_control;Show All Incidents=show_incident_all DETAIL ALL;Show Alert Messages=show_alert_pred "message_text like '%incident%'";Show Health Check Runs=show_hmrun "SHOWALL";Show Current Base=show_base CURRENT</command_prompt7>
    <command_args><![CDATA[%%ADR_COMMAND%% user=%%USER%% pass=%%PASS%% host=%%HOST%% remote_oracle_home=%%REMOTE_ORACLE_HOME%% adr_base=%%ADR_BASE%% adr_home=%%ADR_HOME%%]]></command_args>
  </command>    
  



<!-- ALL the OCM commands 3XX SERIES -->   
  <command>
    <command_menu>ocm_300</command_menu>
    <command_title>Ocm Status</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Ocm</command_type>
    <command_args>status</command_args>       
  </command>
<command>
    <command_menu>ocm_301</command_menu>    
    <command_title>Ocm Help</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Ocm</command_type>
    <command_args>help</command_args>       
  </command>
  <command>
    <command_menu>ocm_302</command_menu>    
    <command_title>Ocm Version</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Ocm</command_type>  
    <command_args>version</command_args>       
  </command>
  <command>
    <command_menu>ocm_303</command_menu>    
    <command_title>Ocm Collect</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Ocm</command_type>
    <command_args>collect</command_args>       
  </command>
 <command>
    <command_menu>ocm_304</command_menu>
    <command_title>Ocm Collection Summary</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Ocm</command_type>
    <command_args>summary</command_args>   
</command> 
  <command>    
    <command_menu>ocm_305</command_menu>    
    <command_title>Ocm Detailed Collection Summary</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Ocm</command_type>  
    <command_args>summary detail</command_args>       
  </command>

  <command>    
    <command_menu>ocm_306</command_menu>    
    <command_title>Ocm Start/Stop/Status</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 
          
          
          
          Output Details
            o 
          ]]></command_descr>

    <command_type>Ocm</command_type>  
    <command_prompt1>LOV_CONTROL|Pick the OCM option for emCCR command|LOV:all:start;stop;status</command_prompt1>
    <command_args>%%LOV_CONTROL%%</command_args>       
  </command>


<!-- ALL the SQL commands 4XX SERIES -->   
  <command>
    <command_menu>400</command_menu>    
    <command_title>Sqlplus Version</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <category_id>core.sqlplus</category_id>
    <command_type>Sqlplus</command_type>
    <command_args>version</command_args>       
  </command>
    <command>
    <command_menu>401</command_menu>    
    <command_title>Sqlplus Help</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <category_id>core.sqlplus</category_id>
    <command_type>Sqlplus</command_type>
    <command_args>help</command_args>       
  </command>
  <command>
    <command_menu>402</command_menu>
    <command_title>Sqlplus Select Examples</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <category_id>core.sqlplus</category_id>
    <command_type>Sqlplus</command_type>
    <command_args>connect / as sysdba
    REM DEMO SQL SCRIPT
    prompt Show DUAL Table
    select * from dual;  
    set pagesize 1000
    prompt Show User Objects
    select * from user_objects where object_name like 'USER%';    
    </command_args>       
  </command>
  
  <command>
    <command_menu>403</command_menu>    
    <command_title>Sqlplus Select Prompt Login</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <category_id>core.sqlplus</category_id>
    <command_type>Sqlplus</command_type>
    <command_prompt1>SQL_USER|Please enter user to connect as|scott</command_prompt1>        
    <command_prompt2>SQL_PASS|Please enter sql password|tiger</command_prompt2>    
    <command_args>connect %%SQL_USER%%/%%SQL_PASS%%    
    REM DEMO SQL SCRIPT
    prompt Show DUAL Table
    select user from dual;  
    set pagesize 1000
    prompt Show User Objects
    select * from user_objects where object_name like 'EM%';    
   </command_args>       
  </command>
  

  
  <command>
    <command_menu>404</command_menu>
    <command_title>Sqlplus Using DA_REQUIRED_PASSWORD</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <category_id>core.sqlplus</category_id>
    <command_type>Sqlplus</command_type>    
    <command_args>connect scott/DA_REQUIRED_PASSWORD
    REM DEMO SQL SCRIPT
    prompt Show DUAL Table
    select user from dual;  
    set pagesize 1000
    prompt Show User Objects
    select * from user_objects where object_name like 'EM%';    
   </command_args>       
  </command>
<command>
    <command_menu>405</command_menu>
    <command_title>Sqlplus Upgrade Check</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <category_id>core.sqlplus</category_id>
    <command_type>Sqlplus</command_type>    
    <command_args><![CDATA[connect / as sysdba
rem 
rem Script to Collect DB Upgrade/Migrate Diagnostic Information
rem (dbupgdiag.sql) [NOTE ID: 556610.1]
rem 
alter session set nls_language='American';
col TODAY	NEW_VALUE	_DATE	
col VERSION NEW_VALUE _VERSION
set termout off
select to_char(SYSDATE,'fmMonth DD, YYYY') TODAY from DUAL;
select version from v$instance;
set termout on
set echo off
set feedback off
set head off
set verify off
column output new_value dbname
rem SELECT value || '_' output FROM v$parameter WHERE name = 'db_name';
select sys_context('userenv','db_name') ||'_' output from dual;
set linesize 150
set pages 100
set trim on
set trims on
col Compatible for a35
col comp_id for a12
col comp_name for a40
col org_version for a11
col prv_version for a11
col owner for a12
col object_name for a40
col object_type for a40
col Wordsize for a25
col Metadata for a8
col 'Initial DB Creation Info' for a35
col 'Total Invalid JAVA objects' for a45
col 'Role' for a30
col 'User Existence' for a27
col "JAVAVM TESTING" for a15
Prompt
Prompt
set feedback off head off
select LPAD('*** Start of LogFile ***',50) from dual;
select LPAD('Oracle Database Upgrade Diagnostic Utility',44)||
       LPAD(TO_CHAR(SYSDATE, 'MM-DD-YYYY HH24:MI:SS'),26) from dual;
Prompt
Prompt ===============
Prompt Hostname
Prompt ===============
select host_name from v$instance;
Prompt
Prompt ===============
Prompt Database Name
Prompt ===============
select sys_context('userenv','db_name') from dual;
Prompt
Prompt ===============
Prompt Database Uptime
Prompt ===============
SELECT to_char(startup_time, 'HH24:MI DD-MON-YY') "Startup Time" 
FROM v$instance;
Prompt
Prompt =================
Prompt Database Wordsize
Prompt =================
SELECT distinct('This is a ' || (length(addr)*4) || '-bit database') "WordSize" 
FROM v$process;
Prompt
Prompt ================
Prompt Software Version
Prompt ================
SELECT * FROM v$version;
Prompt
Prompt =============
Prompt Compatibility
Prompt =============
SELECT 'Compatibility is set as '||value Compatible 
FROM v$parameter WHERE name ='compatible';
Prompt
Prompt ================
Prompt Archive Log Mode
Prompt ================
Prompt
archive log list
Prompt
Prompt ================
Prompt Auditing Check
Prompt ================
Prompt
set head on
show parameter audit
Prompt
Prompt ================
Prompt Cluster Check
Prompt ================
show parameter cluster_database
Prompt
DOC
################################################################

 If CLUSTER_DATABASE is set to TRUE, change it to FALSE before
 upgrading the database 

################################################################
#
Prompt
Prompt ===========================================
Prompt Tablespace and the owner of the aud$ table 
Prompt ===========================================
select owner,tablespace_name from dba_extents where segment_name='AUD$' group by owner,tablespace_name;
Prompt
Prompt ============================================================================
Prompt count of records in the sys.aud$ table where dbid is null- Standard Auditing
Prompt ============================================================================
Prompt
set head off
select count(*) as Records  from sys.aud$ where dbid is null;
Prompt
Prompt
Prompt ============================================================================================
Prompt count of records in the system.aud$ when dbid is null, Std Auditing with OLS or DV installed
Prompt ============================================================================================
set head off
select count(*) from system.aud$ where dbid is null;
Prompt
Prompt
Prompt =============================================================================
Prompt count of records in the sys.fga_log$ when dbid is null, Fine Grained Auditing
Prompt =============================================================================
set head off
select count(*) from sys.fga_log$ where dbid is null;
Prompt
Prompt
prompt
Prompt ==========================================
Prompt Oracle Label Security is installed or not 
Prompt ==========================================
set head off
SELECT case count(schema)
WHEN 0 THEN 'Oracle Label Security is NOT installed at database level'
ELSE 'Oracle Label Security is installed '
END  "Oracle Label Security Check"
FROM dba_registry
WHERE schema='LBACSYS';
Prompt
Prompt ================
Prompt Number of AQ Records in Message Queue Tables
Prompt ================
Prompt
SET SERVEROUTPUT ON SIZE 100000
declare
   V_COUNT NUMBER;
     cursor c1 is
         select owner,queue_table from dba_queue_tables where owner in ('SYS', 'SYSTEM', 'SYSMAN', 'DBSNMP','WMSYS');
 begin
    for c in c1
     loop
        execute immediate 'select count(1) from ' || c.owner || '.'  || c.queue_table into v_count;
        dbms_output.put_line(c.owner || ' - ' || c.queue_table  || ' - ' || v_count);
     end loop;
 END;
 /
Prompt
Prompt ================
Prompt Time Zone version 
Prompt ================
Prompt
SELECT version from v$timezone_file;
Prompt
Prompt ================
Prompt Local Listener
Prompt ================
Prompt
select substr(value,1,50) "Local Listener" from v$parameter where name='local_listener';
Prompt
Prompt ================
Prompt Default and Temporary Tablespaces By User
Prompt ================
Prompt
set head on
COLUMN USERNAME FORMAT A28
COLUMN TEMPORARY_TABLESPACE FORMAT A22
COLUMN DEFAULT_TABLESPACE FORMAT A22
SELECT username, temporary_tablespace,default_tablespace FROM DBA_USERS;
Prompt
Prompt
Prompt ================
Prompt Component Status
Prompt ================
Prompt
SET SERVEROUTPUT ON;
DECLARE

ORG_VERSION varchar2(12);
PRV_VERSION varchar2(12);
P_VERSION VARCHAR2(10);

BEGIN 

SELECT version INTO p_version 
FROM registry$ WHERE cid='CATPROC' ;

IF SUBSTR(p_version,1,5) = '9.2.0' THEN

DBMS_OUTPUT.PUT_LINE(RPAD('Comp ID', 8) ||RPAD('Component',35)|| 
   RPAD('Status',10) ||RPAD('Version', 15));

DBMS_OUTPUT.PUT_LINE(RPAD(' ',8,'-') ||RPAD(' ',35,'-')|| 
   RPAD(' ',10,'-') ||RPAD(' ',15,'-'));

FOR x in (SELECT SUBSTR(dr.comp_id,1,8) comp_id,
 SUBSTR(dr.comp_name,1,35) comp_name, 
 dr.status Status,SUBSTR(dr.version,1,15) version
 FROM dba_registry dr,registry$ r
 WHERE dr.comp_id=r.cid and dr.comp_name=r.cname
 ORDER BY 1)

LOOP

DBMS_OUTPUT.PUT_LINE(RPAD(SUBSTR(x.comp_id,1,8),8) || 
   RPAD(SUBSTR(x.comp_name,1,35),35)||
   RPAD(x.status,10) || RPAD(x.version, 15));
END LOOP;

ELSIF SUBSTR(p_version,1,5) != '9.2.0' THEN

DBMS_OUTPUT.PUT_LINE(RPAD('Comp ID', 8) ||RPAD('Component',35)||  
   RPAD('Status',10) ||RPAD('Version', 15)||
   RPAD('Org_Version',15)||RPAD('Prv_Version',15));

DBMS_OUTPUT.PUT_LINE(RPAD(' ',8,'-') ||RPAD(' ',35,'-')|| 
   RPAD(' ',10,'-')||RPAD(' ',15,'-')||RPAD(' ',15,'-')||
   RPAD(' ',15,'-'));

FOR y in (SELECT SUBSTR(dr.comp_id,1,8) comp_id,
 SUBSTR(dr.comp_name,1,35) comp_name, dr.status Status, 
 SUBSTR(dr.version,1,11) version,org_version,prv_version
 FROM dba_registry dr,registry$ r
 WHERE dr.comp_id=r.cid and dr.comp_name=r.cname
 ORDER BY 1)

LOOP

DBMS_OUTPUT.PUT_LINE(RPAD(substr(y.comp_id,1,8), 8) || 
    RPAD(substr(y.comp_name,1,35),35)||RPAD(y.status,10) ||
    RPAD(y.version, 15)||RPAD(y.org_version,15)||RPAD(y.prv_version,15));

END LOOP;

END IF;
END;
/
SET SERVEROUTPUT OFF
Prompt
Prompt
Prompt
Prompt ======================================================
Prompt List of Invalid Database Objects Owned by SYS / SYSTEM
Prompt ======================================================
Prompt
set head on
SELECT case count(object_name)
WHEN 0 THEN 'There are no Invalid Objects'
ELSE 'There are '||count(object_name)||' Invalid objects'
END "Number of Invalid Objects"
FROM dba_objects 
WHERE status='INVALID'
AND owner in ('SYS','SYSTEM');
Prompt
DOC 
################################################################

 If there are no Invalid objects below will result in zero rows.

################################################################
#
Prompt
set feedback on
SELECT owner,object_name,object_type 
FROM dba_objects 
WHERE status='INVALID' 
AND owner in ('SYS','SYSTEM')
ORDER BY owner,object_type;
set feedback off
Prompt
Prompt ================================
Prompt List of Invalid Database Objects
Prompt ================================
Prompt
set head on
SELECT case count(object_name)
WHEN 0 THEN 'There are no Invalid Objects'
ELSE 'There are '||count(object_name)||' Invalid objects'
END "Number of Invalid Objects"
FROM dba_objects 
WHERE status='INVALID'
AND owner  in 
('SYSMAN','CTXSYS','ORDSYS','MDSYS','EXFSYS','WKSYS','WKPROXY','WK_TEST','OLAPSYS','OUTLIN','TSMSYS',
'FLOWS_FILES','SI_INFORMATION_SCHMEA','ORACLE_OCM','ORDPLUGINS','DBSNMP');
Prompt
DOC
################################################################

 If there are no Invalid objects below will result in zero rows.

################################################################
#
Prompt
set feedback on
SELECT owner,object_name,object_type 
FROM dba_objects 
WHERE status='INVALID' 
AND owner in ('SYSMAN','CTXSYS','ORDSYS','MDSYS','EXFSYS','WKSYS','WKPROXY','WK_TEST','OLAPSYS','OUTLIN','TSMSYS',
'FLOWS_FILES','SI_INFORMATION_SCHMEA','ORACLE_OCM','ORDPLUGINS','DBSNMP')
ORDER BY owner,object_type;
set feedback off
Prompt
Prompt ======================================================
Prompt Count of Invalids by Schema
Prompt ======================================================
Prompt
select owner,object_type,count(*) from dba_objects where status='INVALID'
group by owner,object_type order by owner,object_type ;
Prompt ==============================================================
Prompt Identifying whether a database was created as 32-bit or 64-bit
Prompt ==============================================================
Prompt
DOC 
###########################################################################

 Result referencing the string 'B023' ==> Database was created as 32-bit
 Result referencing the string 'B047' ==> Database was created as 64-bit
 When String results in 'B023' and when upgrading database to 10.2.0.3.0 
 (64-bit) , For known issue refer below articles
  
 Note 412271.1 ORA-600 [22635] and ORA-600 [KOKEIIX1] Reported While 
               Upgrading Or Patching Databases To 10.2.0.3
 Note 579523.1 ORA-600 [22635], ORA-600 [KOKEIIX1], ORA-7445 [KOPESIZ] and 
              OCI-21500 [KOXSIHREAD1] Reported While Upgrading To 11.1.0.6

###########################################################################
#
Prompt
SELECT SUBSTR(metadata,109,4) "Metadata",
CASE SUBSTR(metadata,109,4)
WHEN 'B023' THEN 'Database was created as 32-bit'
WHEN 'B047' THEN 'Database was created as 64-bit'
ELSE 'Metadata not Matching'
END "Initial DB Creation Info"
FROM sys.kopm$;
Prompt
Prompt ===================================================
Prompt Number of Duplicate Objects Owned by SYS and SYSTEM
Prompt ===================================================
Prompt
Prompt Counting duplicate objects ....
Prompt
SELECT count(1) 
FROM dba_objects 
WHERE object_name||object_type in 
   (SELECT object_name||object_type  
    from dba_objects 
    where owner = 'SYS') 
and owner = 'SYSTEM'; 
Prompt
Prompt =========================================
Prompt Duplicate Objects Owned by SYS and SYSTEM
Prompt =========================================
Prompt
Prompt Querying duplicate objects ....
Prompt
SELECT object_name, object_type, subobject_name, object_id 
FROM dba_objects 
WHERE object_name||object_type in 
   (SELECT object_name||object_type  
    FROM dba_objects 
    WHERE owner = 'SYS') 
AND owner = 'SYSTEM'; 
Prompt
DOC

################################################################################

 If any objects found please follow below article.
 Note 1030426.6 How to Clean Up Duplicate Objects Owned by SYS and SYSTEM schema
 Read the Exceptions carefully before taking actions.

################################################################################
#
Prompt
Prompt ========================
Prompt Password protected roles
Prompt ========================
Prompt
DOC

################################################################################

 In version 11.2 password protected roles are no longer enabled by default so if 
 an application relies on such roles being enabled by default and no action is
 performed to allow the user to enter the password with the set role command, it 
 is recommended to remove the password from those roles (to allow for existing 
 privileges to remain available). For more information see:

 Note 745407.1 : What Roles Can Be Set as Default for a User?

################################################################################
#
Prompt
Prompt Querying for password protected roles ....
Prompt
break on "Password protected Role"
select r.ROLE "Password protected Role",
p.grantee "Assigned by default to user"
from dba_roles r, dba_role_privs p
where r.PASSWORD_REQUIRED = 'YES' and p.GRANTED_ROLE = r.role
and p.default_role = 'YES'
and p.grantee <> 'SYS' and r.role not in
(select role from dba_application_roles);

Prompt
Prompt ================
Prompt JVM Verification
Prompt ================
Prompt
SET SERVEROUTPUT ON
DECLARE

V_CT NUMBER;
P_VERSION VARCHAR2(10);

BEGIN

-- If so, get the version of the JAVAM component
EXECUTE IMMEDIATE 'SELECT version FROM registry$ WHERE cid=''JAVAVM'' 
		   AND status <> 99' INTO p_version;

SELECT count(*) INTO v_ct FROM dba_objects
WHERE object_type LIKE '%JAVA%' AND owner='SYS';

IF SUBSTR(p_version,1,5) = '8.1.7' THEN
	IF v_ct>=6787 THEN
	DBMS_OUTPUT.PUT_LINE('JAVAVM - Installed properly');
	ELSE
	DBMS_OUTPUT.PUT_LINE('JAVAVM - Not Installed properly');
	END IF;
ELSIF SUBSTR(p_version,1,5) = '9.0.1' THEN
	IF v_ct>=8585 THEN
	DBMS_OUTPUT.PUT_LINE('JAVAVM - Installed properly');
	ELSE
	DBMS_OUTPUT.PUT_LINE('JAVAVM - Not Installed properly');
	END IF;
ELSIF SUBSTR(p_version,1,5) = '9.2.0' THEN
	IF v_ct>=8585 THEN
	DBMS_OUTPUT.PUT_LINE('JAVAVM - Installed properly');
	ELSE
	DBMS_OUTPUT.PUT_LINE('JAVAVM - Not Installed properly');
	END IF;
ELSIF SUBSTR(p_version,1,6) = '10.1.0' THEN
	IF v_ct>=13866 THEN
	DBMS_OUTPUT.PUT_LINE('JAVAVM - Installed properly');
	ELSE
	DBMS_OUTPUT.PUT_LINE('JAVAVM - Not Installed properly');
	END IF;
ELSIF SUBSTR(p_version,1,6) = '10.2.0' THEN
	IF v_ct>=14113 THEN
	DBMS_OUTPUT.PUT_LINE('JAVAVM - Installed properly');
	ELSE
	DBMS_OUTPUT.PUT_LINE('JAVAVM - Not Installed properly');
	END IF;
END IF;

EXCEPTION WHEN NO_DATA_FOUND THEN
	DBMS_OUTPUT.PUT_LINE('JAVAVM - NOT Installed. Below results can be ignored');

END;
/
SET SERVEROUTPUT OFF
Prompt
Prompt ================================================
Prompt Checking Existence of Java-Based Users and Roles
Prompt ================================================
Prompt
DOC

################################################################################

 There should not be any Java Based users for database version 9.0.1 and above.
 If any users found, it is faulty JVM.

################################################################################
#

Prompt
SELECT CASE count(username)
WHEN 0 THEN 'No Java Based Users'
ELSE 'There are '||count(*)||' JAVA based users'
END "User Existence"
FROM dba_users WHERE username LIKE '%AURORA%' AND username LIKE '%OSE%';
Prompt
DOC

###############################################################

 Healthy JVM Should contain Six Roles. 
 If there are more or less than six role, JVM is inconsistent.

###############################################################
#

Prompt
SELECT CASE count(role)
WHEN 0 THEN 'No JAVA related Roles'
ELSE 'There are '||count(role)||' JAVA related roles'
END "Role"
FROM dba_roles 
WHERE role LIKE '%JAVA%';
Prompt
Prompt Roles
Prompt
SELECT role FROM dba_roles WHERE role LIKE '%JAVA%';
set head off
Prompt
Prompt =========================================
Prompt List of Invalid Java Objects owned by SYS
Prompt =========================================
SELECT CASE count(*) 
       WHEN 0 THEN 'There are no SYS owned invalid JAVA objects'
       ELSE 'There are '||count(*)||' SYS owned invalid JAVA objects'
       END "Total Invalid JAVA objects"
FROM dba_objects 
WHERE object_type LIKE '%JAVA%' 
AND status='INVALID' 
AND owner='SYS';
Prompt
DOC

#################################################################

 Check the status of the main JVM interface packages DBMS_JAVA 
 and INITJVMAUX and make sure it is VALID.

 If there are no Invalid objects below will result in zero rows.

#################################################################
#
Prompt
set feedback on
SELECT owner,object_name,object_type
FROM dba_objects 
WHERE object_type LIKE '%JAVA%' 
AND status='INVALID' 
AND owner='SYS';
set feedback off
Prompt
DOC

#################################################################

 If the JAVAVM component is not installed in the database (for 
 example, after creating the database with custom scripts), the 
 next query will report the following error:

   select dbms_java.longname('foo') "JAVAVM TESTING" from dual
   *
   ERROR at line 1:
   ORA-00904: "DBMS_JAVA"."LONGNAME": invalid identifier

 If the JAVAVM component is installed, the query should succeed 
 with 'foo' as result.

#################################################################
#
Prompt
set heading on
select dbms_java.longname('foo') "JAVAVM TESTING" from dual;
set heading off
Prompt 

set feedback off head off
select LPAD('*** End of LogFile ***',50) from dual;
set feedback on head on
set heading off
set heading off
set feedback off
REM select 'Upload db_upg_diag_&&dbname&&timestamp&&suffix from "&log_path" directory' 
REM from dual;
set heading on
set feedback on
Prompt

   ]]></command_args>       
  </command>

  <command>    
    <command_menu>406</command_menu>
    <command_title>Sqlhc Checks SQL Statement Performance</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <category_id>core.sqlplus</category_id>
    <command_type>Sqlplus</command_type>    
    <command_prompt1>license|Oracle Pack license (Tuning or Diagnostics) [Y|N]|N</command_prompt1>    
    <command_prompt2>sql_id|Please enter sql_id for sql to check|</command_prompt2>
    <command_args><![CDATA[connect / as sysdba
rem 
SPO sqlhc.log
SET DEF ^ TERM OFF ECHO ON VER OFF SERVEROUT ON SIZE 1000000;
REM
REM $Header: 1366133.1 sqlhc.sql 11.4.4.4 2012/04/02 carlos.sierra $
REM
REM Copyright (c) 2000-2012, Oracle Corporation. All rights reserved.
REM
REM AUTHOR
REM   carlos.sierra@oracle.com
REM
REM SCRIPT
REM   sqlhc.sql
REM
REM DESCRIPTION
REM   Produces an HTML report with a list of observations based on
REM   health-checks performed in and around a SQL statement that
REM   may be performing poorly.
REM
REM PRE-REQUISITES
REM   1. Execute as SYS or user with DBA role.
REM   2. The SQL for which the health-checks are performed must be
REM      memory-resident or pre-captured by AWR.
REM
REM PARAMETERS
REM   1. Oracle Pack license (Tuning or Diagnostics) Y/N
REM   2. SQL_ID of the SQL for which the health-checks are performed.
REM
REM EXECUTION
REM   1. Start SQL*Plus connecting as SYS or user with DBA role.
REM   2. Execute script sqlhc.sql passing values for parameters.
REM
REM EXAMPLE
REM   # sqlplus / as sysdba
REM   SQL> START [path]sqlhc.sql [Y|N] [SQL_ID]
REM   SQL> START sqlhc.sql Y 51x6yr9ym5hdc
REM
REM NOTES
REM   1. For possible errors see sqlhc.log.
REM

/**************************************************************************************************/

SET TERM ON ECHO OFF;
PRO
PRO Parameter 1:
PRO Oracle Pack license (Tuning or Diagnostics) [Y|N] (required)
PRO
REM DEF input_license = '^1';
DEF input_license = '%%license%%';
PRO
SET TERM OFF;
COL license NEW_V license FOR A1;

SELECT UPPER(SUBSTR(TRIM('^^input_license.'), 1, 1)) license FROM DUAL;

VAR license CHAR(1);
EXEC :license := '^^license.';

SET TERM ON;
WHENEVER SQLERROR EXIT SQL.SQLCODE;

BEGIN
  IF '^^license.' IS NULL OR '^^license.' NOT IN ('Y', 'N') THEN
    RAISE_APPLICATION_ERROR(-20100, 'Oracle Pack license (Tuning or Diagnostics) must be specified as "Y" or "N".');
  END IF;
END;
/

WHENEVER SQLERROR CONTINUE;

PRO
PRO Parameter 2:
PRO SQL_ID of the SQL to be analyzed (required)
PRO
REM DEF input_sql_id = '^2';
DEF input_sql_id = '%%sql_id%%';
PRO
PRO Value passed to sqlhc:
PRO ~~~~~~~~~~~~~~~~~~~~~
PRO License: "^^input_license."
PRO SQL_ID : "^^input_sql_id."
PRO
SET TERM OFF;
COL sql_id NEW_V sql_id FOR A13;

SELECT sql_id
  FROM gv$sqlarea
 WHERE sql_id = TRIM('^^input_sql_id.')
 UNION
SELECT sql_id
  FROM dba_hist_sqltext
 WHERE :license = 'Y'
   AND sql_id = TRIM('^^input_sql_id.');

VAR sql_id VARCHAR2(13);
EXEC :sql_id := '^^sql_id.';

SET TERM ON;
WHENEVER SQLERROR EXIT SQL.SQLCODE;

BEGIN
  IF '^^sql_id.' IS NULL THEN
    IF :license = 'Y' THEN
      RAISE_APPLICATION_ERROR(-20200, 'SQL_ID "^^input_sql_id." not found in memory nor in AWR.');
    ELSE
      RAISE_APPLICATION_ERROR(-20200, 'SQL_ID "^^input_sql_id." not found in memory.');
    END IF;
  END IF;
END;
/

WHENEVER SQLERROR CONTINUE;
SET ECHO ON TIMI ON;

DEF mos_doc = '1366133.1';
DEF doc_ver = '11.4.4.4';
DEF doc_date = '2012/04/02';
DEF doc_link = 'https://support.oracle.com/CSP/main/article?cmd=show&type=NOT&id=';
DEF bug_link = 'https://support.oracle.com/CSP/main/article?cmd=show&type=BUG&id=';

-- tracing sqlhc in case it takes long to execute so we can diagnose it
ALTER SESSION SET TRACEFILE_IDENTIFIER = "sqlhc_^^sql_id.";
ALTER SESSION SET STATISTICS_LEVEL = 'ALL';
ALTER SESSION SET EVENTS '10046 TRACE NAME CONTEXT FOREVER,LEVEL 12';

/**************************************************************************************************/

/* -------------------------
 *
 * get sql_text
 *
 * ------------------------- */

VAR sql_text CLOB;
EXEC :sql_text := NULL;

-- get sql_text from memory
DECLARE
  l_sql_text VARCHAR2(32767);
BEGIN -- 10g see bug 5017909
  DBMS_OUTPUT.PUT_LINE('getting sql_text from memory');
  FOR i IN (SELECT DISTINCT piece, sql_text
              FROM gv$sqltext_with_newlines
             WHERE sql_id = '^^sql_id.'
             ORDER BY 1, 2)
  LOOP
    IF :sql_text IS NULL THEN
      DBMS_LOB.CREATETEMPORARY(:sql_text, TRUE);
      DBMS_LOB.OPEN(:sql_text, DBMS_LOB.LOB_READWRITE);
    END IF;
    l_sql_text := REPLACE(i.sql_text, CHR(00), ' ');
    DBMS_LOB.WRITEAPPEND(:sql_text, LENGTH(l_sql_text), l_sql_text);
  END LOOP;
  IF :sql_text IS NOT NULL THEN
    DBMS_LOB.CLOSE(:sql_text);
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('getting sql_text from memory: '||SQLERRM);
    :sql_text := NULL;
END;
/

-- get sql_text from awr
BEGIN
  IF :license = 'Y' AND (:sql_text IS NULL OR NVL(DBMS_LOB.GETLENGTH(:sql_text), 0) = 0) THEN
    DBMS_OUTPUT.PUT_LINE('getting sql_text from awr');
    SELECT REPLACE(sql_text, CHR(00), ' ')
      INTO :sql_text
      FROM dba_hist_sqltext
     WHERE :license = 'Y'
       AND sql_id = '^^sql_id.'
       AND sql_text IS NOT NULL
       AND ROWNUM = 1;
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('getting sql_text from awr: '||SQLERRM);
    :sql_text := NULL;
END;
/

SELECT :sql_text FROM DUAL;

/* -------------------------
 *
 * assembly title
 *
 * ------------------------- */

-- signature (force=false)
COL signature NEW_V signature FOR A20;
SELECT TO_CHAR(DBMS_SQLTUNE.SQLTEXT_TO_SIGNATURE(:sql_text)) signature FROM DUAL;

-- signature (force=true)
VAR signaturef NUMBER;
EXEC :signaturef := DBMS_SQLTUNE.SQLTEXT_TO_SIGNATURE(:sql_text, TRUE);
COL signaturef NEW_V signaturef FOR A20;
SELECT TO_CHAR(:signaturef) signaturef FROM DUAL;

-- get database name (up to 10, stop before first '.', no special characters)
COL database_name_short NEW_V database_name_short FOR A10;
SELECT SUBSTR(SYS_CONTEXT('USERENV', 'DB_NAME'), 1, 10) database_name_short FROM DUAL;
SELECT SUBSTR('^^database_name_short.', 1, INSTR('^^database_name_short..', '.') - 1) database_name_short FROM DUAL;
SELECT TRANSLATE('^^database_name_short.',
'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 ''`~!@#$%^*()-_=+[]{}\|;:",.<>/?'||CHR(0)||CHR(9)||CHR(10)||CHR(13)||CHR(38),
'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789') database_name_short FROM DUAL;

-- get host name (up to 30, stop before first '.', no special characters)
COL host_name_short NEW_V host_name_short FOR A30;
SELECT SUBSTR(SYS_CONTEXT('USERENV', 'SERVER_HOST'), 1, 30) host_name_short FROM DUAL;
SELECT SUBSTR('^^host_name_short.', 1, INSTR('^^host_name_short..', '.') - 1) host_name_short FROM DUAL;
SELECT TRANSLATE('^^host_name_short.',
'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 ''`~!@#$%^*()-_=+[]{}\|;:",.<>/?'||CHR(0)||CHR(9)||CHR(10)||CHR(13)||CHR(38),
'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789') host_name_short FROM DUAL;

-- get rdbms version
COL rdbms_version NEW_V rdbms_version FOR A17;
SELECT version rdbms_version FROM v$instance;

-- get platform
COL platform NEW_V platform FOR A80;
SELECT UPPER(TRIM(REPLACE(REPLACE(product, 'TNS for '), ':' ))) platform FROM product_component_version WHERE product LIKE 'TNS for%' AND ROWNUM = 1;

-- YYYYMMDDHH24MISS
COL time_stamp NEW_V time_stamp FOR A14;
SELECT TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') time_stamp FROM DUAL;

-- YYYY-MM-DD/HH24:MI:SS
COL time_stamp2 NEW_V time_stamp2 FOR A20;
SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD/HH24:MI:SS') time_stamp2 FROM DUAL;

-- get ofe
COL sys_ofe NEW_V sys_ofe FOR A17;
SELECT value sys_ofe FROM v$system_parameter2 WHERE LOWER(name) = 'optimizer_features_enable';

-- get ds
COL sys_ds NEW_V sys_ds FOR A10;
SELECT value sys_ds FROM v$system_parameter2 WHERE LOWER(name) = 'optimizer_dynamic_sampling';

/* -------------------------
 *
 * application vendor
 *
 * ------------------------- */

-- ebs
COL is_ebs NEW_V is_ebs FOR A1;
COL ebs_owner NEW_V ebs_owner FOR A30;
SELECT 'Y' is_ebs, owner ebs_owner
  FROM dba_tab_columns
 WHERE table_name = 'FND_PRODUCT_GROUPS'
   AND column_name = 'RELEASE_NAME'
   AND data_type = 'VARCHAR2'
   AND ROWNUM = 1;

-- siebel
COL is_siebel NEW_V is_siebel FOR A1;
COL siebel_owner NEW_V siebel_owner FOR A30;
SELECT 'Y' is_siebel, owner siebel_owner
  FROM dba_tab_columns
 WHERE '^^is_ebs.' IS NULL
   AND table_name = 'S_REPOSITORY'
   AND column_name = 'ROW_ID'
   AND data_type = 'VARCHAR2'
   AND ROWNUM = 1;

-- psft
COL is_psft NEW_V is_psft FOR A1;
COL psft_owner NEW_V psft_owner FOR A30;
SELECT 'Y' is_psft, owner psft_owner
  FROM dba_tab_columns
 WHERE '^^is_ebs.' IS NULL
   AND '^^is_siebel.' IS NULL
   AND table_name = 'PSSTATUS'
   AND column_name = 'TOOLSREL'
   AND data_type = 'VARCHAR2'
   AND ROWNUM = 1;

/* -------------------------
 *
 * find tables and indexes
 *
 * ------------------------- */

SAVEPOINT sqlhc;

DELETE plan_table;

-- record tables
INSERT INTO plan_table (object_type, object_owner, object_name)
WITH object AS (
SELECT /*+ MATERIALIZE */
       object_owner owner, object_name name
  FROM gv$sql_plan
 WHERE sql_id = :sql_id
   AND object_owner IS NOT NULL
   AND object_name IS NOT NULL
 UNION
SELECT object_owner owner, object_name name
  FROM dba_hist_sql_plan
 WHERE :license = 'Y'
   AND sql_id = :sql_id
   AND object_owner IS NOT NULL
   AND object_name IS NOT NULL
 )
 SELECT 'TABLE', t.owner, t.table_name
   FROM dba_tab_statistics t, -- include fixed objects
        object o
  WHERE t.owner = o.owner
    AND t.table_name = o.name
  UNION
 SELECT 'TABLE', i.table_owner, i.table_name
   FROM dba_indexes i,
        object o
  WHERE i.owner = o.owner
    AND i.index_name = o.name;

-- list tables
SELECT object_owner owner, object_name table_name
  FROM plan_table
 WHERE object_type = 'TABLE'
 ORDER BY 1, 2;

-- record indexes from known plans
INSERT INTO plan_table (object_type, object_owner, object_name, other_tag)
SELECT 'INDEX', object_owner owner, object_name index_name, 'YES'
  FROM gv$sql_plan
 WHERE sql_id = :sql_id
   AND object_owner IS NOT NULL
   AND object_name IS NOT NULL
   AND (object_type LIKE '%INDEX%' OR operation LIKE '%INDEX%')
 UNION
SELECT 'INDEX', object_owner owner, object_name index_name, 'YES'
  FROM dba_hist_sql_plan
 WHERE :license = 'Y'
   AND sql_id = :sql_id
   AND object_owner IS NOT NULL
   AND object_name IS NOT NULL
   AND (object_type LIKE '%INDEX%' OR operation LIKE '%INDEX%');

-- record indexes from tables in plan
INSERT INTO plan_table (object_type, object_owner, object_name, other_tag)
SELECT 'INDEX', owner, index_name, 'NO'
  FROM plan_table t,
       dba_indexes i
 WHERE t.object_type = 'TABLE'
   AND t.object_owner = i.table_owner
   AND t.object_name = i.table_name
 MINUS
SELECT 'INDEX', object_owner, object_name, 'NO'
  FROM plan_table t
 WHERE object_type = 'INDEX';

COL in_plan FOR A7;
-- list indexes
SELECT object_owner owner, object_name index_name, other_tag in_plan
  FROM plan_table
 WHERE object_type = 'INDEX'
 ORDER BY 1, 2;

/* -------------------------
 *
 * cook low_value and high_value
 *
 * ------------------------- */

-- insert columns low and high raw values
INSERT INTO plan_table (object_type, object_owner, object_name, object_alias, object_node, access_predicates, filter_predicates)
SELECT 'COLUMN',
       c.owner,
       c.table_name,
       c.column_name,
       c.data_type,
       c.low_value,
       c.high_value
  FROM plan_table pt,
       dba_tab_cols c
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = c.owner
   AND pt.object_name = c.table_name;

-- converts raw values into legible values
DECLARE
  l_low_value_cooked VARCHAR2(255);
  l_high_value_cooked VARCHAR2(255);
  FUNCTION convert_raw_value (
    p_raw       IN RAW,
    p_data_type IN VARCHAR2 )
  RETURN VARCHAR2
  IS
    l_resval               VARCHAR2(4000);
    l_resval_varchar2      VARCHAR2(4000);
    l_resval_date          DATE;
    l_resval_number        NUMBER;
    l_resval_binary_float  BINARY_FLOAT;
    l_resval_binary_double BINARY_DOUBLE;
  BEGIN
    IF p_raw IS NULL OR p_data_type IS NULL THEN
      l_resval := NULL;
    ELSIF p_data_type IN ('CHAR', '96', 'VARCHAR2', '1', 'NCHAR', 'NVARCHAR2') THEN
      DBMS_STATS.CONVERT_RAW_VALUE(p_raw, l_resval_varchar2);
      l_resval := l_resval_varchar2;
    ELSIF p_data_type IN ('DATE', '12', '180', '181', '231') OR p_data_type LIKE 'TIMESTAMP%' THEN
      DBMS_STATS.CONVERT_RAW_VALUE(p_raw, l_resval_date);
      l_resval := TRIM(TO_CHAR(l_resval_date, 'SYYYY-MM-DD/HH24:MI:SS'));
    ELSIF p_data_type IN ('NUMBER', 'FLOAT', '2', '4', '21', '22') THEN
      DBMS_STATS.CONVERT_RAW_VALUE(p_raw, l_resval_number);
      l_resval := TO_CHAR(l_resval_number);
    ELSIF p_data_type IN ('BINARY_FLOAT', '100') THEN
      DBMS_STATS.CONVERT_RAW_VALUE(p_raw, l_resval_binary_float);
      l_resval := TO_CHAR(l_resval_binary_float);
    ELSIF p_data_type IN ('BINARY_DOUBLE', '101') THEN
      DBMS_STATS.CONVERT_RAW_VALUE(p_raw, l_resval_binary_double);
      l_resval := TO_CHAR(l_resval_binary_double);
    ELSIF p_data_type IN ('RAW', '23') THEN
      l_resval := TO_CHAR(p_raw);
    ELSE
      l_resval := TO_CHAR(p_raw);
    END IF;
    RETURN l_resval;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN p_raw;
  END convert_raw_value;
BEGIN
  FOR i IN (SELECT ROWID row_id,
                   object_node data_type,
                   CAST(access_predicates AS RAW(32)) low_value,
                   CAST(filter_predicates AS RAW(32)) high_value
              FROM plan_table
             WHERE object_type = 'COLUMN'
               AND access_predicates||filter_predicates IS NOT NULL)
  LOOP
    l_low_value_cooked := convert_raw_value(i.low_value, i.data_type);
    l_high_value_cooked := convert_raw_value(i.high_value, i.data_type);
    UPDATE plan_table SET
      partition_start = l_low_value_cooked,
      partition_stop = l_high_value_cooked
    WHERE ROWID = i.row_id;
  END LOOP;
END;
/

/* -------------------------
 *
 * record type enumerator
 *
 * ------------------------- */

-- constants
VAR E_GLOBAL     NUMBER;
VAR E_EBS        NUMBER;
VAR E_SIEBEL     NUMBER;
VAR E_PSFT       NUMBER;
VAR E_TABLE      NUMBER;
VAR E_INDEX      NUMBER;
VAR E_1COL_INDEX NUMBER;
VAR E_TABLE_PART NUMBER;
VAR E_INDEX_PART NUMBER;
VAR E_TABLE_COL  NUMBER;

EXEC :E_GLOBAL     := 01;
EXEC :E_EBS        := 02;
EXEC :E_SIEBEL     := 03;
EXEC :E_PSFT       := 04;
EXEC :E_TABLE      := 05;
EXEC :E_INDEX      := 06;
EXEC :E_1COL_INDEX := 07;
EXEC :E_TABLE_PART := 08;
EXEC :E_INDEX_PART := 09;
EXEC :E_TABLE_COL  := 10;

/**************************************************************************************************/

/* -------------------------
 *
 * global hc
 *
 * ------------------------- */

-- 5969780 STATISTICS_LEVEL = ALL on LINUX
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'CBO PARAMETER', SYSTIMESTAMP, 'STATISTICS_LEVEL',
       'Parameter STATISTICS_LEVEL is set to ALL on ^^platform. platform.',
       'STATISTICS_LEVEL = ALL provides valuable metrics like A-Rows. Be aware of Bug <a target="MOS" href="^^bug_link.5969780">5969780</a> CPU overhead.<br>'||CHR(10)||
       'Use a value of ALL only at the session level. You could use CBO hint /*+ gather_plan_statistics */ to accomplish the same.'
  FROM v$system_parameter2
 WHERE UPPER(name) = 'STATISTICS_LEVEL'
   AND UPPER(value) = 'ALL'
   AND '^^rdbms_version.' LIKE '10%'
   AND '^^platform.' LIKE '%LINUX%';

-- cbo parameters with non-default values at sql level
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'CBO PARAMETER', SYSTIMESTAMP, UPPER(name),
       'CBO initialization parameter "'||name||'" with a non-default value of "'||value||'" as per V$SQL_OPTIMIZER_ENV.',
       'Review the correctness of this non-default value "'||value||'" for SQL_ID '||:sql_id||'.'
  FROM (
SELECT DISTINCT name, value
  FROM v$sql_optimizer_env
 WHERE sql_id = :sql_id
   AND isdefault = 'NO' );

-- cbo parameters with non-default values at system level
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'CBO PARAMETER', SYSTIMESTAMP, UPPER(g.name),
       'CBO initialization parameter "'||g.name||'" with a non-default value of "'||g.value||'" as per V$SYS_OPTIMIZER_ENV.',
       'Review the correctness of this non-default value "'||g.value||'".<br>'||CHR(10)||
       'Unset this parameter unless there is a strong reason for keeping its current value.<br>'||CHR(10)||
       'Default value is "'||g.default_value||'" as per V$SYS_OPTIMIZER_ENV.'
  FROM v$sys_optimizer_env g
 WHERE g.isdefault = 'NO'
   AND NOT EXISTS (
SELECT NULL
  FROM v$sql_optimizer_env s
 WHERE s.sql_id = :sql_id
   AND s.isdefault = 'NO'
   AND s.name = g.name
   AND s.value = g.value );

-- optimizer_features_enable <> rdbms_version at system level
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'CBO PARAMETER', SYSTIMESTAMP, 'OPTIMIZER_FEATURES_ENABLE',
       'DB version ^^rdbms_version. and OPTIMIZER_FEATURES_ENABLE ^^sys_ofe. do not match as per V$SYSTEM_PARAMETER2.',
       'Be aware that you are using a prior version of the optimizer. New CBO features in your DB version may not be used.'
  FROM DUAL
 WHERE SUBSTR('^^rdbms_version.', 1, LEAST(LENGTH('^^rdbms_version.'), LENGTH('^^sys_ofe.'))) <> SUBSTR('^^sys_ofe.', 1, LEAST(LENGTH('^^rdbms_version.'), LENGTH('^^sys_ofe.')));

-- optimizer_features_enable <> rdbms_version at sql level
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'CBO PARAMETER', SYSTIMESTAMP, 'OPTIMIZER_FEATURES_ENABLE',
       'DB version ^^rdbms_version. and OPTIMIZER_FEATURES_ENABLE '||v.value||' do not match for SQL_ID '||:sql_id||' as per V$SQL_OPTIMIZER_ENV.',
       'Be aware that you are using a prior version of the optimizer. New CBO features in your DB version may not be used.'
  FROM (
SELECT DISTINCT value
  FROM v$sql_optimizer_env
 WHERE sql_id = :sql_id
   AND LOWER(name) = 'optimizer_features_enable'
   AND SUBSTR('^^rdbms_version.', 1, LEAST(LENGTH('^^rdbms_version.'), LENGTH(value))) <> SUBSTR(value, 1, LEAST(LENGTH('^^rdbms_version.'), LENGTH(value))) ) v;

-- optimizer_dynamic_sampling between 1 and 3 at system level
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'CBO PARAMETER', SYSTIMESTAMP, 'OPTIMIZER_DYNAMIC_SAMPLING',
       'Dynamic Sampling is set to small value of ^^sys_ds. as per V$SYSTEM_PARAMETER2.',
       'Be aware that using such a small value may produce statistics of poor quality.<br>'||CHR(10)||
       'If you rely on this functionality consider using a value no smaller than 4.'
  FROM plan_table pt,
       dba_tables t
 WHERE TO_NUMBER('^^sys_ds.') BETWEEN 1 AND 3
   AND pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.temporary = 'N'
   AND (t.last_analyzed IS NULL OR t.num_rows IS NULL)
   AND ROWNUM = 1;

-- db_file_multiblock_read_count should not be set
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'CBO PARAMETER', SYSTIMESTAMP, 'DB_FILE_MULTIBLOCK_READ_COUNT',
       'MBRC Parameter is set to "'||value||'" overriding its default value.',
       'The default value of this parameter is a value that corresponds to the maximum I/O size that can be performed efficiently.<br>'||CHR(10)||
       'This value is platform-dependent and is 1MB for most platforms.<br>'||CHR(10)||
       'Because the parameter is expressed in blocks, it will be set to a value that is equal to the maximum I/O size that can be performed efficiently divided by the standard block size.'
  FROM v$system_parameter2
 WHERE UPPER(name) = 'DB_FILE_MULTIBLOCK_READ_COUNT'
   AND (isdefault = 'FALSE' OR ismodified <> 'FALSE');

-- nls_sort is not binary (session)
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'NLS PARAMETER', SYSTIMESTAMP, 'NLS_SORT',
       'NLS_SORT Session Parameter is set to "'||value||'" in V$NLS_PARAMETERS.',
       'Setting NLS_SORT to anything other than BINARY causes a sort to use a full table scan, regardless of the path chosen by the optimizer.'
  FROM v$nls_parameters
 WHERE UPPER(parameter) = 'NLS_SORT'
   AND UPPER(value) <> 'BINARY';

-- nls_sort is not binary (instance)
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'NLS PARAMETER', SYSTIMESTAMP, 'NLS_SORT',
       'NLS_SORT Instance Parameter is set to "'||value||'" in V$SYSTEM_PARAMETER.',
       'Setting NLS_SORT to anything other than BINARY causes a sort to use a full table scan, regardless of the path chosen by the optimizer.'
  FROM v$system_parameter
 WHERE UPPER(name) = 'NLS_SORT'
   AND UPPER(value) <> 'BINARY';

-- nls_sort is not binary (global)
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'NLS PARAMETER', SYSTIMESTAMP, 'NLS_SORT',
       'NLS_SORT Global Parameter is set to "'||value||'" in NLS_DATABASE_PARAMETERS.',
       'Setting NLS_SORT to anything other than BINARY causes a sort to use a full table scan, regardless of the path chosen by the optimizer.'
  FROM nls_database_parameters
 WHERE UPPER(parameter) = 'NLS_SORT'
   AND UPPER(value) <> 'BINARY';

-- DBMS_STATS automatic gathering on 10g
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'DBMS_STATS', SYSTIMESTAMP, 'DBA_SCHEDULER_JOBS',
       'Automatic gathering of CBO statistics is enabled.',
       CASE
         WHEN '^^is_ebs.' = 'Y' THEN
           'Disable this job immediately and re-gather statistics for all affected schemas using FND_STATS or coe_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.156968.1">156968.1</a>.'
         WHEN '^^is_siebel.' = 'Y' THEN
           'Disable this job immediately and re-gather statistics for all affected schemas using coe_siebel_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.781927.1">781927.1</a>.'
         WHEN '^^is_psft.' = 'Y' THEN
           'Disable this job immediately and re-gather statistics for all affected schemas using pscbo_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.1322888.1">1322888.1</a>.'
         ELSE
           'Be aware that small sample sizes could produce poor quality histograms,<br>'||CHR(10)||
           'which combined with bind sensitive predicates could render suboptimal plans.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.465787.1">465787.1</a>.'
         END
  FROM dba_scheduler_jobs
 WHERE job_name = 'GATHER_STATS_JOB'
   AND enabled = 'TRUE';

-- DBMS_STATS automatic gathering on 11g
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'DBMS_STATS', SYSTIMESTAMP, 'DBA_AUTOTASK_CLIENT',
       'Automatic gathering of CBO statistics is enabled.',
       CASE
         WHEN '^^is_ebs.' = 'Y' THEN
           'Disable this job immediately and re-gather statistics for all affected schemas using FND_STATS or coe_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.156968.1">156968.1</a>.'
         WHEN '^^is_siebel.' = 'Y' THEN
           'Disable this job immediately and re-gather statistics for all affected schemas using coe_siebel_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.781927.1">781927.1</a>.'
         WHEN '^^is_psft.' = 'Y' THEN
           'Disable this job immediately and re-gather statistics for all affected schemas using pscbo_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.1322888.1">1322888.1</a>.'
         ELSE
           'Be aware that small sample sizes could produce poor quality histograms,<br>'||CHR(10)||
           'which combined with bind sensitive predicates could render suboptimal plans.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.465787.1">465787.1</a>.'
         END
  FROM dba_autotask_client
 WHERE client_name = 'auto optimizer stats collection'
   AND status = 'ENABLED';

-- multiple CBO environments in SQL Area
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'PLAN', SYSTIMESTAMP, 'OPTIMIZER_ENV',
       'SQL Area references '||COUNT(DISTINCT optimizer_env_hash_value)||' distinct CBO Enviornments for this one SQL.',
       'Distinct CBO Environments may produce different Plans.'
  FROM gv$sqlarea_plan_hash
 WHERE sql_id = :sql_id
HAVING COUNT(*) > 1;

-- multiple CBO environments in GV$SQL
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'PLAN', SYSTIMESTAMP, 'OPTIMIZER_ENV',
       'GV$SQL references '||COUNT(DISTINCT optimizer_env_hash_value)||' distinct CBO Enviornments for this one SQL.',
       'Distinct CBO Environments may produce different Plans.'
  FROM gv$sql
 WHERE sql_id = :sql_id
HAVING COUNT(*) > 1;

-- multiple CBO environments in AWR
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'PLAN', SYSTIMESTAMP, 'OPTIMIZER_ENV',
       'AWR references '||COUNT(DISTINCT optimizer_env_hash_value)||' distinct CBO Enviornments for this one SQL.',
       'Distinct CBO Environments may produce different Plans.'
  FROM dba_hist_sqlstat
 WHERE :license = 'Y'
   AND sql_id = :sql_id
HAVING COUNT(*) > 1;

-- plans with implicit data_type conversion
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'PLAN', SYSTIMESTAMP, 'PLAN_HASH_VALUE',
       'Plan '||v.plan_hash_value||' may have implicit data_type conversion functions in Filter Predicates.',
       'Review Execution Plans.<br>'||CHR(10)||
       'If Filter Predicates for '||v.plan_hash_value||' include unexpected INTERNAL_FUNCTION to perform an implicit data_type conversion,<br>'||CHR(10)||
       'be sure it is not preventing a column from being used as an Access Predicate.'
  FROM (
SELECT DISTINCT plan_hash_value
  FROM gv$sql_plan
 WHERE sql_id = :sql_id
   AND filter_predicates LIKE '%INTERNAL_FUNCTION%'
 ORDER BY 1) v;

-- plan operations with cost 0 and card 1
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'PLAN', SYSTIMESTAMP, 'PLAN_HASH_VALUE',
       'Plan '||v.plan_hash_value||' has operations with Cost 0 and Card 1. Possible incorrect Selectivity.',
       'Review Execution Plans.<br>'||CHR(10)||
       'Look for Plan operations in '||v.plan_hash_value||' where Cost is 0 and Estimated Cardinality is 1.<br>'||CHR(10)||
       'Suspect predicates out of range or incorrect statistics.'
  FROM (
SELECT plan_hash_value
  FROM gv$sql_plan
 WHERE sql_id = :sql_id
   AND cost = 0
   AND cardinality = 1
 UNION
SELECT plan_hash_value
  FROM dba_hist_sql_plan
 WHERE :license = 'Y'
   AND sql_id = :sql_id
   AND cost = 0
   AND cardinality = 1) v;

-- high version count
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'VERSION COUNT', SYSTIMESTAMP, 'VERSION COUNT',
       'This SQL shows evidence of high version count of '||MAX(v.version_count)||'.',
       'Review Execution Plans for details.'
  FROM (
SELECT MAX(version_count) version_count
  FROM gv$sqlarea_plan_hash
 WHERE sql_id = :sql_id
 UNION
SELECT MAX(version_count) version_count
  FROM dba_hist_sqlstat
 WHERE :license = 'Y'
   AND sql_id = :sql_id ) v
HAVING MAX(v.version_count) > 20;

-- first rows
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'OPTIMZER MODE', SYSTIMESTAMP, 'FIRST_ROWS',
       'OPTIMIZER_MODE was set to FIRST_ROWS in '||v.pln_count||' Plan(s).',
       'The optimizer uses a mix of cost and heuristics to find a best plan for fast delivery of the first few rows.<br>'||CHR(10)||
       'Using heuristics sometimes leads the query optimizer to generate a plan with a cost that is significantly larger than the cost of a plan without applying the heuristic.<br>'||CHR(10)||
       'FIRST_ROWS is available for backward compatibility and plan stability; use FIRST_ROWS_n instead.'
FROM (
SELECT COUNT(*) pln_count
  FROM (
SELECT plan_hash_value
  FROM gv$sql
 WHERE sql_id = :sql_id
   AND optimizer_mode = 'FIRST_ROWS'
 UNION
SELECT plan_hash_value
  FROM dba_hist_sqlstat
 WHERE :license = 'Y'
   AND sql_id = :sql_id
   AND optimizer_mode = 'FIRST_ROWS') v) v
 WHERE v.pln_count > 0;

-- fixed objects missing stats
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'FIXED OBJECTS', SYSTIMESTAMP, 'DBA_TAB_COL_STATISTICS',
       'There exist(s) '||v.tbl_count||' Fixed Object(s) accessed by this SQL without CBO statistics.',
       'Consider gathering statistics for fixed objects using DBMS_STATS.GATHER_FIXED_OBJECTS_STATS.<br>'||CHR(10)||
       'See <a target="MOS" href="^^doc_link.465787.1">465787.1</a>.'
FROM (
SELECT COUNT(*) tbl_count
  FROM plan_table pt,
       dba_tab_statistics t
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.object_type = 'FIXED TABLE'
   AND NOT EXISTS (
SELECT NULL
  FROM dba_tab_cols c
 WHERE t.owner = c.owner
   AND t.table_name = c.table_name )) v
 WHERE v.tbl_count > 0;

-- system statistics not gathered
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'DBMS_STATS', SYSTIMESTAMP, 'SYSTEM STATISTICS',
       'Workload CBO System Statistics are not gathered. CBO is using default values.',
       'Consider gathering workload system statistics using DBMS_STATS.GATHER_SYSTEM_STATS.<br>'||CHR(10)||
       'See also <a target="MOS" href="^^doc_link.465787.1">465787.1</a>.'
  FROM sys.aux_stats$
 WHERE sname = 'SYSSTATS_MAIN'
   AND pname = 'CPUSPEED'
   AND pval1 IS NULL;

-- mreadtim < sreadtim
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'DBMS_STATS', SYSTIMESTAMP, 'SYSTEM STATISTICS',
       'Multi-block read time of '||a1.pval1||'ms seems too small compared to single-block read time of '||a2.pval1||'ms.',
       'Consider gathering workload system statistics using DBMS_STATS.GATHER_SYSTEM_STATS or adjusting SREADTIM and MREADTIM using DBMS_STATS.SET_SYSTEM_STATS.<br>'||CHR(10)||
       'See also <a target="MOS" href="^^doc_link.465787.1">465787.1</a>.'
  FROM sys.aux_stats$ a1, sys.aux_stats$ a2
 WHERE a1.sname = 'SYSSTATS_MAIN'
   AND a1.pname = 'MREADTIM'
   AND a2.sname = 'SYSSTATS_MAIN'
   AND a2.pname = 'SREADTIM'
   AND a1.pval1 < a2.pval1;

-- sreadtim < 2
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'DBMS_STATS', SYSTIMESTAMP, 'SYSTEM STATISTICS',
       'Single-block read time of '||pval1||' milliseconds seems too small.',
       'Consider gathering workload system statistics using DBMS_STATS.GATHER_SYSTEM_STATS or adjusting SREADTIM using DBMS_STATS.SET_SYSTEM_STATS.<br>'||CHR(10)||
       'See also <a target="MOS" href="^^doc_link.465787.1">465787.1</a>.'
  FROM sys.aux_stats$
 WHERE sname = 'SYSSTATS_MAIN'
   AND pname = 'SREADTIM'
   AND pval1 < 2;

-- mreadtim < 3
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'DBMS_STATS', SYSTIMESTAMP, 'SYSTEM STATISTICS',
       'Multi-block read time of '||pval1||' milliseconds seems too small.',
       'Consider gathering workload system statistics using DBMS_STATS.GATHER_SYSTEM_STATS or adjusting MREADTIM using DBMS_STATS.SET_SYSTEM_STATS.<br>'||CHR(10)||
       'See also <a target="MOS" href="^^doc_link.465787.1">465787.1</a>.'
  FROM sys.aux_stats$
 WHERE sname = 'SYSSTATS_MAIN'
   AND pname = 'MREADTIM'
   AND pval1 < 3;

-- sreadtim > 18
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'DBMS_STATS', SYSTIMESTAMP, 'SYSTEM STATISTICS',
       'Single-block read time of '||pval1||' milliseconds seems too large.',
       'Consider gathering workload system statistics using DBMS_STATS.GATHER_SYSTEM_STATS or adjusting SREADTIM using DBMS_STATS.SET_SYSTEM_STATS.<br>'||CHR(10)||
       'See also <a target="MOS" href="^^doc_link.465787.1">465787.1</a> and Bug <a target="MOS" href="^^bug_link.9842771">9842771</a>.'
  FROM sys.aux_stats$
 WHERE sname = 'SYSSTATS_MAIN'
   AND pname = 'SREADTIM'
   AND pval1 > 18;

-- mreadtim > 522
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'DBMS_STATS', SYSTIMESTAMP, 'SYSTEM STATISTICS',
       'Multi-block read time of '||pval1||' milliseconds seems too large.',
       'Consider gathering workload system statistics using DBMS_STATS.GATHER_SYSTEM_STATS or adjusting MREADTIM using DBMS_STATS.SET_SYSTEM_STATS.<br>'||CHR(10)||
       'See also <a target="MOS" href="^^doc_link.465787.1">465787.1</a> and Bug <a target="MOS" href="^^bug_link.9842771">9842771</a>.'
  FROM sys.aux_stats$
 WHERE sname = 'SYSSTATS_MAIN'
   AND pname = 'MREADTIM'
   AND pval1 > 522;

-- sql with policies as per v$vpd_policy
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'VDP', SYSTIMESTAMP, 'V$VPD_POLICY',
       'Virtual Private Database. There is one or more policies affecting this SQL.',
       'Review Execution Plans and look for their injected predicates.'
  FROM v$vpd_policy
 WHERE sql_id = :sql_id
HAVING COUNT(*) > 0;

-- materialized views with rewrite enabled
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'MAT_VIEW', SYSTIMESTAMP, 'REWRITE_ENABLED',
       'There are '||COUNT(*)||' materialized views with rewrite enabled.',
       'A large number of materialized views could affect parsing time since CBO would have to evaluate each during a hard-parse.'
  FROM v$system_parameter2 p,
       dba_mviews m
 WHERE UPPER(p.name) = 'QUERY_REWRITE_ENABLED'
   AND UPPER(p.value) = 'TRUE'
   AND m.rewrite_enabled = 'Y'
HAVING COUNT(*) > 1;

-- table with bitmap index(es)
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'INDEX', SYSTIMESTAMP, 'BITMAP',
       'Your DML statement references '||COUNT(DISTINCT pt.object_name||pt.object_owner)||' Table(s) with at least one Bitmap index.',
       'Be aware that frequent DML operations operations in a Table with Bitmap indexes may produce contention where concurrent DML operations are common. If your SQL suffers of "TX-enqueue row lock contention" suspect this situation.'
  FROM plan_table pt,
       dba_indexes i
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = i.table_owner
   AND pt.object_name = i.table_name
   AND i.index_type = 'BITMAP'
   AND EXISTS (
SELECT NULL
  FROM gv$sqlarea s
 WHERE s.sql_id = :sql_id
   AND s.command_type IN (2, 6, 7)) -- INSERT, UPDATE, DELETE
HAVING COUNT(*) > 0;

-- index in plan no longer exists
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT DISTINCT :E_INDEX, 'INDEX', SYSTIMESTAMP, pt.object_owner||'.'||pt.object_name,
       'Index referenced by an Execution Plan no longer exists.',
       'If a Plan references a missing index then this Plan can no longer be generated by the CBO.'
  FROM plan_table pt
 WHERE pt.object_type = 'INDEX'
   AND pt.other_tag = 'YES'
   AND NOT EXISTS (
SELECT NULL
  FROM dba_indexes i
 WHERE pt.object_owner = i.owner
   AND pt.object_name = i.index_name );

-- index in plan is now unusable
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT DISTINCT :E_INDEX, 'INDEX', SYSTIMESTAMP, pt.object_owner||'.'||pt.object_name,
       'Index referenced by an Execution Plan is now unusable.',
       'If a Plan references an unusable index then this Plan cannot be generated by the CBO.<br>'||CHR(10)||
       'If you need to enable tha Plan that references this index you need to rebuild it first.'
  FROM plan_table pt,
       dba_indexes i
 WHERE pt.object_type = 'INDEX'
   AND pt.other_tag = 'YES'
   AND pt.object_owner = i.owner
   AND pt.object_name = i.index_name
   AND i.partitioned = 'NO'
   AND i.status = 'UNUSABLE';

-- index in plan has now unusable partitions
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT DISTINCT :E_INDEX, 'INDEX', SYSTIMESTAMP, pt.object_owner||'.'||pt.object_name,
       'Index referenced by an Execution Plan has now unusable partitions.',
       'If a Plan references an index with unusable partitions then this Plan cannot be generated by the CBO.<br>'||CHR(10)||
       'If you need to enable tha Plan that references this index you need to rebuild the unusable partitions first.'
  FROM plan_table pt,
       dba_indexes i,
       dba_ind_partitions p
 WHERE pt.object_type = 'INDEX'
   AND pt.other_tag = 'YES'
   AND pt.object_owner = i.owner
   AND pt.object_name = i.index_name
   AND i.partitioned = 'YES'
   AND pt.object_owner = p.index_owner
   AND pt.object_name = p.index_name
   AND p.status = 'UNUSABLE';

-- index in plan has now unusable subpartitions
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT DISTINCT :E_INDEX, 'INDEX', SYSTIMESTAMP, pt.object_owner||'.'||pt.object_name,
       'Index referenced by an Execution Plan has now unusable subpartitions.',
       'If a Plan references an index with unusable subpartitions then this Plan cannot be generated by the CBO.<br>'||CHR(10)||
       'If you need to enable tha Plan that references this index you need to rebuild the unusable subpartitions first.'
  FROM plan_table pt,
       dba_indexes i,
       dba_ind_subpartitions p
 WHERE pt.object_type = 'INDEX'
   AND pt.other_tag = 'YES'
   AND pt.object_owner = i.owner
   AND pt.object_name = i.index_name
   AND i.partitioned = 'YES'
   AND pt.object_owner = p.index_owner
   AND pt.object_name = p.index_name
   AND p.status = 'UNUSABLE';

-- index in plan is now invisible
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT DISTINCT :E_INDEX, 'INDEX', SYSTIMESTAMP, pt.object_owner||'.'||pt.object_name,
       'Index referenced by an Execution Plan is now invisible.',
       'If a Plan references an invisible index then this Plan cannot be generated by the CBO.<br>'||CHR(10)||
       'If you need to enable tha Plan that references this index you need to make this index visible.'
  FROM plan_table pt,
       dba_indexes i
 WHERE pt.object_type = 'INDEX'
   AND pt.other_tag = 'YES'
   AND pt.object_owner = i.owner
   AND pt.object_name = i.index_name
   AND i.partitioned = 'NO'
   AND i.visibility = 'INVISIBLE';

-- unusable indexes
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'INDEX', SYSTIMESTAMP, 'UNUSABLE',
       'There are '||COUNT(*)||' unusable index(es) in tables being accessed by your SQL.',
       'Unusable indexes cannot be used by the CBO. This may cause Execution Plans to change.'
  FROM plan_table pt,
       dba_indexes i
 WHERE pt.object_type = 'INDEX'
   AND pt.object_owner = i.owner
   AND pt.object_name = i.index_name
   AND i.partitioned = 'NO'
   AND i.status = 'UNUSABLE'
HAVING COUNT(*) > 0;

-- unusable index partitions
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'INDEX PARTITION', SYSTIMESTAMP, 'UNUSABLE',
       'There are '||COUNT(*)||' unusable index partition(s) in tables being accessed by your SQL.',
       'Unusable index partitions cannot be used by the CBO. This may cause Execution Plans to change.'
  FROM plan_table pt,
       dba_indexes i,
       dba_ind_partitions p
 WHERE pt.object_type = 'INDEX'
   AND pt.object_owner = i.owner
   AND pt.object_name = i.index_name
   AND i.partitioned = 'YES'
   AND pt.object_owner = p.index_owner
   AND pt.object_name = p.index_name
   AND p.status = 'UNUSABLE'
HAVING COUNT(*) > 0;

-- unusable index subpartitions
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'INDEX SUBPARTITION', SYSTIMESTAMP, 'UNUSABLE',
       'There are '||COUNT(*)||' unusable index subpartition(s) in tables being accessed by your SQL.',
       'Unusable index subpartitions cannot be used by the CBO. This may cause Execution Plans to change.'
  FROM plan_table pt,
       dba_indexes i,
       dba_ind_subpartitions sp
 WHERE pt.object_type = 'INDEX'
   AND pt.object_owner = i.owner
   AND pt.object_name = i.index_name
   AND i.partitioned = 'YES'
   AND pt.object_owner = sp.index_owner
   AND pt.object_name = sp.index_name
   AND sp.status = 'UNUSABLE'
HAVING COUNT(*) > 0;

-- invisible indexes
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_GLOBAL, 'INDEX', SYSTIMESTAMP, 'INVISIBLE',
       'There are '||COUNT(*)||' invisible index(es) in tables being accessed by your SQL.',
       'Invisible indexes cannot be used by the CBO. This may cause Execution Plans to change.'
  FROM plan_table pt,
       dba_indexes i
 WHERE pt.object_type = 'INDEX'
   AND pt.object_owner = i.owner
   AND pt.object_name = i.index_name
   AND i.visibility = 'INVISIBLE'
HAVING COUNT(*) > 0;

/* -------------------------
 *
 * table hc
 *
 * ------------------------- */

-- empty_blocks > blocks
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE, 'TABLE', SYSTIMESTAMP, pt.object_owner||'.'||pt.object_name,
       'Table has more empty blocks ('||t.empty_blocks||') than actual blocks ('||t.blocks||') according to CBO statistics.',
       'Review Table statistics and consider re-organizing this Table.'
  FROM plan_table pt,
       dba_tables t
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.empty_blocks > t.blocks;

-- table dop is set
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE, 'TABLE', SYSTIMESTAMP, pt.object_owner||'.'||pt.object_name,
       'Table''s DOP is "'||TRIM(t.degree)||'".',
       'Degree of parallelism greater than 1 may cause parallel-execution PX plans.<br>'||CHR(10)||
       'Review table properties and execute "ALTER TABLE '||pt.object_owner||'.'||pt.object_name||' NOPARALLEL" to reset degree of parallelism to 1 if PX plans are not desired.'
  FROM plan_table pt,
       dba_tables t
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND TRIM(t.degree) NOT IN ('0', '1', 'DEFAULT');

-- table has indexes with dop set
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE, 'TABLE', SYSTIMESTAMP, pt.object_owner||'.'||pt.object_name,
       'Table has '||COUNT(*)||' index(es) with DOP greater than 1.',
       'Degree of parallelism greater than 1 may cause parallel-execution PX plans.<br>'||CHR(10)||
       'Review index properties and execute "ALTER INDEX index_name NOPARALLEL" to reset degree of parallelism to 1 if PX plans are not desired.'
  FROM plan_table pt,
       dba_indexes i
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = i.table_owner
   AND pt.object_name = i.table_name
   AND TRIM(i.degree) NOT IN ('0', '1', 'DEFAULT')
 GROUP BY
       pt.object_owner,
       pt.object_name;

-- index degree <> table degree
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE, 'TABLE', SYSTIMESTAMP, pt.object_owner||'.'||pt.object_name,
       'Table has '||COUNT(*)||' index(es) with DOP different than its table.',
       'Table has a degree of parallelism of "'||TRIM(t.degree)||'".<br>'||CHR(10)||
       'Review index properties and fix degree of parallelism of table and/or its index(es).'
  FROM plan_table pt,
       dba_tables t,
       dba_indexes i
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND pt.object_owner = i.table_owner
   AND pt.object_name = i.table_name
   AND TRIM(t.degree) <> TRIM(i.degree)
 GROUP BY
       pt.object_owner,
       pt.object_name,
       TRIM(t.degree);

-- no stats
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE, 'TABLE', SYSTIMESTAMP, pt.object_owner||'.'||pt.object_name,
       'Table lacks CBO Statistics.',
       CASE
         WHEN '^^is_ebs.' = 'Y' THEN
           'Consider gathering table statistics using FND_STATS.GATHER_TABLE_STATS or coe_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.156968.1">156968.1</a>.'
         WHEN '^^is_siebel.' = 'Y' THEN
           'If table has more than 15 rows consider gathering table statistics using coe_siebel_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.781927.1">781927.1</a>.'
         WHEN '^^is_psft.' = 'Y' THEN
           'Consider gathering table statistics using pscbo_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.1322888.1">1322888.1</a>.'
         ELSE
           'Consider gathering table statistics using DBMS_STATS.GATHER_TABLE_STATS.'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.465787.1">465787.1</a>.'
         END
  FROM plan_table pt,
       dba_tables t
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.temporary = 'N'
   AND (t.last_analyzed IS NULL OR t.num_rows IS NULL);

-- no rows
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE, 'TABLE', SYSTIMESTAMP, pt.object_owner||'.'||pt.object_name,
       'Number of rows equal to zero according to table''s CBO statistics.',
       CASE
         WHEN t.temporary = 'Y' THEN
           'Consider deleting table statistics on this GTT using DBMS_STATS.DELETE_TABLE_STATS.'
         WHEN '^^is_ebs.' = 'Y' THEN
           'If this table has rows consider gathering table statistics using FND_STATS.GATHER_TABLE_STATS or coe_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.156968.1">156968.1</a>.'
         WHEN '^^is_siebel.' = 'Y' THEN
           'If table has less than 15 rows consider deleting table statistics using DBMS_STATS.DELETE_TABLE_STATS,<br>'||CHR(10)||
           'else gathering table statistics using coe_siebel_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.781927.1">781927.1</a>.'
         WHEN '^^is_psft.' = 'Y' THEN
           'If this table has rows consider gathering table statistics using pscbo_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.1322888.1">1322888.1</a>.'
         ELSE
           'Consider gathering table statistics using DBMS_STATS.GATHER_TABLE_STATS.'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.465787.1">465787.1</a>.'
         END
  FROM plan_table pt,
       dba_tables t
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.num_rows = 0;

-- siebel small tables with CBO statistics
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE, 'TABLE', SYSTIMESTAMP, pt.object_owner||'.'||pt.object_name,
       'Small table with CBO statistics.',
       'Consider deleting table statistics on this small table using DBMS_STATS.DELETE_TABLE_STATS.<br>'||CHR(10)||
       'See <a target="MOS" href="^^doc_link.781927.1">781927.1</a>.'
  FROM plan_table pt,
       dba_tables t
 WHERE '^^is_siebel.' = 'Y'
   AND pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.num_rows < 15;

-- small sample size
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE, 'TABLE', SYSTIMESTAMP, v.object_owner||'.'||v.object_name,
       'Sample size of '||v.sample_size||' rows may be too small for table with '||v.num_rows||' rows.',
       'Sample percent used was:'||TRIM(TO_CHAR(ROUND(v.ratio * 100, 2), '99999990D00'))||'%.<br>'||CHR(10)||
       'Consider gathering better quality table statistics with a sample size of '||ROUND(v.factor * 100)||'%.'
  FROM (
SELECT pt.object_owner,
       pt.object_name,
       t.num_rows,
       t.sample_size,
       (t.sample_size / t.num_rows) ratio,
       CASE
         WHEN t.num_rows < 1e6 THEN -- up to 1M then 100%
           1
         WHEN t.num_rows < 1e7 THEN -- up to 10M then 30%
           3/10
         WHEN t.num_rows < 1e8 THEN -- up to 100M then 10%
           1/10
         WHEN t.num_rows < 1e9 THEN -- up to 1B then 3%
           3/100
         ELSE -- more than 1B then 1%
           1/100
         END factor
  FROM plan_table pt,
       dba_tables t
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.num_rows > 0
   AND t.sample_size > 0
   AND t.last_analyzed IS NOT NULL ) v
 WHERE v.ratio < (9/10) * v.factor;

-- old stats
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE, 'TABLE', SYSTIMESTAMP, v.object_owner||'.'||v.object_name,
       'Table CBO statistics are '||ROUND(SYSDATE - v.last_analyzed)||' days old: '||TO_CHAR(v.last_analyzed, 'YYYY-MM-DD/HH24:MI:SS')||'.',
       'Consider gathering fresh table statistics with a sample size of '||ROUND(v.factor * 100)||'%.<br>'||CHR(10)||
       'Old statistics could contain low/high values for which a predicate may be out of range, producing then a poor plan.'
  FROM (
SELECT pt.object_owner,
       pt.object_name,
       t.last_analyzed,
       t.num_rows,
       t.sample_size,
       (t.sample_size / t.num_rows) ratio,
       CASE
         WHEN t.num_rows < 1e6 THEN -- up to 1M then 100%
           1
         WHEN t.num_rows < 1e7 THEN -- up to 10M then 30%
           3/10
         WHEN t.num_rows < 1e8 THEN -- up to 100M then 10%
           1/10
         WHEN t.num_rows < 1e9 THEN -- up to 1B then 3%
           3/100
         ELSE -- more than 1B then 1%
           1/100
         END factor
  FROM plan_table pt,
       dba_tables t
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.num_rows > 0
   AND t.sample_size > 0
   AND t.last_analyzed IS NOT NULL ) v
 WHERE v.last_analyzed < SYSDATE - 49
    OR (v.num_rows BETWEEN 0 AND 1e6 AND v.last_analyzed < SYSDATE - 21)
    OR (v.num_rows BETWEEN 1e6 AND 1e7 AND v.last_analyzed < SYSDATE - 28)
    OR (v.num_rows BETWEEN 1e7 AND 1e8 AND v.last_analyzed < SYSDATE - 35)
    OR (v.num_rows BETWEEN 1e8 AND 1e9 AND v.last_analyzed < SYSDATE - 42);


-- extended statistics
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE, 'TABLE', SYSTIMESTAMP, pt.object_owner||'.'||pt.object_name,
       'Table has '||COUNT(*)||' CBO statistics extension(s).',
       'Review table statistics extensions. Extensions can be used for expressions or column groups.<br>'||CHR(10)||
       'If your SQL contain matching predicates these extensions can influence the CBO.'
  FROM plan_table pt,
       dba_stat_extensions e
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = e.owner
   AND pt.object_name = e.table_name
 GROUP BY
       pt.object_owner,
       pt.object_name;

-- columns with no stats
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE, 'TABLE', SYSTIMESTAMP, pt.object_owner||'.'||pt.object_name,
       'Contains '||COUNT(*)||' column(s) with missing CBO statistics.',
       CASE
         WHEN '^^is_ebs.' = 'Y' THEN
           'Consider gathering table statistics using FND_STATS.GATHER_TABLE_STATS or coe_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.156968.1">156968.1</a>.'
         WHEN '^^is_siebel.' = 'Y' THEN
           'If table has more than 15 rows consider gathering table statistics using coe_siebel_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.781927.1">781927.1</a>.'
         WHEN '^^is_psft.' = 'Y' THEN
           'Consider gathering table statistics using pscbo_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.1322888.1">1322888.1</a>.'
         ELSE
           'Consider gathering table statistics using DBMS_STATS.GATHER_TABLE_STATS.'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.465787.1">465787.1</a>.'
         END
  FROM plan_table pt,
       dba_tables t,
       dba_tab_cols c
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.num_rows > 0
   AND t.last_analyzed IS NOT NULL
   AND pt.object_owner = c.owner
   AND pt.object_name = c.table_name
   AND c.last_analyzed IS NULL
 GROUP BY
       pt.object_owner,
       pt.object_name;

-- columns missing low/high values
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE, 'TABLE', SYSTIMESTAMP, pt.object_owner||'.'||pt.object_name,
       'Contains '||COUNT(*)||' column(s) with null low/high values.',
       'CBO cannot compute correct selectivity with these column statistics missing.<br>'||CHR(10)||
       'You may possibly have Bug <a target="MOS" href="^^bug_link.10248781">10248781</a><br>'||CHR(10)||
       'Consider gathering statistics for this table.'
  FROM plan_table pt,
       dba_tables t,
       dba_tab_cols c
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.num_rows > 0
   AND t.last_analyzed IS NOT NULL
   AND pt.object_owner = c.owner
   AND pt.object_name = c.table_name
   AND c.last_analyzed IS NOT NULL
   AND c.num_distinct > 0
   AND (c.low_value IS NULL OR c.high_value IS NULL)
 GROUP BY
       pt.object_owner,
       pt.object_name;

-- columns with old stats
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE, 'TABLE', SYSTIMESTAMP, v.object_owner||'.'||v.object_name,
       'Table contains column(s) with outdated CBO statistics for up to '||TRUNC(ABS(v.tbl_last_analyzed - v.col_last_analyzed))||' day(s).',
       'CBO table and column statistics are inconsistent. Consider gathering statistics for this table.<br>'||CHR(10)||
       'Old statistics could contain low/high values for which a predicate may be out of range, producing then a poor plan.'
  FROM (
SELECT pt.object_owner,
       pt.object_name,
       t.last_analyzed tbl_last_analyzed,
       MIN(c.last_analyzed) col_last_analyzed
  FROM plan_table pt,
       dba_tables t,
       dba_tab_cols c
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.num_rows > 0
   AND t.last_analyzed IS NOT NULL
   AND pt.object_owner = c.owner
   AND pt.object_name = c.table_name
   AND c.last_analyzed IS NOT NULL
 GROUP BY
       pt.object_owner,
       pt.object_name,
       t.last_analyzed ) v
 WHERE ABS(v.tbl_last_analyzed - v.col_last_analyzed) > 1;

-- more nulls than rows
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE, 'TABLE', SYSTIMESTAMP, v.object_owner||'.'||v.object_name,
       'Number of nulls greater than number of rows by more than 10% in '||v.col_count||' column(s).',
       'There cannot be more rows with null value in a column than actual rows in the table.<br>'||CHR(10)||
       'Worst column shows '||v.num_nulls||' nulls while table has '||v.tbl_num_rows||' rows.<br>'||CHR(10)||
       'CBO table and column statistics are inconsistent. Consider gathering statistics for this table using a large sample size.'
  FROM (
SELECT pt.object_owner,
       pt.object_name,
       t.num_rows tbl_num_rows,
       COUNT(*) col_count,
       MAX(c.num_nulls) num_nulls
  FROM plan_table pt,
       dba_tables t,
       dba_tab_cols c
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.num_rows > 0
   AND t.last_analyzed IS NOT NULL
   AND pt.object_owner = c.owner
   AND pt.object_name = c.table_name
   AND c.num_nulls > t.num_rows
   AND (c.num_nulls - t.num_rows) > t.num_rows * 0.1
 GROUP BY
       pt.object_owner,
       pt.object_name,
       t.num_rows ) v
 WHERE v.col_count > 0;

-- more distinct values than rows
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE, 'TABLE', SYSTIMESTAMP, v.object_owner||'.'||v.object_name,
       'Number of distinct values greater than number of rows by more than 10% in '||v.col_count||' column(s).',
       'There cannot be a larger number of distinct values in a column than actual rows in the table.<br>'||CHR(10)||
       'Worst column shows '||v.num_distinct||' distinct values while table has '||v.tbl_num_rows||' rows.<br>'||CHR(10)||
       'CBO table and column statistics are inconsistent. Consider gathering statistics for this table using a large sample size.'
  FROM (
SELECT pt.object_owner,
       pt.object_name,
       t.num_rows tbl_num_rows,
       COUNT(*) col_count,
       MAX(c.num_distinct) num_distinct
  FROM plan_table pt,
       dba_tables t,
       dba_tab_cols c
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.num_rows > 0
   AND t.last_analyzed IS NOT NULL
   AND pt.object_owner = c.owner
   AND pt.object_name = c.table_name
   AND c.num_distinct > t.num_rows
   AND (c.num_distinct - t.num_rows) > t.num_rows * 0.1
 GROUP BY
       pt.object_owner,
       pt.object_name,
       t.num_rows ) v
 WHERE v.col_count > 0;

-- zero distinct values on columns with value
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE, 'TABLE', SYSTIMESTAMP, v.object_owner||'.'||v.object_name,
       'Number of distinct values is zero in at least '||v.col_count||' column(s) with value.',
       'There should not be columns with value ((num_rows - num_nulls) greater than 0) where the number of distinct values for the same column is zero.<br>'||CHR(10)||
       'Worst column shows '||(v.tbl_num_rows - v.num_nulls)||' rows with value while the number of distinct values for it is zero.<br>'||CHR(10)||
       'CBO table and column statistics are inconsistent. Consider gathering statistics for this table using a large sample size.'
  FROM (
SELECT pt.object_owner,
       pt.object_name,
       t.num_rows tbl_num_rows,
       COUNT(*) col_count,
       MIN(c.num_nulls) num_nulls
  FROM plan_table pt,
       dba_tables t,
       dba_tab_cols c
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.num_rows > 0
   AND t.last_analyzed IS NOT NULL
   AND pt.object_owner = c.owner
   AND pt.object_name = c.table_name
   AND t.num_rows > c.num_nulls
   AND c.num_distinct = 0
   AND (t.num_rows - c.num_nulls) > t.num_rows * 0.1
 GROUP BY
       pt.object_owner,
       pt.object_name,
       t.num_rows ) v
 WHERE v.col_count > 0;

 -- 9885553 incorrect NDV in long char column with histogram
 INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
 SELECT :E_TABLE, 'TABLE', SYSTIMESTAMP, v.object_owner||'.'||v.object_name,
        'Table contains '||v.col_count||' long CHAR column(s) with Histogram. Number of distinct values (NDV) could be incorrect.',
        'Possible Bug <a target="MOS" href="^^bug_link.9885553">9885553</a>.<br>'||CHR(10)||
        'When building histogram for a varchar column that is long, we only use its first 32 characters.<br>'||CHR(10)||
        'Two distinct values that share the same first 32 characters are deemed the same in the histogram.<br>'||CHR(10)||
        'Therefore the NDV derived from the histogram is inaccurate.'||CHR(10)||
        'If NDV is wrong then drop the Histogram.'
   FROM (
 SELECT pt.object_owner,
        pt.object_name,
        COUNT(*) col_count
   FROM plan_table pt,
        dba_tab_cols c
  WHERE pt.object_type = 'TABLE'
    AND pt.object_owner = c.owner
    AND pt.object_name = c.table_name
    AND c.num_distinct > 0
    AND c.data_type LIKE '%CHAR%'
    AND c.avg_col_len > 32
    AND c.histogram IN ('FREQUENCY', 'HEIGHT BALANCED')
    AND '^^rdbms_version.' < '11.2.0.3'
  GROUP BY
        pt.object_owner,
        pt.object_name ) v
  WHERE v.col_count > 0;

-- 10174050 frequency histograms with less buckets than NDV
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE, 'TABLE', SYSTIMESTAMP, v.object_owner||'.'||v.object_name,
       'Table contains '||v.col_count||' column(s) where the number of distinct values does not match the number of buckets.',
       'Review column statistics for this table and look for "Num Distinct" and "Num Buckets". If there are values missing from the frecuency histogram you may have Bug <a target="MOS" href="^^bug_link.10174050">10174050</a>.<br>'||CHR(10)||
       'If you are referencing in your predicates one of the missing values the CBO can over estimate table cardinality, and this may produce a sub-optimal plan.<br>'||CHR(10)||
       'You can either gather statistics with 100% or as a workaround: ALTER system/session "_fix_control"=''5483301:OFF'';'
  FROM (
SELECT pt.object_owner,
       pt.object_name,
       COUNT(*) col_count
  FROM plan_table pt,
       dba_tab_cols c
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = c.owner
   AND pt.object_name = c.table_name
   AND c.histogram = 'FREQUENCY'
   AND c.num_distinct <> c.num_buckets
 GROUP BY
       pt.object_owner,
       pt.object_name ) v
 WHERE v.col_count > 0;

-- frequency histogram with 1 bucket
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE, 'TABLE', SYSTIMESTAMP, v.object_owner||'.'||v.object_name,
       'Table contains '||v.col_count||' column(s) where the number of buckets is 1 for a "FREQUENCY" histogram.',
       'Review column statistics for this table and look for "Num Buckets" and "Histogram". Possible Bugs '||
       '<a target="MOS" href="^^bug_link.1386119">1386119</a>, '||
       '<a target="MOS" href="^^bug_link.4406309">4406309</a>, '||
       '<a target="MOS" href="^^bug_link.4495422">4495422</a>, '||
       '<a target="MOS" href="^^bug_link.4567767">4567767</a>, '||
       '<a target="MOS" href="^^bug_link.5483301">5483301</a> or '||
       '<a target="MOS" href="^^bug_link.6082745">6082745</a>.<br>'||CHR(10)||
       'If you are referencing in your predicates one of the missing values the CBO can over estimate table cardinality, and this may produce a sub-optimal plan.<br>'||CHR(10)||
       'You can either gather statistics with 100% or as a workaround: ALTER system/session "_fix_control"=''5483301:OFF'';'
  FROM (
SELECT pt.object_owner,
       pt.object_name,
       COUNT(*) col_count
  FROM plan_table pt,
       dba_tab_cols c
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = c.owner
   AND pt.object_name = c.table_name
   AND c.histogram = 'FREQUENCY'
   AND c.num_buckets = 1
 GROUP BY
       pt.object_owner,
       pt.object_name ) v
 WHERE v.col_count > 0;

-- height balanced histogram with no popular values
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE, 'TABLE', SYSTIMESTAMP, v.object_owner||'.'||v.object_name,
       'Table contains '||v.col_count||' column(s) with no popular values on a "HEIGHT BALANCED" histogram.',
       'A Height-balanced histogram with no popular values is not helpful nor desired. Consider dropping this histogram by collecting new CBO statistics while using METHOD_OPT with SIZE 1.'
  FROM (
SELECT pt.object_owner,
       pt.object_name,
       COUNT(*) col_count
  FROM plan_table pt,
       dba_tab_cols c
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = c.owner
   AND pt.object_name = c.table_name
   AND c.histogram = 'HEIGHT BALANCED'
   AND c.num_buckets > 253
   AND (SELECT COUNT(*)
          FROM dba_tab_histograms h
         WHERE h.owner = c.owner
           AND h.table_name = c.table_name
           AND h.column_name = c.column_name) > 253
 GROUP BY
       pt.object_owner,
       pt.object_name ) v
 WHERE v.col_count > 0;

-- analyze 236935.1
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE, 'TABLE', SYSTIMESTAMP, pt.object_owner||'.'||pt.object_name,
       'CBO statistics were gathered using deprecated ANALYZE command.',
       CASE
         WHEN '^^is_ebs.' = 'Y' THEN
           'When ANALYZE is used on a non-partitioned table, the global_stats column of the table statistics receives a value of ''NO''.<br>'||CHR(10)||
           'Consider gathering statistics using FND_STATS instead.<br>'||CHR(10)||
           'See also <a target="MOS" href="^^doc_link.156968.1">156968.1</a>.'
         WHEN '^^is_siebel.' = 'Y' THEN
           'When ANALYZE is used on a non-partitioned table, the global_stats column of the table statistics receives a value of ''NO''.<br>'||CHR(10)||
           'Consider gathering statistics using coe_siebel_stats.sql instead.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.781927.1">781927.1</a>.'
         WHEN '^^is_psft.' = 'Y' THEN
           'When ANALYZE is used on a non-partitioned table, the global_stats column of the table statistics receives a value of ''NO''.<br>'||CHR(10)||
           'Consider gathering statistics using pscbo_stats.sql instead.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.1322888.1">1322888.1</a>.'
         ELSE
           'When ANALYZE is used on a non-partitioned table, the global_stats column of the table statistics receives a value of ''NO''.<br>'||CHR(10)||
           'Consider gathering statistics using DBMS_STATS instead.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.465787.1">465787.1</a>.'
         END
  FROM plan_table pt,
       dba_tables t
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.num_rows > 0
   AND t.last_analyzed IS NOT NULL
   AND t.partitioned = 'NO'
   AND t.global_stats = 'NO';

-- derived stats
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE, 'TABLE', SYSTIMESTAMP, pt.object_owner||'.'||pt.object_name,
       'CBO statistics are being derived by aggregation from lower level objects.',
       CASE
         WHEN '^^is_ebs.' = 'Y' THEN
           'When statistics are derived by aggregation from lower level objects, the global_stats column of the table statistics receives a value of ''NO''.<br>'||CHR(10)||
           'Consider gathering statistics using FND_STATS instead.<br>'||CHR(10)||
           'See also <a target="MOS" href="^^doc_link.156968.1">156968.1</a>.'
         WHEN '^^is_siebel.' = 'Y' THEN
           'When statistics are derived by aggregation from lower level objects, the global_stats column of the table statistics receives a value of ''NO''.<br>'||CHR(10)||
           'Consider gathering statistics using coe_siebel_stats.sql instead.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.781927.1">781927.1</a>.'
         WHEN '^^is_psft.' = 'Y' THEN
           'When statistics are derived by aggregation from lower level objects, the global_stats column of the table statistics receives a value of ''NO''.<br>'||CHR(10)||
           'Consider gathering statistics using pscbo_stats.sql instead.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.1322888.1">1322888.1</a>.'
         ELSE
           'When statistics are derived by aggregation from lower level objects, the global_stats column of the table statistics receives a value of ''NO''.<br>'||CHR(10)||
           'Consider gathering statistics using DBMS_STATS instead.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.465787.1">465787.1</a>.'
         END
  FROM plan_table pt,
       dba_tables t
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.num_rows > 0
   AND t.last_analyzed IS NOT NULL
   AND t.partitioned = 'YES'
   AND t.global_stats = 'NO';

-- Bug 3620168
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE, 'TABLE', SYSTIMESTAMP, pt.object_owner||'.'||pt.object_name,
       'Average row length is 100.',
       'Possible Bug <a target="MOS" href="^^bug_link.3620168">3620168</a>3620168.<br>'||CHR(10)||
       'Consider gathering table statistics for this table using METHOD_OPT => FOR ALL COLUMNS...'
  FROM plan_table pt,
       dba_tables t
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.avg_row_len = 100;

-- tables with stale statistics
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE, 'TABLE', SYSTIMESTAMP, pt.object_owner||'.'||pt.object_name,
       'Table has stale statistics.',
       CASE
         WHEN '^^is_ebs.' = 'Y' THEN
           'Consider gathering table statistics using FND_STATS.GATHER_TABLE_STATS or coe_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.156968.1">156968.1</a>.'
         WHEN '^^is_siebel.' = 'Y' THEN
           'If table has more than 15 rows consider gathering table statistics using coe_siebel_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.781927.1">781927.1</a>.'
         WHEN '^^is_psft.' = 'Y' THEN
           'Consider gathering table statistics using pscbo_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.1322888.1">1322888.1</a>.'
         ELSE
           'Consider gathering table statistics using DBMS_STATS.GATHER_TABLE_STATS.'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.465787.1">465787.1</a>.'
         END
  FROM plan_table pt,
       dba_tab_statistics t
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.object_type = 'TABLE'
   AND t.stale_stats = 'YES';

-- tables with locked statistics
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE, 'TABLE', SYSTIMESTAMP, pt.object_owner||'.'||pt.object_name,
       'Table has locked statistics.',
       'Review table statistics.'
  FROM plan_table pt,
       dba_tab_statistics t
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.object_type = 'TABLE'
   AND t.stattype_locked IN ('ALL', 'DATA');

-- sql with policies as per dba_policies
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE, 'DBA_POLICIES', SYSTIMESTAMP, pt.object_owner||'.'||pt.object_name,
       'Virtual Private Database. There is one or more policies affecting this table.',
       'Review Execution Plans and look for their injected predicates.'
  FROM plan_table pt,
       dba_policies p
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = p.object_owner
   AND pt.object_name = p.object_name
 GROUP BY
       pt.object_owner,
       pt.object_name
HAVING COUNT(*) > 0
 ORDER BY
       pt.object_owner,
       pt.object_name;

-- sql with policies as per dba_audit_policies
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE, 'DBA_AUDIT_POLICIES', SYSTIMESTAMP, pt.object_owner||'.'||pt.object_name,
       'Fine-Grained Auditing. There is one or more audit policies affecting this table.',
       'Review Execution Plans and look for their injected predicates.'
  FROM plan_table pt,
       dba_audit_policies p
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = p.object_schema
   AND pt.object_name = p.object_name
 GROUP BY
       pt.object_owner,
       pt.object_name
HAVING COUNT(*) > 0
 ORDER BY
       pt.object_owner,
       pt.object_name;

-- table partitions with no stats
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE_PART, 'TABLE PARTITION', SYSTIMESTAMP, v.object_owner||'.'||v.object_name,
       v.no_stats||' out of '||v.par_count||' partition(s) lack(s) CBO statistics.',
       CASE
         WHEN '^^is_ebs.' = 'Y' THEN
           'Consider gathering statistics using FND_STATS.GATHER_TABLE_STATISTICS.<br>'||CHR(10)||
           'See also <a target="MOS" href="^^doc_link.156968.1">156968.1</a>.'
         WHEN '^^is_siebel.' = 'Y' THEN
           'Consider gathering statistics using coe_siebel_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.781927.1">781927.1</a>.'
         WHEN '^^is_psft.' = 'Y' THEN
           'Consider gathering statistics using pscbo_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.1322888.1">1322888.1</a>.'
         ELSE
           'Consider gathering statistics using DBMS_STATS.GATHER_TABLE_STATISTICS.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.465787.1">465787.1</a>.'
         END
  FROM (
SELECT pt.object_owner,
       pt.object_name,
       COUNT(*) par_count,
       SUM(CASE WHEN p.last_analyzed IS NULL OR p.num_rows IS NULL THEN 1 ELSE 0 END) no_stats
  FROM plan_table pt,
       dba_tables t,
       dba_tab_partitions p
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.partitioned = 'YES'
   AND t.num_rows > 0
   AND t.last_analyzed IS NOT NULL
   AND pt.object_owner = p.table_owner
   AND pt.object_name = p.table_name
 GROUP BY
       pt.object_owner,
       pt.object_name ) v
 WHERE v.no_stats > 0;

-- table partitions where num rows = 0
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE_PART, 'TABLE PARTITION', SYSTIMESTAMP, v.object_owner||'.'||v.object_name,
       v.num_rows_zero||' out of '||v.par_count||' partition(s) with number of rows equal to zero according to partition''s CBO statistics.',
       'If these table partitions are not empty, consider gathering table statistics using GRANULARITY=>GLOBAL AND PARTITION.'
  FROM (
SELECT pt.object_owner,
       pt.object_name,
       COUNT(*) par_count,
       SUM(CASE WHEN p.num_rows = 0 THEN 1 ELSE 0 END) num_rows_zero
  FROM plan_table pt,
       dba_tables t,
       dba_tab_partitions p
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.partitioned = 'YES'
   AND t.num_rows > 0
   AND t.last_analyzed IS NOT NULL
   AND pt.object_owner = p.table_owner
   AND pt.object_name = p.table_name
 GROUP BY
       pt.object_owner,
       pt.object_name ) v
 WHERE v.num_rows_zero > 0;

-- table partitions with outdated stats
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE_PART, 'TABLE PARTITION', SYSTIMESTAMP, v.object_owner||'.'||v.object_name,
       'Table contains partition(s) with table/partition CBO statistics out of sync for up to '||TRUNC(ABS(v.tbl_last_analyzed - v.par_last_analyzed))||' day(s).',
       'Table and partition statistics were gathered up to '||TRUNC(ABS(v.tbl_last_analyzed - v.par_last_analyzed))||' day(s) appart, so they do not offer a consistent view to the CBO.<br>'||CHR(10)||
       'Consider re-gathering table statistics using GRANULARITY=>GLOBAL AND PARTITION.'
  FROM (
SELECT pt.object_owner,
       pt.object_name,
       t.last_analyzed tbl_last_analyzed,
       COUNT(*) par_count,
       MIN(p.last_analyzed) par_last_analyzed
  FROM plan_table pt,
       dba_tables t,
       dba_tab_partitions p
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.partitioned = 'YES'
   AND t.num_rows > 0
   AND t.last_analyzed IS NOT NULL
   AND pt.object_owner = p.table_owner
   AND pt.object_name = p.table_name
 GROUP BY
       pt.object_owner,
       pt.object_name,
       t.last_analyzed ) v
 WHERE ABS(v.tbl_last_analyzed - v.par_last_analyzed) > 1;

-- partitions with no column stats
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE_PART, 'TABLE PARTITION', SYSTIMESTAMP, v.object_owner||'.'||v.object_name,
       v.no_stats||' column(s) lack(s) partition level CBO statistics.',
       CASE
         WHEN '^^is_ebs.' = 'Y' THEN
           'Consider gathering statistics using FND_STATS.GATHER_TABLE_STATISTICS.<br>'||CHR(10)||
           'See also <a target="MOS" href="^^doc_link.156968.1">156968.1</a>.'
         WHEN '^^is_siebel.' = 'Y' THEN
           'Consider gathering statistics using coe_siebel_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.781927.1">781927.1</a>.'
         WHEN '^^is_psft.' = 'Y' THEN
           'Consider gathering statistics using pscbo_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.1322888.1">1322888.1</a>.'
         ELSE
           'Consider gathering statistics using DBMS_STATS.GATHER_TABLE_STATISTICS.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.465787.1">465787.1</a>.'
         END
  FROM (
SELECT pt.object_owner,
       pt.object_name,
       (SELECT COUNT(DISTINCT c.column_name)
          FROM dba_part_col_statistics c
         WHERE c.owner = pt.object_owner
           AND c.table_name = pt.object_name
           AND c.last_analyzed IS NULL) no_stats
  FROM plan_table pt,
       dba_tables t
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.partitioned = 'YES'
   AND t.num_rows > 0
   AND t.last_analyzed IS NOT NULL
 GROUP BY
       pt.object_owner,
       pt.object_name ) v
 WHERE v.no_stats > 0;

-- partition columns with outdated stats
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_TABLE_PART, 'TABLE PARTITION', SYSTIMESTAMP, v.object_owner||'.'||v.object_name,
       'Table contains column(s) with table/partition CBO statistics out of sync for up to '||TRUNC(ABS(v.tbl_last_analyzed - v.col_last_analyzed))||' day(s).',
       'Table and partition statistics were gathered up to '||TRUNC(ABS(v.tbl_last_analyzed - v.col_last_analyzed))||' day(s) appart, so they do not offer a consistent view to the CBO.<br>'||CHR(10)||
       'Consider re-gathering table statistics using GRANULARITY=>GLOBAL AND PARTITION.'
  FROM (
SELECT pt.object_owner,
       pt.object_name,
       t.last_analyzed tbl_last_analyzed,
       (SELECT MIN(c.last_analyzed)
          FROM dba_part_col_statistics c
         WHERE c.owner = pt.object_owner
           AND c.table_name = pt.object_name
           AND c.last_analyzed IS NOT NULL) col_last_analyzed
  FROM plan_table pt,
       dba_tables t
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.partitioned = 'YES'
   AND t.num_rows > 0
   AND t.last_analyzed IS NOT NULL
 GROUP BY
       pt.object_owner,
       pt.object_name,
       t.last_analyzed ) v
 WHERE ABS(v.tbl_last_analyzed - v.col_last_analyzed) > 1;

/* -------------------------
 *
 * index hc
 *
 * ------------------------- */

-- no stats
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_INDEX, 'INDEX', SYSTIMESTAMP, i.owner||'.'||i.index_name,
       'Index lacks CBO Statistics.',
       CASE
         WHEN '^^is_ebs.' = 'Y' THEN
           'Consider gathering table and index statistics using FND_STATS.GATHER_TABLE_STATS or coe_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.156968.1">156968.1</a>.'
         WHEN '^^is_siebel.' = 'Y' THEN
           'If table has more than 15 rows consider gathering table and index statistics using coe_siebel_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.781927.1">781927.1</a>.'
         WHEN '^^is_psft.' = 'Y' THEN
           'Consider gathering table and index statistics using pscbo_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.1322888.1">1322888.1</a>.'
         ELSE
           'Consider gathering table and index statistics using DBMS_STATS.GATHER_TABLE_STATS.'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.465787.1">465787.1</a>.'
         END
  FROM plan_table pt,
       dba_tables t,
       dba_indexes i
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.last_analyzed IS NOT NULL
   AND t.num_rows > 0
   AND t.temporary = 'N'
   AND pt.object_owner = i.table_owner
   AND pt.object_name = i.table_name
   AND i.index_type NOT IN ('DOMAIN', 'LOB', 'FUNCTION-BASED DOMAIN')
   AND (i.last_analyzed IS NULL OR i.num_rows IS NULL);

-- more rows in index than its table
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_INDEX, 'INDEX', SYSTIMESTAMP, i.owner||'.'||i.index_name,
       'Index appears to have more rows ('||i.num_rows||') than its table ('||t.num_rows||') by '||ROUND(100 * (i.num_rows - t.num_rows) / t.num_rows)||'%.',
       CASE
         WHEN '^^is_ebs.' = 'Y' THEN
           'Consider gathering table and index statistics using FND_STATS.GATHER_TABLE_STATS or coe_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.156968.1">156968.1</a>.'
         WHEN '^^is_siebel.' = 'Y' THEN
           'If table has more than 15 rows consider gathering table and index statistics using coe_siebel_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.781927.1">781927.1</a>.'
         WHEN '^^is_psft.' = 'Y' THEN
           'Consider gathering table and index statistics using pscbo_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.1322888.1">1322888.1</a>.'
         ELSE
           'Consider gathering table and index statistics using DBMS_STATS.GATHER_TABLE_STATS.'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.465787.1">465787.1</a>.'
         END
  FROM plan_table pt,
       dba_tables t,
       dba_indexes i
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.last_analyzed IS NOT NULL
   AND t.num_rows > 0
   AND t.temporary = 'N'
   AND pt.object_owner = i.table_owner
   AND pt.object_name = i.table_name
   AND i.num_rows > t.num_rows
   AND (i.num_rows - t.num_rows) > t.num_rows * 0.1;

-- clustering factor > rows in table
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_INDEX, 'INDEX', SYSTIMESTAMP, i.owner||'.'||i.index_name,
       'Clustering factor of '||i.clustering_factor||' is larger than number of rows in its table ('||t.num_rows||') by more than '||ROUND(100 * (i.clustering_factor - t.num_rows) / t.num_rows)||'%.',
       CASE
         WHEN '^^is_ebs.' = 'Y' THEN
           'Consider gathering table and index statistics using FND_STATS.GATHER_TABLE_STATS or coe_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.156968.1">156968.1</a>.'
         WHEN '^^is_siebel.' = 'Y' THEN
           'If table has more than 15 rows consider gathering table and index statistics using coe_siebel_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.781927.1">781927.1</a>.'
         WHEN '^^is_psft.' = 'Y' THEN
           'Consider gathering table and index statistics using pscbo_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.1322888.1">1322888.1</a>.'
         ELSE
           'Consider gathering table and index statistics using DBMS_STATS.GATHER_TABLE_STATS.'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.465787.1">465787.1</a>.'
         END
  FROM plan_table pt,
       dba_tables t,
       dba_indexes i
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.last_analyzed IS NOT NULL
   AND t.temporary = 'N'
   AND pt.object_owner = i.table_owner
   AND pt.object_name = i.table_name
   AND i.clustering_factor > t.num_rows
   AND (i.clustering_factor - t.num_rows) > t.num_rows * 0.1;

-- stats on zero while columns have value
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_INDEX, 'INDEX', SYSTIMESTAMP, i.owner||'.'||i.index_name,
       'Index CBO statistics on 0 with indexed columns with value.',
       'This index with zeroes in CBO index statistics contains columns for which there are values, so the index should not have statistics in zeroes.<br>'||CHR(10)||
       'Possible Bug <a target="MOS" href="^^bug_link.4055596">4055596</a>. Consider gathering table statistics, or DROP and RE-CREATE index.'
  FROM plan_table pt,
       dba_tables t,
       dba_indexes i
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.last_analyzed IS NOT NULL
   AND t.num_rows > 0
   AND t.temporary = 'N'
   AND pt.object_owner = i.table_owner
   AND pt.object_name = i.table_name
   AND i.index_type NOT IN ('DOMAIN', 'LOB', 'FUNCTION-BASED DOMAIN')
   AND i.num_rows = 0
   AND i.distinct_keys = 0
   AND i.leaf_blocks = 0
   AND i.blevel = 0
   AND EXISTS (
SELECT NULL
  FROM dba_ind_columns ic,
       dba_tab_cols tc
 WHERE ic.index_owner = i.owner
   AND ic.index_name = i.index_name
   AND ic.table_owner = tc.owner
   AND ic.table_name = tc.table_name
   AND ic.column_name = tc.column_name
   AND t.num_rows > tc.num_nulls
   AND (t.num_rows - tc.num_nulls) > t.num_rows * 0.1);

-- table/index stats out of sync
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_INDEX, 'INDEX', SYSTIMESTAMP, i.owner||'.'||i.index_name,
       'Table/Index CBO statistics out of sync.',
       CASE
         WHEN '^^is_ebs.' = 'Y' THEN
           'Table and index statistics were gathered '||TRUNC(ABS(t.last_analyzed - i.last_analyzed))||' day(s) appart,<br>'||CHR(10)||
           'so they do not offer a consistent view to the CBO.<br>'||CHR(10)||
           'Consider gathering table and index statistics using FND_STATS.GATHER_TABLE_STATS or coe_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.156968.1">156968.1</a>.'
         WHEN '^^is_siebel.' = 'Y' THEN
           'Table and index statistics were gathered '||TRUNC(ABS(t.last_analyzed - i.last_analyzed))||' day(s) appart,<br>'||CHR(10)||
           'so they do not offer a consistent view to the CBO.<br>'||CHR(10)||
           'If table has more than 15 rows consider gathering table and index statistics using coe_siebel_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.781927.1">781927.1</a>.'
         WHEN '^^is_psft.' = 'Y' THEN
           'Table and index statistics were gathered '||TRUNC(ABS(t.last_analyzed - i.last_analyzed))||' day(s) appart,<br>'||CHR(10)||
           'so they do not offer a consistent view to the CBO.<br>'||CHR(10)||
           'Consider gathering table and index statistics using pscbo_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.1322888.1">1322888.1</a>.'
         ELSE
           'Table and index statistics were gathered '||TRUNC(ABS(t.last_analyzed - i.last_analyzed))||' day(s) appart,<br>'||CHR(10)||
           'so they do not offer a consistent view to the CBO.<br>'||CHR(10)||
           'Consider gathering table and index statistics using DBMS_STATS.GATHER_TABLE_STATS using CASCADE=>TRUE.'||CHR(10)||
           'See also <a target="MOS" href="^^doc_link.465787.1">465787.1</a>.'
         END
  FROM plan_table pt,
       dba_tables t,
       dba_indexes i
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.last_analyzed IS NOT NULL
   AND t.num_rows > 0
   AND t.temporary = 'N'
   AND pt.object_owner = i.table_owner
   AND pt.object_name = i.table_name
   AND i.index_type NOT IN ('DOMAIN', 'LOB', 'FUNCTION-BASED DOMAIN')
   AND i.last_analyzed IS NOT NULL
   AND ABS(t.last_analyzed - i.last_analyzed) > 1;

-- analyze 236935.1
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_INDEX, 'INDEX', SYSTIMESTAMP, i.owner||'.'||i.index_name,
       'CBO statistics were either gathered using deprecated ANALYZE command or derived by aggregation from lower level objects.',
       CASE
         WHEN '^^is_ebs.' = 'Y' THEN
           'When ANALYZE is used on a non-partitioned index, the global_stats column of the index statistics receives a value of ''NO''.<br>'||CHR(10)||
           'Consider gathering statistics using FND_STATS instead.<br>'||CHR(10)||
           'See also <a target="MOS" href="^^doc_link.156968.1">156968.1</a>.'
         WHEN '^^is_siebel.' = 'Y' THEN
           'When ANALYZE is used on a non-partitioned index, the global_stats column of the index statistics receives a value of ''NO''.<br>'||CHR(10)||
           'Consider gathering statistics using coe_siebel_stats.sql instead.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.781927.1">781927.1</a>.'
         WHEN '^^is_psft.' = 'Y' THEN
           'When ANALYZE is used on a non-partitioned index, the global_stats column of the index statistics receives a value of ''NO''.<br>'||CHR(10)||
           'Consider gathering statistics using pscbo_stats.sql instead.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.1322888.1">1322888.1</a>.'
         ELSE
           'When ANALYZE is used on a non-partitioned index, the global_stats column of the index statistics receives a value of ''NO''.<br>'||CHR(10)||
           'Consider gathering statistics using DBMS_STATS instead.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.465787.1">465787.1</a>.'
         END
  FROM plan_table pt,
       dba_indexes i
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = i.table_owner
   AND pt.object_name = i.table_name
   AND i.index_type = 'NORMAL'
   AND i.last_analyzed IS NOT NULL
   AND i.partitioned = 'NO'
   AND i.global_stats = 'NO';

-- derived stats
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_INDEX, 'INDEX', SYSTIMESTAMP, i.owner||'.'||i.index_name,
       'CBO statistics were either gathered using deprecated ANALYZE command or derived by aggregation from lower level objects.',
       CASE
         WHEN '^^is_ebs.' = 'Y' THEN
           'When statistics are derived by aggregation from lower level objects, the global_stats column of the index statistics receives a value of ''NO''.<br>'||CHR(10)||
           'Consider gathering statistics using FND_STATS instead.<br>'||CHR(10)||
           'See also <a target="MOS" href="^^doc_link.156968.1">156968.1</a>.'
         WHEN '^^is_siebel.' = 'Y' THEN
           'When statistics are derived by aggregation from lower level objects, the global_stats column of the index statistics receives a value of ''NO''.<br>'||CHR(10)||
           'Consider gathering statistics using coe_siebel_stats.sql instead.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.781927.1">781927.1</a>.'
         WHEN '^^is_psft.' = 'Y' THEN
           'When statistics are derived by aggregation from lower level objects, the global_stats column of the index statistics receives a value of ''NO''.<br>'||CHR(10)||
           'Consider gathering statistics using pscbo_stats.sql instead.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.1322888.1">1322888.1</a>.'
         ELSE
           'When statistics are derived by aggregation from lower level objects, the global_stats column of the index statistics receives a value of ''NO''.<br>'||CHR(10)||
           'Consider gathering statistics using DBMS_STATS instead.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.465787.1">465787.1</a>.'
         END
  FROM plan_table pt,
       dba_indexes i
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = i.table_owner
   AND pt.object_name = i.table_name
   AND i.index_type = 'NORMAL'
   AND i.last_analyzed IS NOT NULL
   AND i.partitioned = 'YES'
   AND i.global_stats = 'NO';

-- unusable indexes
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_INDEX, 'INDEX', SYSTIMESTAMP, i.owner||'.'||i.index_name,
       'Unusable index.',
       'Unusable indexes cannot be used by the CBO. This may cause Execution Plans to change.'
  FROM plan_table pt,
       dba_indexes i
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = i.table_owner
   AND pt.object_name = i.table_name
   AND i.partitioned = 'NO'
   AND i.status = 'UNUSABLE';

-- unusable index partitions
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_INDEX_PART, 'INDEX PARTITION', SYSTIMESTAMP, v.object_owner||'.'||v.object_name,
       'Index with '||v.par_count||' unusable partition(s).',
       'Unusable index partitions cannot be used by the CBO. This may cause Execution Plans to change.'
  FROM (
SELECT pt.object_owner,
       pt.object_name,
       COUNT(*) par_count
  FROM plan_table pt,
       dba_indexes i,
       dba_ind_partitions p
 WHERE pt.object_type = 'INDEX'
   AND pt.object_owner = i.owner
   AND pt.object_name = i.index_name
   AND i.partitioned = 'YES'
   AND pt.object_owner = p.index_owner
   AND pt.object_name = p.index_name
   AND p.status = 'UNUSABLE'
 GROUP BY
       pt.object_owner,
       pt.object_name ) v
 WHERE v.par_count > 0;

-- unusable index subpartitions
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_INDEX_PART, 'INDEX SUBPARTITION', SYSTIMESTAMP, v.object_owner||'.'||v.object_name,
       'Index with '||v.par_count||' unusable subpartition(s).',
       'Unusable index subpartitions cannot be used by the CBO. This may cause Execution Plans to change.'
  FROM (
SELECT pt.object_owner,
       pt.object_name,
       COUNT(*) par_count
  FROM plan_table pt,
       dba_indexes i,
       dba_ind_subpartitions sp
 WHERE pt.object_type = 'INDEX'
   AND pt.object_owner = i.owner
   AND pt.object_name = i.index_name
   AND i.partitioned = 'YES'
   AND pt.object_owner = sp.index_owner
   AND pt.object_name = sp.index_name
   AND sp.status = 'UNUSABLE'
 GROUP BY
       pt.object_owner,
       pt.object_name ) v
 WHERE v.par_count > 0;

-- invisible indexes
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_INDEX, 'INDEX', SYSTIMESTAMP, i.owner||'.'||i.index_name,
       'Invisible index.',
       'Invisible indexes cannot be used by the CBO. This may cause Execution Plans to change.'
  FROM plan_table pt,
       dba_indexes i
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = i.table_owner
   AND pt.object_name = i.table_name
   AND i.visibility = 'INVISIBLE';

-- no column stats in single-column index
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_1COL_INDEX, '1-COL INDEX', SYSTIMESTAMP, i.index_name||'('||ic.column_name||')',
       'Lack of CBO statistics in column of this single-column index.',
       'To avoid CBO guessed statistics on this indexed column, gather table statistics and include this column in METHOD_OPT used.'
  FROM plan_table pt,
       dba_indexes i,
       dba_ind_columns ic,
       dba_tab_cols tc
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = i.table_owner
   AND pt.object_name = i.table_name
   AND i.index_type NOT IN ('DOMAIN', 'LOB', 'FUNCTION-BASED DOMAIN')
   AND i.last_analyzed IS NOT NULL
   AND i.num_rows > 0
   AND i.owner = ic.index_owner
   AND i.index_name = ic.index_name
   AND ic.column_position = 1
   AND ic.table_owner = tc.owner
   AND ic.table_name = tc.table_name
   AND ic.column_name = tc.column_name
   AND (tc.last_analyzed IS NULL OR tc.num_distinct IS NULL OR tc.num_nulls IS NULL)
   AND NOT EXISTS (
SELECT NULL
  FROM dba_ind_columns ic2
 WHERE ic2.index_owner = i.owner
   AND ic2.index_name = i.index_name
   AND ic2.column_position = 2 );

-- NDV on column > num_rows in single-column index
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_1COL_INDEX, '1-COL INDEX', SYSTIMESTAMP, i.index_name||'('||ic.column_name||')',
       'Single-column index with number of distinct values greater than number of rows by '||ROUND(100 * (tc.num_distinct - i.num_rows) / i.num_rows)||'%.',
       'There cannot be a larger number of distinct values ('||tc.num_distinct||') in a column than actual rows ('||i.num_rows||') in the index.<br>'||CHR(10)||
       'This is an inconsistency on this indexed column. Consider gathering table statistics using a large sample size.'
  FROM plan_table pt,
       dba_indexes i,
       dba_ind_columns ic,
       dba_tab_cols tc
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = i.table_owner
   AND pt.object_name = i.table_name
   AND i.index_type NOT IN ('DOMAIN', 'LOB', 'FUNCTION-BASED DOMAIN')
   AND i.last_analyzed IS NOT NULL
   AND i.num_rows > 0
   AND i.owner = ic.index_owner
   AND i.index_name = ic.index_name
   AND ic.column_position = 1
   AND ic.table_owner = tc.owner
   AND ic.table_name = tc.table_name
   AND ic.column_name = tc.column_name
   AND tc.num_distinct > i.num_rows
   AND (tc.num_distinct - i.num_rows) > i.num_rows * 0.1
   AND NOT EXISTS (
SELECT NULL
  FROM dba_ind_columns ic2
 WHERE ic2.index_owner = i.owner
   AND ic2.index_name = i.index_name
   AND ic2.column_position = 2 );

-- NDV is zero but column has values in single-column index
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_1COL_INDEX, '1-COL INDEX', SYSTIMESTAMP, i.index_name||'('||ic.column_name||')',
       'Single-column index with number of distinct value equal to zero in column with value.',
       'There should not be columns with value where the number of distinct values for the same column is zero.<br>'||CHR(10)||
       'Column has '||(i.num_rows - tc.num_nulls)||' rows with value while the number of distinct values for it is zero.<br>'||CHR(10)||
       'This is an inconsistency on this indexed column. Consider gathering table statistics using a large sample size.'
  FROM plan_table pt,
       dba_indexes i,
       dba_ind_columns ic,
       dba_tab_cols tc
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = i.table_owner
   AND pt.object_name = i.table_name
   AND i.index_type NOT IN ('DOMAIN', 'LOB', 'FUNCTION-BASED DOMAIN')
   AND i.last_analyzed IS NOT NULL
   AND i.num_rows > 0
   AND i.owner = ic.index_owner
   AND i.index_name = ic.index_name
   AND ic.column_position = 1
   AND ic.table_owner = tc.owner
   AND ic.table_name = tc.table_name
   AND ic.column_name = tc.column_name
   AND tc.num_distinct = 0
   AND i.num_rows > tc.num_nulls
   AND (i.num_rows - tc.num_nulls) > i.num_rows * 0.1
   AND NOT EXISTS (
SELECT NULL
  FROM dba_ind_columns ic2
 WHERE ic2.index_owner = i.owner
   AND ic2.index_name = i.index_name
   AND ic2.column_position = 2 );

-- Bugs 4495422 or 9885553 NDV <> NDK in single-column index
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_1COL_INDEX, '1-COL INDEX', SYSTIMESTAMP, i.index_name||'('||ic.column_name||')',
       'Number of distinct values ('||tc.num_distinct||') does not match number of distinct keys ('||i.distinct_keys||') by '||ROUND(100 * (i.distinct_keys - tc.num_distinct) / tc.num_distinct)||'%.',
       CASE
         WHEN tc.data_type LIKE '%CHAR%' AND tc.num_buckets > 1 THEN
           'Possible Bug <a target="MOS" href="^^bug_link.4495422">4495422</a> or <a target="MOS" href="^^bug_link.9885553">9885553</a>.<br>'||CHR(10)||
           'This is an inconsistency on this indexed column. Gather fresh statistics with no histograms or adjusting DISTCNT and DENSITY using SET_COLUMN_statistics APIs.'
         ELSE
           'This is an inconsistency on this indexed column. Gather fresh statistics or adjusting DISTCNT and DENSITY using SET_COLUMN_statistics APIs.'
         END
  FROM plan_table pt,
       dba_indexes i,
       dba_ind_columns ic,
       dba_tab_cols tc
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = i.table_owner
   AND pt.object_name = i.table_name
   AND i.index_type NOT IN ('DOMAIN', 'LOB', 'FUNCTION-BASED DOMAIN')
   AND i.last_analyzed IS NOT NULL
   AND i.num_rows > 0
   AND i.owner = ic.index_owner
   AND i.index_name = ic.index_name
   AND ic.column_position = 1
   AND ic.table_owner = tc.owner
   AND ic.table_name = tc.table_name
   AND ic.column_name = tc.column_name
   AND tc.num_distinct > 0
   AND i.distinct_keys > 0
   AND i.distinct_keys > tc.num_distinct
   AND (i.distinct_keys - tc.num_distinct) > tc.num_distinct * 0.1
   AND NOT EXISTS (
SELECT NULL
  FROM dba_ind_columns ic2
 WHERE ic2.index_owner = i.owner
   AND ic2.index_name = i.index_name
   AND ic2.column_position = 2 );

-- index partitions with no stats
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_INDEX_PART, 'INDEX PARTITION', SYSTIMESTAMP, v.object_owner||'.'||v.object_name,
       v.no_stats||' out of '||v.par_count||' partition(s) lack(s) CBO statistics.',
       CASE
         WHEN '^^is_ebs.' = 'Y' THEN
           'Consider gathering statistics using FND_STATS.GATHER_TABLE_STATISTICS.<br>'||CHR(10)||
           'See also <a target="MOS" href="^^doc_link.156968.1">156968.1</a>.'
         WHEN '^^is_siebel.' = 'Y' THEN
           'Consider gathering statistics using coe_siebel_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.781927.1">781927.1</a>.'
         WHEN '^^is_psft.' = 'Y' THEN
           'Consider gathering statistics using pscbo_stats.sql.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.1322888.1">1322888.1</a>.'
         ELSE
           'Consider gathering statistics using DBMS_STATS.GATHER_TABLE_STATISTICS.<br>'||CHR(10)||
           'See <a target="MOS" href="^^doc_link.465787.1">465787.1</a>.'
         END
  FROM (
SELECT pt.object_owner,
       pt.object_name,
       COUNT(*) par_count,
       SUM(CASE WHEN p.last_analyzed IS NULL OR p.num_rows IS NULL THEN 1 ELSE 0 END) no_stats
  FROM plan_table pt,
       dba_indexes i,
       dba_ind_partitions p
 WHERE pt.object_type = 'INDEX'
   AND pt.object_owner = i.owner
   AND pt.object_name = i.index_name
   AND i.partitioned = 'YES'
   AND i.num_rows > 0
   AND i.last_analyzed IS NOT NULL
   AND pt.object_owner = p.index_owner
   AND pt.object_name = p.index_name
 GROUP BY
       pt.object_owner,
       pt.object_name ) v
 WHERE v.no_stats > 0;

-- index partitions where num rows = 0
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_INDEX_PART, 'INDEX PARTITION', SYSTIMESTAMP, v.object_owner||'.'||v.object_name,
       v.num_rows_zero||' out of '||v.par_count||' partition(s) with number of rows equal to zero according to partition''s CBO statistics.',
       'If these index partitions are not empty, consider gathering table statistics using GRANULARITY=>GLOBAL AND PARTITION.'
  FROM (
SELECT pt.object_owner,
       pt.object_name,
       COUNT(*) par_count,
       SUM(CASE WHEN p.num_rows = 0 THEN 1 ELSE 0 END) num_rows_zero
  FROM plan_table pt,
       dba_indexes i,
       dba_ind_partitions p
 WHERE pt.object_type = 'INDEX'
   AND pt.object_owner = i.owner
   AND pt.object_name = i.index_name
   AND i.partitioned = 'YES'
   AND i.num_rows > 0
   AND i.last_analyzed IS NOT NULL
   AND pt.object_owner = p.index_owner
   AND pt.object_name = p.index_name
 GROUP BY
       pt.object_owner,
       pt.object_name ) v
 WHERE v.num_rows_zero > 0;

-- index partitions with outdated stats
INSERT INTO plan_table (id, operation, object_alias, other_tag, remarks, projection)
SELECT :E_INDEX_PART, 'INDEX PARTITION', SYSTIMESTAMP, v.object_owner||'.'||v.object_name,
       'Index contains partition(s) with index/partition CBO statistics out of sync for up to '||TRUNC(ABS(v.idx_last_analyzed - v.par_last_analyzed))||' day(s).',
       'Index and partition statistics were gathered up to '||TRUNC(ABS(v.idx_last_analyzed - v.par_last_analyzed))||' day(s) appart, so they do not offer a consistent view to the CBO.<br>'||CHR(10)||
       'Consider re-gathering table statistics using GRANULARITY=>GLOBAL AND PARTITION.'
  FROM (
SELECT pt.object_owner,
       pt.object_name,
       i.last_analyzed idx_last_analyzed,
       COUNT(*) par_count,
       MIN(p.last_analyzed) par_last_analyzed
  FROM plan_table pt,
       dba_indexes i,
       dba_ind_partitions p
 WHERE pt.object_type = 'INDEX'
   AND pt.object_owner = i.owner
   AND pt.object_name = i.index_name
   AND i.partitioned = 'YES'
   AND i.num_rows > 0
   AND i.last_analyzed IS NOT NULL
   AND pt.object_owner = p.index_owner
   AND pt.object_name = p.index_name
 GROUP BY
       pt.object_owner,
       pt.object_name,
       i.last_analyzed ) v
 WHERE ABS(v.idx_last_analyzed - v.par_last_analyzed) > 1;

/**************************************************************************************************/

/* -------------------------
 *
 * hc report
 *
 * ------------------------- */

-- setup to produce report
SET ECHO OFF FEED OFF VER OFF SHOW OFF HEA OFF LIN 2000 NEWP NONE PAGES 0 SQLC MIX TAB ON TRIMS ON TI OFF TIMI OFF ARRAY 100 NUMF "" SQLP SQL> SUF sql BLO . RECSEP OFF APPI OFF;

/* -------------------------
 *
 * heading
 *
 * ------------------------- */
SPO sqlhc_^^database_name_short._^^host_name_short._^^rdbms_version._^^sql_id._^^time_stamp..html;

PRO <html>
PRO <!-- $Header: ^^mos_doc. sqlhc.html ^^doc_ver. ^^doc_date. carlos.sierra $ -->
PRO <!-- Copyright (c) 2000-2012, Oracle Corporation. All rights reserved. -->
PRO <!-- Author: carlos.sierra@oracle.com -->
PRO
PRO <head>
PRO <title>sqlhc_^^database_name_short._^^host_name_short._^^rdbms_version._^^sql_id._^^time_stamp..html</title>
PRO

PRO <style type="text/css">
PRO body {font:10pt Arial,Helvetica,Verdana,Geneva,sans-serif; color:black; background:white;}
PRO a {font-weight:bold; color:#663300;}
PRO pre {font:8pt Monaco,"Courier New",Courier,monospace;} /* for code */
PRO h1 {font-size:16pt; font-weight:bold; color:#336699;}
PRO h2 {font-size:14pt; font-weight:bold; color:#336699;}
PRO h3 {font-size:12pt; font-weight:bold; color:#336699;}
PRO li {font-size:10pt; font-weight:bold; color:#336699; padding:0.1em 0 0 0;}
PRO table {font-size:8pt; color:black; background:white;}
PRO th {font-weight:bold; background:#cccc99; color:#336699; vertical-align:bottom; padding-left:3pt; padding-right:3pt; padding-top:1pt; padding-bottom:1pt;}
PRO td {text-align:left; background:#fcfcf0; vertical-align:top; padding-left:3pt; padding-right:3pt; padding-top:1pt; padding-bottom:1pt;}
PRO td.c {text-align:center;} /* center */
PRO td.l {text-align:left;} /* left (default) */
PRO td.r {text-align:right;} /* right */
PRO font.n {font-size:8pt; font-style:italic; color:#336699;} /* table footnote in blue */
PRO font.f {font-size:8pt; color:#999999;} /* footnote in gray */
PRO </style>
PRO

PRO </head>
PRO <body>
PRO <h1><a target="MOS" href="^^doc_link.^^mos_doc.">^^mos_doc.</a> SQLHC
PRO ^^doc_ver. Report: sqlhc_^^database_name_short._^^host_name_short._^^rdbms_version._^^sql_id._^^time_stamp..html</h1>
PRO

PRO <pre>
PRO License   : ^^input_license.
PRO SQL_ID    : ^^input_sql_id.
PRO SIGNATURE : ^^signature.
PRO SIGNATUREF: ^^signaturef.
PRO RDBMS     : ^^rdbms_version.
PRO Platform  : ^^platform.
PRO OFE       : ^^sys_ofe.
PRO DYN_SAMP  : ^^sys_ds.
PRO EBS       : "^^is_ebs."
PRO SIEBEL    : "^^is_siebel."
PRO PSFT      : "^^is_psft."
PRO Date      : ^^time_stamp2.
PRO </pre>

PRO <ul>
PRO <li><a href="#obs">Observations</a></li>
PRO <li><a href="#text">SQL Text</a></li>
PRO <li><a href="#tbl_sum">Tables Summary</a></li>
PRO <li><a href="#idx_sum">Indexes Summary</a></li>
PRO <li><a href="#mem_stats">Current SQL Statistics (GV$SQL)</a></li>
PRO <li><a href="#awr_stats">Historical SQL Statistics (DBA_HIST_SQLSTAT)</a></li>
PRO <li><a href="#mem_plans_last">Current Execution Plans (last execution)</a></li>
PRO <li><a href="#mem_plans_all">Current Execution Plans (all executions)</a></li>
PRO <li><a href="#awr_plans">Historical Execution Plans</a></li>
PRO <li><a href="#tables">Tables</a></li>
PRO <li><a href="#tbl_cols">Table Columns</a></li>
PRO <li><a href="#indexes">Indexes</a></li>
PRO <li><a href="#idx_cols">Index Columns</a></li>
PRO </ul>

/* -------------------------
 *
 * observations
 *
 * ------------------------- */
PRO <a name="obs"></a><h2>Observations</h2>
PRO
PRO Observations below are the outcome of several heath-checks on the schema objects accessed by your SQL and its environment.
PRO Review them carefully and take action when appropriate. Then re-execute your SQL and generate this report again.
PRO
PRO <table>
PRO
PRO <tr>
PRO <th>#</th>
PRO <th>Type</th>
PRO <th>Name</th>
PRO <th>Observation</th>
PRO <th>More</th>
PRO </tr>
PRO
SELECT '<!-- '||TO_CHAR(SYSDATE, 'YYYY-MM-DD/HH24:MI:SS')||' -->' FROM dual;
PRO <!-- Please Wait -->

SELECT CHR(10)||'<tr>'||CHR(10)||
       '<td class="r">'||ROWNUM||'</td>'||CHR(10)||
       '<td>'||v.object_type||'</td>'||CHR(10)||
       '<td>'||v.object_name||'</td>'||CHR(10)||
       '<td>'||v.observation||'</td>'||CHR(10)||
       '<td>'||v.more||'</td>'||CHR(10)||
       '</tr>'
  FROM (
SELECT /*+ NO_MERGE */
       operation object_type,
       other_tag object_name,
       remarks observation,
       projection more
  FROM plan_table
 WHERE id IS NOT NULL
   AND operation IS NOT NULL
   AND object_alias IS NOT NULL
   AND other_tag IS NOT NULL
   AND remarks IS NOT NULL
 ORDER BY
       id,
       operation,
       other_tag,
       object_alias ) v;

PRO
PRO <tr>
PRO <th>#</th>
PRO <th>Type</th>
PRO <th>Name</th>
PRO <th>Observation</th>
PRO <th>More</th>
PRO </tr>
PRO
PRO </table>
PRO

/* -------------------------
 *
 * sql_text
 *
 * ------------------------- */
PRO <a name="text"></a><h2>SQL Text</h2>
PRO
PRO <pre>

DECLARE
  l_pos NUMBER;
BEGIN
  WHILE NVL(LENGTH(:sql_text), 0) > 0
  LOOP
    l_pos := INSTR(:sql_text, CHR(10));
    IF l_pos > 0 THEN
      DBMS_OUTPUT.PUT_LINE(SUBSTR(:sql_text, 1, l_pos - 1));
      :sql_text := SUBSTR(:sql_text, l_pos + 1);
    ELSE
      DBMS_OUTPUT.PUT_LINE(:sql_text);
      :sql_text := NULL;
    END IF;
  END LOOP;
END;
/

PRO </pre>

/* -------------------------
 *
 * tables summary
 *
 * ------------------------- */
PRO <a name="tbl_sum"></a><h2>Tables Summary</h2>
PRO
PRO Values below have two purposes:<br>
PRO 1. Provide a quick view of the state of Table level CBO statistics, as well as their indexes and columns.<br>
PRO 2. Ease a compare between two systems that are believed to be similar.
PRO
PRO <table>
PRO
PRO <tr>
PRO <th>#</th>
PRO <th>Table Name</th>
PRO <th>Owner</th>
PRO <th>Num Rows</th>
PRO <th>Table<br>Sample Size</th>
PRO <th>Last Analyzed</th>
PRO <th>Indexes</th>
PRO <th>Avg Index<br>Sample Size</th>
PRO <th>Table<br>Columns</th>
PRO <th>Columns with<br>Histogram</th>
PRO <th>Avg Column<br>Sample Size</th>
PRO </tr>
PRO
SELECT '<!-- '||TO_CHAR(SYSDATE, 'YYYY-MM-DD/HH24:MI:SS')||' -->' FROM dual;
PRO <!-- Please Wait -->

SELECT CHR(10)||'<tr>'||CHR(10)||
       '<td class="r">'||ROWNUM||'</td>'||CHR(10)||
       '<td>'||v.table_name||'</td>'||CHR(10)||
       '<td>'||v.owner||'</td>'||CHR(10)||
       '<td class="r">'||v.num_rows||'</td>'||CHR(10)||
       '<td class="r">'||v.table_sample_size||'</td>'||CHR(10)||
       '<td nowrap>'||v.last_analyzed||'</td>'||CHR(10)||
       '<td class="r">'||v.indexes||'</td>'||CHR(10)||
       '<td class="r">'||v.avg_index_sample_size||'</td>'||CHR(10)||
       '<td class="r">'||v.columns||'</td>'||CHR(10)||
       '<td class="r">'||v.columns_with_histograms||'</td>'||CHR(10)||
       '<td class="r">'||v.avg_column_sample_size||'</td>'||CHR(10)||
       '</tr>'
  FROM (
WITH t AS (
SELECT /*+ MATERIALIZE */
       pt.object_owner owner,
       pt.object_name table_name,
       t.num_rows,
       t.sample_size table_sample_size,
       TO_CHAR(t.last_analyzed, 'DD-MON-YY HH24:MI:SS') last_analyzed,
       COUNT(*) indexes,
       ROUND(AVG(i.sample_size)) avg_index_sample_size
  FROM plan_table pt,
       dba_tables t,
       dba_indexes i
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND pt.object_owner = i.table_owner
   AND pt.object_name = i.table_name
 GROUP BY
       pt.object_owner,
       pt.object_name,
       t.num_rows,
       t.sample_size,
       t.last_analyzed ),
c AS (
SELECT /*+ MATERIALIZE */
       pt.object_owner owner,
       pt.object_name table_name,
       COUNT(*) columns,
       SUM(CASE WHEN NVL(c.histogram, 'NONE') = 'NONE' THEN 0 ELSE 1 END) columns_with_histograms,
       ROUND(AVG(c.sample_size)) avg_column_sample_size
  FROM plan_table pt,
       dba_tab_cols c
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = c.owner
   AND pt.object_name = c.table_name
 GROUP BY
       pt.object_owner,
       pt.object_name )
SELECT /*+ NO_MERGE */
       t.table_name,
       t.owner,
       t.num_rows,
       t.table_sample_size,
       t.last_analyzed,
       t.indexes,
       t.avg_index_sample_size,
       c.columns,
       c.columns_with_histograms,
       c.avg_column_sample_size
  FROM t, c
 WHERE t.table_name = c.table_name
   AND t.owner = c.owner
 ORDER BY
       t.table_name,
       t.owner ) v;

PRO
PRO <tr>
PRO <th>#</th>
PRO <th>Table Name</th>
PRO <th>Owner</th>
PRO <th>Num Rows</th>
PRO <th>Table<br>Sample Size</th>
PRO <th>Last Analyzed</th>
PRO <th>Indexes</th>
PRO <th>Avg Index<br>Sample Size</th>
PRO <th>Table<br>Columns</th>
PRO <th>Columns with<br>Histogram</th>
PRO <th>Avg Column<br>Sample Size</th>
PRO </tr>
PRO
PRO </table>
PRO

/* -------------------------
 *
 * indexes summary
 *
 * ------------------------- */
PRO <a name="idx_sum"></a><h2>Indexes Summary</h2>
PRO
PRO Values below have two purposes:<br>
PRO 1. Provide a quick view of the state of Index level CBO statistics, as well as their columns.<br>
PRO 2. Ease a compare between two systems that are believed to be similar.
PRO This section includes data captured by AWR.
PRO
PRO <table>
PRO
PRO <tr>
PRO <th>#</th>
PRO <th>Table Name</th>
PRO <th>Table<br>Owner</th>
PRO <th>Index Name</th>
PRO <th>Index<br>Owner</th>
PRO <th>In MEM<br>Plan</th>
PRO <th>In AWR<br>Plan</th>
PRO <th>Num Rows</th>
PRO <th>Index<br>Sample Size</th>
PRO <th>Last Analyzed</th>
PRO <th>Index<br>Columns</th>
PRO <th>Columns with<br>Histogram</th>
PRO <th>Avg Column<br>Sample Size</th>
PRO </tr>
PRO
SELECT '<!-- '||TO_CHAR(SYSDATE, 'YYYY-MM-DD/HH24:MI:SS')||' -->' FROM dual;
PRO <!-- Please Wait -->

SELECT CHR(10)||'<tr>'||CHR(10)||
       '<td class="r">'||ROWNUM||'</td>'||CHR(10)||
       '<td>'||v.table_name||'</td>'||CHR(10)||
       '<td>'||v.table_owner||'</td>'||CHR(10)||
       '<td>'||v.index_name||'</td>'||CHR(10)||
       '<td>'||v.index_owner||'</td>'||CHR(10)||
       '<td class="c">'||v.in_mem_plan||'</td>'||CHR(10)||
       '<td class="c">'||v.in_awr_plan||'</td>'||CHR(10)||
       '<td class="r">'||v.num_rows||'</td>'||CHR(10)||
       '<td class="r">'||v.table_sample_size||'</td>'||CHR(10)||
       '<td nowrap>'||v.last_analyzed||'</td>'||CHR(10)||
       '<td class="r">'||v.columns||'</td>'||CHR(10)||
       '<td class="r">'||v.columns_with_histograms||'</td>'||CHR(10)||
       '<td class="r">'||v.avg_column_sample_size||'</td>'||CHR(10)||
       '</tr>'
  FROM (
WITH i AS (
SELECT /*+ MATERIALIZE */
       pt.object_owner table_owner,
       pt.object_name table_name,
       i.owner index_owner,
       i.index_name,
       i.num_rows,
       i.sample_size table_sample_size,
       TO_CHAR(i.last_analyzed, 'DD-MON-YY HH24:MI:SS') last_analyzed,
       (SELECT 'YES'
          FROM gv$sql_plan p1
         WHERE p1.sql_id = :sql_id
           AND (p1.object_type LIKE '%INDEX%' OR p1.operation LIKE '%INDEX%')
           AND i.owner = p1.object_owner
           AND i.index_name = p1.object_name
           AND ROWNUM = 1) in_mem_plan,
       (SELECT 'YES'
          FROM dba_hist_sql_plan p2
         WHERE :license = 'Y'
           AND p2.sql_id = :sql_id
           AND (p2.object_type LIKE '%INDEX%' OR p2.operation LIKE '%INDEX%')
           AND i.owner = p2.object_owner
           AND i.index_name = p2.object_name
           AND ROWNUM = 1) in_awr_plan
  FROM plan_table pt,
       dba_indexes i
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = i.table_owner
   AND pt.object_name = i.table_name ),
c AS (
SELECT /*+ MATERIALIZE */
       ic.index_owner,
       ic.index_name,
       COUNT(*) columns,
       SUM(CASE WHEN NVL(c.histogram, 'NONE') = 'NONE' THEN 0 ELSE 1 END) columns_with_histograms,
       ROUND(AVG(c.sample_size)) avg_column_sample_size
  FROM plan_table pt,
       dba_ind_columns ic,
       dba_tab_cols c
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = ic.table_owner
   AND pt.object_name = ic.table_name
   AND ic.table_owner = c.owner
   AND ic.table_name = c.table_name
   AND ic.column_name = c.column_name
 GROUP BY
       ic.index_owner,
       ic.index_name )
SELECT /*+ NO_MERGE */
       i.table_name,
       i.table_owner,
       i.index_name,
       i.index_owner,
       i.num_rows,
       i.table_sample_size,
       i.last_analyzed,
       i.in_mem_plan,
       i.in_awr_plan,
       c.columns,
       c.columns_with_histograms,
       c.avg_column_sample_size
  FROM i, c
 WHERE i.index_name = c.index_name
   AND i.index_owner = c.index_owner
 ORDER BY
       i.table_name,
       i.table_owner,
       i.index_name,
       i.index_owner ) v;

PRO
PRO <tr>
PRO <th>#</th>
PRO <th>Table Name</th>
PRO <th>Table<br>Owner</th>
PRO <th>Index Name</th>
PRO <th>Index<br>Owner</th>
PRO <th>In MEM<br>Plan</th>
PRO <th>In AWR<br>Plan</th>
PRO <th>Num Rows</th>
PRO <th>Index<br>Sample Size</th>
PRO <th>Last Analyzed</th>
PRO <th>Index<br>Columns</th>
PRO <th>Columns with<br>Histogram</th>
PRO <th>Avg Column<br>Sample Size</th>
PRO </tr>
PRO
PRO </table>
PRO

/* -------------------------
 *
 * gv$sql
 *
 * ------------------------- */
PRO <a name="mem_stats"></a><h2>Current SQL Statistics (GV$SQL)</h2>
PRO
PRO Performance metrics of child cursors of ^^sql_id. while still in memory.
PRO
PRO <table>
PRO
PRO <tr>
PRO <th>#</th>
PRO <th>Inst<br>ID</th>
PRO <th>Child<br>Num</th>
PRO <th>Plan HV</th>
PRO <th>Execs</th>
PRO <th>Fetch</th>
PRO <th>Loads</th>
PRO <th>Inval</th>
PRO <th>Parse<br>Calls</th>
PRO <th>Buffer<br>Gets</th>
PRO <th>Disk<br>Reads</th>
PRO <th>Direct<br>Writes</th>
PRO <th>Rows<br>Proc</th>
PRO <th>Elapsed<br>Time<br>(secs)</th>
PRO <th>CPU<br>Time<br>(secs)</th>
PRO <th>IO<br>Time<br>(secs)</th>
PRO <th>Conc<br>Time<br>(secs)</th>
PRO <th>Appl<br>Time<br>(secs)</th>
PRO <th>Clus<br>Time<br>(secs)</th>
PRO <th>PLSQL<br>Time<br>(secs)</th>
PRO <th>Java<br>Time<br>(secs)</th>
PRO <th>Optimizer<br>Mode</th>
PRO <th>Cost</th>
PRO <th>Opt Env HV</th>
PRO <th>Parsing<br>Schema<br>Name</th>
PRO <th>Module</th>
PRO <th>Action</th>
PRO <th>Outline</th>
PRO <th>Profile</th>
PRO <th>First Load</th>
PRO <th>Last Load</th>
PRO <th>Last Active</th>
PRO </tr>
PRO
SELECT '<!-- '||TO_CHAR(SYSDATE, 'YYYY-MM-DD/HH24:MI:SS')||' -->' FROM dual;
PRO <!-- Please Wait -->

SELECT CHR(10)||'<tr>'||CHR(10)||
       '<td class="r">'||ROWNUM||'</td>'||CHR(10)||
       '<td class="r">'||inst_id||'</td>'||CHR(10)||
       '<td class="r">'||child_number||'</td>'||CHR(10)||
       '<td class="r">'||plan_hash_value||'</td>'||CHR(10)||
       '<td class="r">'||executions||'</td>'||CHR(10)||
       '<td class="r">'||fetches||'</td>'||CHR(10)||
       '<td class="r">'||loads||'</td>'||CHR(10)||
       '<td class="r">'||invalidations||'</td>'||CHR(10)||
       '<td class="r">'||parse_calls||'</td>'||CHR(10)||
       '<td class="r">'||buffer_gets||'</td>'||CHR(10)||
       '<td class="r">'||disk_reads||'</td>'||CHR(10)||
       '<td class="r">'||direct_writes||'</td>'||CHR(10)||
       '<td class="r">'||rows_processed||'</td>'||CHR(10)||
       '<td class="r">'||TO_CHAR(ROUND(elapsed_time / 1e6, 3), '99999999999990D990')||'</td>'||CHR(10)||
       '<td class="r">'||TO_CHAR(ROUND(cpu_time / 1e6, 3), '99999999999990D990')||'</td>'||CHR(10)||
       '<td class="r">'||TO_CHAR(ROUND(user_io_wait_time / 1e6, 3), '99999999999990D990')||'</td>'||CHR(10)||
       '<td class="r">'||TO_CHAR(ROUND(concurrency_wait_time / 1e6, 3), '99999999999990D990')||'</td>'||CHR(10)||
       '<td class="r">'||TO_CHAR(ROUND(application_wait_time / 1e6, 3), '99999999999990D990')||'</td>'||CHR(10)||
       '<td class="r">'||TO_CHAR(ROUND(cluster_wait_time / 1e6, 3), '99999999999990D990')||'</td>'||CHR(10)||
       '<td class="r">'||TO_CHAR(ROUND(plsql_exec_time / 1e6, 3), '99999999999990D990')||'</td>'||CHR(10)||
       '<td class="r">'||TO_CHAR(ROUND(java_exec_time / 1e6, 3), '99999999999990D990')||'</td>'||CHR(10)||
       '<td>'||optimizer_mode||'</td>'||CHR(10)||
       '<td class="r">'||optimizer_cost||'</td>'||CHR(10)||
       '<td class="r">'||optimizer_env_hash_value||'</td>'||CHR(10)||
       '<td>'||parsing_schema_name||'</td>'||CHR(10)||
       '<td>'||module||'</td>'||CHR(10)||
       '<td>'||action||'</td>'||CHR(10)||
       '<td>'||outline_category||'</td>'||CHR(10)||
       '<td>'||sql_profile||'</td>'||CHR(10)||
       '<td nowrap>'||first_load_time||'</td>'||CHR(10)||
       '<td nowrap>'||last_load_time||'</td>'||CHR(10)||
       '<td nowrap>'||TO_CHAR(last_active_time, 'YYYY-MM-DD/HH24:MI:SS')||'</td>'||CHR(10)||
       '</tr>'
  FROM gv$sql
 WHERE sql_id = :sql_id
 ORDER BY
       inst_id,
       child_number;

PRO
PRO <tr>
PRO <th>#</th>
PRO <th>Inst<br>ID</th>
PRO <th>Child<br>Num</th>
PRO <th>Plan HV</th>
PRO <th>Execs</th>
PRO <th>Fetch</th>
PRO <th>Loads</th>
PRO <th>Inval</th>
PRO <th>Parse<br>Calls</th>
PRO <th>Buffer<br>Gets</th>
PRO <th>Disk<br>Reads</th>
PRO <th>Direct<br>Writes</th>
PRO <th>Rows<br>Proc</th>
PRO <th>Elapsed<br>Time<br>(secs)</th>
PRO <th>CPU<br>Time<br>(secs)</th>
PRO <th>IO<br>Time<br>(secs)</th>
PRO <th>Conc<br>Time<br>(secs)</th>
PRO <th>Appl<br>Time<br>(secs)</th>
PRO <th>Clus<br>Time<br>(secs)</th>
PRO <th>PLSQL<br>Time<br>(secs)</th>
PRO <th>Java<br>Time<br>(secs)</th>
PRO <th>Optimizer<br>Mode</th>
PRO <th>Cost</th>
PRO <th>Opt Env HV</th>
PRO <th>Parsing<br>Schema<br>Name</th>
PRO <th>Module</th>
PRO <th>Action</th>
PRO <th>Outline</th>
PRO <th>Profile</th>
PRO <th>First Load</th>
PRO <th>Last Load</th>
PRO <th>Last Active</th>
PRO </tr>
PRO
PRO </table>
PRO

/* -------------------------
 *
 * dba_hist_sqlstat
 *
 * ------------------------- */
PRO <a name="awr_stats"></a><h2>Historical SQL Statistics (DBA_HIST_SQLSTAT)</h2>
PRO
PRO Performance metrics of execution plans of ^^sql_id.
PRO This section includes data captured by AWR.
PRO
PRO <table>
PRO
PRO <tr>
PRO <th>#</th>
PRO <th>Snap<br>ID</th>
PRO <th>Snaphot</th>
PRO <th>Inst<br>ID</th>
PRO <th>Plan HV</th>
PRO <th>Vers<br>Cnt</th>
PRO <th>Execs</th>
PRO <th>Fetch</th>
PRO <th>Loads</th>
PRO <th>Inval</th>
PRO <th>Parse<br>Calls</th>
PRO <th>Buffer<br>Gets</th>
PRO <th>Disk<br>Reads</th>
PRO <th>Direct<br>Writes</th>
PRO <th>Rows<br>Proc</th>
PRO <th>Elapsed<br>Time<br>(secs)</th>
PRO <th>CPU<br>Time<br>(secs)</th>
PRO <th>IO<br>Time<br>(secs)</th>
PRO <th>Conc<br>Time<br>(secs)</th>
PRO <th>Appl<br>Time<br>(secs)</th>
PRO <th>Clus<br>Time<br>(secs)</th>
PRO <th>PLSQL<br>Time<br>(secs)</th>
PRO <th>Java<br>Time<br>(secs)</th>
PRO <th>Optimizer<br>Mode</th>
PRO <th>Cost</th>
PRO <th>Opt Env HV</th>
PRO <th>Parsing<br>Schema<br>Name</th>
PRO <th>Module</th>
PRO <th>Action</th>
PRO <th>Profile</th>
PRO </tr>
PRO
SELECT '<!-- '||TO_CHAR(SYSDATE, 'YYYY-MM-DD/HH24:MI:SS')||' -->' FROM dual;
PRO <!-- Please Wait -->

SELECT CHR(10)||'<tr>'||CHR(10)||
       '<td class="r">'||ROWNUM||'</td>'||CHR(10)||
       '<td class="r">'||v.snap_id||'</td>'||CHR(10)||
       '<td nowrap>'||TO_CHAR(v.end_interval_time, 'YYYY-MM-DD/HH24:MI:SS')||'</td>'||CHR(10)||
       '<td class="r">'||v.instance_number||'</td>'||CHR(10)||
       '<td class="r">'||v.plan_hash_value||'</td>'||CHR(10)||
       '<td class="r">'||v.version_count||'</td>'||CHR(10)||
       '<td class="r">'||v.executions_total||'</td>'||CHR(10)||
       '<td class="r">'||v.fetches_total||'</td>'||CHR(10)||
       '<td class="r">'||v.loads_total||'</td>'||CHR(10)||
       '<td class="r">'||v.invalidations_total||'</td>'||CHR(10)||
       '<td class="r">'||v.parse_calls_total||'</td>'||CHR(10)||
       '<td class="r">'||v.buffer_gets_total||'</td>'||CHR(10)||
       '<td class="r">'||v.disk_reads_total||'</td>'||CHR(10)||
       '<td class="r">'||v.direct_writes_total||'</td>'||CHR(10)||
       '<td class="r">'||v.rows_processed_total||'</td>'||CHR(10)||
       '<td class="r">'||TO_CHAR(ROUND(v.elapsed_time_total / 1e6, 3), '99999999999990D990')||'</td>'||CHR(10)||
       '<td class="r">'||TO_CHAR(ROUND(v.cpu_time_total / 1e6, 3), '99999999999990D990')||'</td>'||CHR(10)||
       '<td class="r">'||TO_CHAR(ROUND(v.iowait_total / 1e6, 3), '99999999999990D990')||'</td>'||CHR(10)||
       '<td class="r">'||TO_CHAR(ROUND(v.ccwait_total / 1e6, 3), '99999999999990D990')||'</td>'||CHR(10)||
       '<td class="r">'||TO_CHAR(ROUND(v.apwait_total / 1e6, 3), '99999999999990D990')||'</td>'||CHR(10)||
       '<td class="r">'||TO_CHAR(ROUND(v.clwait_total / 1e6, 3), '99999999999990D990')||'</td>'||CHR(10)||
       '<td class="r">'||TO_CHAR(ROUND(v.plsexec_time_total / 1e6, 3), '99999999999990D990')||'</td>'||CHR(10)||
       '<td class="r">'||TO_CHAR(ROUND(v.javexec_time_total / 1e6, 3), '99999999999990D990')||'</td>'||CHR(10)||
       '<td>'||v.optimizer_mode||'</td>'||CHR(10)||
       '<td class="r">'||v.optimizer_cost||'</td>'||CHR(10)||
       '<td class="r">'||v.optimizer_env_hash_value||'</td>'||CHR(10)||
       '<td>'||v.parsing_schema_name||'</td>'||CHR(10)||
       '<td>'||v.module||'</td>'||CHR(10)||
       '<td>'||v.action||'</td>'||CHR(10)||
       '<td>'||v.sql_profile||'</td>'||CHR(10)||
       '</tr>'
  FROM (
SELECT /*+ NO_MERGE */
       h.snap_id,
       s.end_interval_time,
       h.instance_number,
       h.plan_hash_value,
       h.optimizer_cost,
       h.optimizer_mode,
       h.optimizer_env_hash_value,
       h.version_count,
       h.module,
       h.action,
       h.sql_profile,
       h.parsing_schema_name,
       h.fetches_total,
       h.executions_total,
       h.loads_total,
       h.invalidations_total,
       h.parse_calls_total,
       h.disk_reads_total,
       h.buffer_gets_total,
       h.rows_processed_total,
       h.cpu_time_total,
       h.elapsed_time_total,
       h.iowait_total,
       h.clwait_total,
       h.apwait_total,
       h.ccwait_total,
       h.direct_writes_total,
       h.plsexec_time_total,
       h.javexec_time_total
  FROM dba_hist_sqlstat h,
       dba_hist_snapshot s
 WHERE :license = 'Y'
   AND h.sql_id = :sql_id
   AND h.snap_id = s.snap_id
   AND h.dbid = s.dbid
   AND h.instance_number = s.instance_number
 ORDER BY
       s.end_interval_time,
       h.instance_number,
       h.plan_hash_value ) v;

PRO
PRO <tr>
PRO <th>#</th>
PRO <th>Snap<br>ID</th>
PRO <th>Snaphot</th>
PRO <th>Inst<br>ID</th>
PRO <th>Plan HV</th>
PRO <th>Vers<br>Cnt</th>
PRO <th>Execs</th>
PRO <th>Fetch</th>
PRO <th>Loads</th>
PRO <th>Inval</th>
PRO <th>Parse<br>Calls</th>
PRO <th>Buffer<br>Gets</th>
PRO <th>Disk<br>Reads</th>
PRO <th>Direct<br>Writes</th>
PRO <th>Rows<br>Proc</th>
PRO <th>Elapsed<br>Time<br>(secs)</th>
PRO <th>CPU<br>Time<br>(secs)</th>
PRO <th>IO<br>Time<br>(secs)</th>
PRO <th>Conc<br>Time<br>(secs)</th>
PRO <th>Appl<br>Time<br>(secs)</th>
PRO <th>Clus<br>Time<br>(secs)</th>
PRO <th>PLSQL<br>Time<br>(secs)</th>
PRO <th>Java<br>Time<br>(secs)</th>
PRO <th>Optimizer<br>Mode</th>
PRO <th>Cost</th>
PRO <th>Opt Env HV</th>
PRO <th>Parsing<br>Schema<br>Name</th>
PRO <th>Module</th>
PRO <th>Action</th>
PRO <th>Profile</th>
PRO </tr>
PRO
PRO </table>
PRO

/* -------------------------
 *
 * DBMS_XPLAN.DISPLAY_CURSOR OUTLINE ALLSTATS LAST
 *
 * ------------------------- */
COL inst_child FOR A21;
BREAK ON inst_child SKIP 2;

PRO <a name="mem_plans_last"></a><h2>Current Execution Plans (last execution)</h2>
PRO
PRO Captured while still in memory. Metrics below are for the last execution of each child cursor.<br>
PRO If STATISTICS_LEVEL was set to ALL at the time of the hard-parse then A-Rows column is populated.
PRO
SELECT '<!-- '||TO_CHAR(SYSDATE, 'YYYY-MM-DD/HH24:MI:SS')||' -->' FROM dual;
PRO <!-- Please Wait -->
PRO <pre>

SELECT RPAD('Inst: '||v.inst_id, 9)||' '||RPAD('Child: '||v.child_number, 11) inst_child, t.plan_table_output
  FROM gv$sql v,
       TABLE(DBMS_XPLAN.DISPLAY('gv$sql_plan_statistics_all', NULL, 'ADVANCED ALLSTATS LAST -PROJECTION', 'inst_id = '||v.inst_id||' AND sql_id = '''||v.sql_id||''' AND child_number = '||v.child_number)) t
 WHERE v.sql_id = :sql_id
   AND v.loaded_versions > 0;

PRO </pre>

/* -------------------------
 *
 * DBMS_XPLAN.DISPLAY_CURSOR OUTLINE ALLSTATS
 *
 * ------------------------- */
PRO <a name="mem_plans_all"></a><h2>Current Execution Plans (all executions)</h2>
PRO
PRO Captured while still in memory. Metrics below are an aggregate for all the execution of each child cursor.<br>
PRO If STATISTICS_LEVEL was set to ALL at the time of the hard-parse then A-Rows column is populated.
PRO
SELECT '<!-- '||TO_CHAR(SYSDATE, 'YYYY-MM-DD/HH24:MI:SS')||' -->' FROM dual;
PRO <!-- Please Wait -->
PRO <pre>

SELECT RPAD('Inst: '||v.inst_id, 9)||' '||RPAD('Child: '||v.child_number, 11) inst_child, t.plan_table_output
  FROM gv$sql v,
       TABLE(DBMS_XPLAN.DISPLAY('gv$sql_plan_statistics_all', NULL, 'ADVANCED ALLSTATS -PROJECTION', 'inst_id = '||v.inst_id||' AND sql_id = '''||v.sql_id||''' AND child_number = '||v.child_number)) t
 WHERE v.sql_id = :sql_id
   AND v.loaded_versions > 0
   AND v.executions > 1;

PRO </pre>

/* -------------------------
 *
 * DBMS_XPLAN.DISPLAY_AWR OUTLINE
 *
 * ------------------------- */
PRO <a name="awr_plans"></a><h2>Historical Execution Plans</h2>
PRO
PRO This section includes data captured by AWR.
PRO
SELECT '<!-- '||TO_CHAR(SYSDATE, 'YYYY-MM-DD/HH24:MI:SS')||' -->' FROM dual;
PRO <!-- Please Wait -->
PRO <pre>

SELECT t.plan_table_output
  FROM (SELECT DISTINCT sql_id, plan_hash_value, dbid
          FROM dba_hist_sql_plan WHERE :license = 'Y' AND sql_id = :sql_id) v,
       TABLE(DBMS_XPLAN.DISPLAY_AWR(v.sql_id, v.plan_hash_value, v.dbid, 'ADVANCED -PROJECTION')) t;

PRO </pre>

/* -------------------------
 *
 * tables
 *
 * ------------------------- */
PRO <a name="tables"></a><h2>Tables</h2>
PRO
PRO CBO Statistics and relevant attributes.
PRO
PRO <table>
PRO
PRO <tr>
PRO <th>#</th>
PRO <th>Table Name</th>
PRO <th>Owner</th>
PRO <th>Part</th>
PRO <th>DoP</th>
PRO <th>Temp</th>
PRO <th>Num Rows</th>
PRO <th>Sample<br>Size</th>
PRO <th>Perc</th>
PRO <th>Last Analyzed</th>
PRO <th>Blocks</th>
PRO <th>Avg<br>Row<br>Len</th>
PRO <th>Global<br>Stats</th>
PRO <th>User<br>Stats</th>
PRO <th>Stat<br>Type<br>Locked</th>
PRO <th>Stale<br>Stats</th>
PRO <th>Perc</th>
PRO <th>Table<br>Cols</th>
PRO <th>Indexes</th>
PRO <th>Index<br>Cols</th>
PRO </tr>
PRO
SELECT '<!-- '||TO_CHAR(SYSDATE, 'YYYY-MM-DD/HH24:MI:SS')||' -->' FROM dual;
PRO <!-- Please Wait -->

SELECT /* sqlhc.sql Tables */
       CHR(10)||'<tr>'||CHR(10)||
       '<td class="r">'||ROWNUM||'</td>'||CHR(10)||
       '<td>'||v.table_name||'</td>'||CHR(10)||
       '<td>'||v.owner||'</td>'||CHR(10)||
       '<td class="c">'||v.partitioned||'</td>'||CHR(10)||
       '<td class="c">'||v.degree||'</td>'||CHR(10)||
       '<td class="c">'||v.temporary||'</td>'||CHR(10)||
       '<td class="r">'||v.num_rows||'</td>'||CHR(10)||
       '<td class="r">'||v.sample_size||'</td>'||CHR(10)||
       '<td class="r">'||v.sample_size_perc||'</td>'||CHR(10)||
       '<td nowrap>'||v.last_analyzed||'</td>'||CHR(10)||
       '<td class="r">'||v.blocks||'</td>'||CHR(10)||
       '<td class="r">'||v.avg_row_len||'</td>'||CHR(10)||
       '<td class="c">'||v.global_stats||'</td>'||CHR(10)||
       '<td class="c">'||v.user_stats||'</td>'||CHR(10)||
       '<td class="c">'||v.stattype_locked||'</td>'||CHR(10)||
       '<td class="c">'||v.stale_stats||'</td>'||CHR(10)||
       '<td class="r">'||v.stale_stats_perc||'</td>'||CHR(10)||
       '<td class="c"><a href="#c_'||LOWER(v.table_name||'_'||v.owner)||'">'||v.columns||'</a></td>'||CHR(10)||
       '<td class="c"><a href="#i_'||LOWER(v.table_name||'_'||v.owner)||'">'||v.indexes||'</a></td>'||CHR(10)||
       '<td class="c"><a href="#ic_'||LOWER(v.table_name||'_'||v.owner)||'">'||v.index_columns||'</a></td>'||CHR(10)||
       '</tr>'
  FROM (
SELECT /*+ NO_MERGE LEADING(pt s t m) */
       s.table_name,
       s.owner,
       t.partitioned,
       t.degree,
       t.temporary,
       s.num_rows,
       s.sample_size,
       CASE WHEN s.num_rows > 0 THEN TO_CHAR(ROUND(s.sample_size * 100 / s.num_rows, 1), '99999990D0') END sample_size_perc,
       TO_CHAR(s.last_analyzed, 'YYYY-MM-DD/HH24:MI:SS') last_analyzed,
       s.blocks,
       s.avg_row_len,
       s.global_stats,
       s.user_stats,
       s.stattype_locked,
       s.stale_stats,
       CASE WHEN s.num_rows > 0 THEN TO_CHAR(ROUND((m.inserts + m.updates + m.deletes) * 100 / s.num_rows, 1), '99999990D0') END stale_stats_perc,
       (SELECT COUNT(*)
          FROM dba_tab_cols c
         WHERE c.owner = s.owner
           AND c.table_name = s.table_name) columns,
       (SELECT COUNT(*)
          FROM dba_indexes i
         WHERE i.table_owner = s.owner
           AND i.table_name = s.table_name) indexes,
       (SELECT COUNT(*)
          FROM dba_ind_columns ic
         WHERE ic.table_owner = s.owner
           AND ic.table_name = s.table_name) index_columns
  FROM plan_table pt,
       dba_tab_statistics s,
       dba_tables t,
       sys.dba_tab_modifications m -- requires sys on 10g
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = s.owner
   AND pt.object_name = s.table_name
   AND pt.object_type = s.object_type
   AND s.owner = t.owner
   AND s.table_name = t.table_name
   AND t.owner = m.table_owner(+)
   AND t.table_name = m.table_name(+)
   AND m.partition_name IS NULL
 ORDER BY
       s.table_name,
       s.owner) v;

PRO
PRO <tr>
PRO <th>#</th>
PRO <th>Table Name</th>
PRO <th>Owner</th>
PRO <th>Part</th>
PRO <th>DoP</th>
PRO <th>Temp</th>
PRO <th>Num Rows</th>
PRO <th>Sample<br>Size</th>
PRO <th>Perc</th>
PRO <th>Last Analyzed</th>
PRO <th>Blocks</th>
PRO <th>Avg<br>Row<br>Len</th>
PRO <th>Global<br>Stats</th>
PRO <th>User<br>Stats</th>
PRO <th>Stat<br>Type<br>Locked</th>
PRO <th>Stale<br>Stats</th>
PRO <th>Perc</th>
PRO <th>Table<br>Cols</th>
PRO <th>Indexes</th>
PRO <th>Index<br>Cols</th>
PRO </tr>
PRO
PRO </table>
PRO

/* -------------------------
 *
 * table columns
 *
 * ------------------------- */
PRO <a name="tbl_cols"></a><h2>Table Columns</h2>
PRO
SELECT '<!-- '||TO_CHAR(SYSDATE, 'YYYY-MM-DD/HH24:MI:SS')||' -->' FROM dual;
PRO <!-- Please Wait -->

SELECT /* sqlhc.sql Table Columns */
       v2.line_text
  FROM (
SELECT object_name table_name,
       object_owner owner,
       1 line_type,
       1 row_num,
       '<a name="c_'||LOWER(object_name||'_'||object_owner)||'"></a><h3>Table Columns: '||object_name||' ('||object_owner||')</h3>'||CHR(10)||CHR(10)||
       'CBO Statistics and relevant attributes.'||CHR(10)||CHR(10)||
       '<table>'||CHR(10)||CHR(10)||
       '<tr>'||CHR(10)||
       '<th>#</th>'||CHR(10)||
       --'<th>Table Name</th>'||CHR(10)||
       --'<th>Owner</th>'||CHR(10)||
       '<th>Indexes</th>'||CHR(10)||
       '<th>Col<br>ID</th>'||CHR(10)||
       '<th>Column Name</th>'||CHR(10)||
       '<th>Data<br>Type</th>'||CHR(10)||
       '<th>Num<br>Rows</th>'||CHR(10)||
       '<th>Num<br>Nulls</th>'||CHR(10)||
       '<th>Sample<br>Size</th>'||CHR(10)||
       '<th>Perc</th>'||CHR(10)||
       '<th>Num<br>Distinct</th>'||CHR(10)||
       '<th>Low Value</th>'||CHR(10)||
       '<th>High Value</th>'||CHR(10)||
       '<th>Last Analyzed</th>'||CHR(10)||
       '<th>Avg<br>Col<br>Len</th>'||CHR(10)||
       '<th>Density</th>'||CHR(10)||
       '<th>Num<br>Buckets</th>'||CHR(10)||
       '<th>Histogram</th>'||CHR(10)||
       '<th>Global<br>Stats</th>'||CHR(10)||
       '<th>User<br>Stats</th>'||CHR(10)||
       '</tr>'||CHR(10) line_text
  FROM plan_table
 WHERE object_type = 'TABLE'
 UNION ALL
SELECT v.table_name,
       v.owner,
       2 line_type,
       ROWNUM row_num,
       CHR(10)||'<tr>'||CHR(10)||
       '<td class="r">'||ROWNUM||'</td>'||CHR(10)||
       --'<td>'||v.table_name||'</td>'||CHR(10)||
       --'<td>'||v.owner||'</td>'||CHR(10)||
       '<td class="c">'||v.indexes||'</td>'||CHR(10)||
       '<td class="c">'||v.column_id||'</td>'||CHR(10)||
       '<td>'||v.column_name||'</td>'||CHR(10)||
       '<td>'||v.data_type||'</td>'||CHR(10)||
       '<td class="r">'||v.num_rows||'</td>'||CHR(10)||
       '<td class="r">'||v.num_nulls||'</td>'||CHR(10)||
       '<td class="r">'||v.sample_size||'</td>'||CHR(10)||
       '<td class="r">'||v.sample_size_perc||'</td>'||CHR(10)||
       '<td class="r">'||v.num_distinct||'</td>'||CHR(10)||
       '<td nowrap>'||v.low_value||'</td>'||CHR(10)||
       '<td nowrap>'||v.high_value||'</td>'||CHR(10)||
       '<td nowrap>'||v.last_analyzed||'</td>'||CHR(10)||
       '<td class="r">'||v.avg_col_len||'</td>'||CHR(10)||
       '<td class="r">'||v.density||'</td>'||CHR(10)||
       '<td class="r">'||v.num_buckets||'</td>'||CHR(10)||
       '<td>'||v.histogram||'</td>'||CHR(10)||
       '<td class="c">'||v.global_stats||'</td>'||CHR(10)||
       '<td class="c">'||v.user_stats||'</td>'||CHR(10)||
       '</tr>'||CHR(10) line_text
  FROM (
WITH column_low_high AS (
SELECT /*+ MATERIALIZE */
       object_owner owner,
       object_name table_name,
       object_alias column_name,
       partition_start low_value_cooked,
       partition_stop high_value_cooked
  FROM plan_table
 WHERE object_type = 'COLUMN'
   AND partition_start||partition_start IS NOT NULL
)
SELECT /*+ NO_MERGE LEADING(pt t c c2) */
       t.table_name,
       t.owner,
       (SELECT COUNT(*)
          FROM dba_ind_columns i
         WHERE i.table_owner = c.owner
           AND i.table_name = c.table_name
           AND i.column_name = c.column_name) indexes,
       c.column_id,
       c.column_name,
       c.data_type,
       c.data_default,
       t.num_rows,
       c.num_nulls,
       c.sample_size,
       CASE
       WHEN t.num_rows > c.num_nulls THEN TO_CHAR(LEAST(100, ROUND(c.sample_size * 100 / (t.num_rows - c.num_nulls), 1)), '99999990D0')
       WHEN t.num_rows = c.num_nulls THEN TO_CHAR(100, '99999990D0')
       END sample_size_perc,
       c.num_distinct,
       NVL(c2.low_value_cooked, c.low_value) low_value,
       NVL(c2.high_value_cooked, c.high_value) high_value,
       TO_CHAR(c.last_analyzed, 'YYYY-MM-DD/HH24:MI:SS') last_analyzed,
       c.avg_col_len,
       LOWER(TO_CHAR(c.density, '0D000000EEEE')) density,
       c.num_buckets,
       c.histogram,
       c.global_stats,
       c.user_stats
  FROM plan_table pt,
       dba_tables t,
       dba_tab_cols c,
       column_low_high c2
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.owner = c.owner
   AND t.table_name = c.table_name
   AND c.owner = c2.owner(+)
   AND c.table_name = c2.table_name(+)
   AND c.column_name = c2.column_name(+)
 ORDER BY
       t.table_name,
       t.owner,
       indexes DESC,
       c.column_id NULLS LAST,
       c.column_name) v
 UNION ALL
SELECT object_name table_name,
       object_owner owner,
       3 line_type,
       1 row_num,
       '<tr>'||CHR(10)||
       '<th>#</th>'||CHR(10)||
       --'<th>Table Name</th>'||CHR(10)||
       --'<th>Owner</th>'||CHR(10)||
       '<th>Indexes</th>'||CHR(10)||
       '<th>Col<br>ID</th>'||CHR(10)||
       '<th>Column Name</th>'||CHR(10)||
       '<th>Data<br>Type</th>'||CHR(10)||
       '<th>Num<br>Rows</th>'||CHR(10)||
       '<th>Num<br>Nulls</th>'||CHR(10)||
       '<th>Sample<br>Size</th>'||CHR(10)||
       '<th>Perc</th>'||CHR(10)||
       '<th>Num<br>Distinct</th>'||CHR(10)||
       '<th>Low Value</th>'||CHR(10)||
       '<th>High Value</th>'||CHR(10)||
       '<th>Last Analyzed</th>'||CHR(10)||
       '<th>Avg<br>Col<br>Len</th>'||CHR(10)||
       '<th>Density</th>'||CHR(10)||
       '<th>Num<br>Buckets</th>'||CHR(10)||
       '<th>Histogram</th>'||CHR(10)||
       '<th>Global<br>Stats</th>'||CHR(10)||
       '<th>User<br>Stats</th>'||CHR(10)||
       '</tr>'||CHR(10) line_text
  FROM plan_table
 WHERE object_type = 'TABLE'
 UNION ALL
SELECT object_name table_name,
       object_owner owner,
       4 line_type,
       1 row_num,
       CHR(10)||'</table>'||CHR(10)||CHR(10) line_text
  FROM plan_table
 WHERE object_type = 'TABLE') v2
 ORDER BY
       v2.table_name,
       v2.owner,
       v2.line_type,
       v2.row_num;

/* -------------------------
 *
 * indexes
 *
 * ------------------------- */
PRO <a name="indexes"></a><h2>Indexes</h2>
PRO
SELECT '<!-- '||TO_CHAR(SYSDATE, 'YYYY-MM-DD/HH24:MI:SS')||' -->' FROM dual;
PRO <!-- Please Wait -->

SELECT /* sqlhc.sql Indexes */
       v2.line_text
  FROM (
SELECT object_name table_name,
       object_owner owner,
       1 line_type,
       1 row_num,
       '<a name="i_'||LOWER(object_name||'_'||object_owner)||'"></a><h3>Indexes: '||object_name||' ('||object_owner||')</h3>'||CHR(10)||CHR(10)||
       'CBO Statistics and relevant attributes.'||CHR(10)||CHR(10)||
       '<table>'||CHR(10)||CHR(10)||
       '<tr>'||CHR(10)||
       '<th>#</th>'||CHR(10)||
       --'<th>Table Name</th>'||CHR(10)||
       --'<th>Owner</th>'||CHR(10)||
       '<th>Index Name</th>'||CHR(10)||
       '<th>Owner</th>'||CHR(10)||
       '<th>Index Type</th>'||CHR(10)||
       '<th>Part</th>'||CHR(10)||
       '<th>DoP</th>'||CHR(10)||
       '<th>Temp</th>'||CHR(10)||
       '<th>Uniqueness</th>'||CHR(10)||
       '<th>Cols</th>'||CHR(10)||
       '<th>Num<br>Rows</th>'||CHR(10)||
       '<th>Sample<br>Size</th>'||CHR(10)||
       '<th>Perc</th>'||CHR(10)||
       '<th>Last Analyzed</th>'||CHR(10)||
       '<th>Distinct<br>Keys</th>'||CHR(10)||
       '<th>Blevel</th>'||CHR(10)||
       '<th>Leaf<br>Blocks</th>'||CHR(10)||
       '<th>Avg<br>Leaf<br>Blocks<br>per Key</th>'||CHR(10)||
       '<th>Avg<br>Data<br>Blocks<br>per Key</th>'||CHR(10)||
       '<th>Clustering<br>Factor</th>'||CHR(10)||
       '<th>Global<br>Stats</th>'||CHR(10)||
       '<th>User<br>Stats</th>'||CHR(10)||
       '<th>Stat<br>Type<br>Locked</th>'||CHR(10)||
       '<th>Stale<br>Stats</th>'||CHR(10)||
       '</tr>'||CHR(10) line_text
  FROM plan_table
 WHERE object_type = 'TABLE'
 UNION ALL
SELECT v.table_name,
       v.table_owner owner,
       2 line_type,
       ROWNUM row_num,
       CHR(10)||'<tr>'||CHR(10)||
       '<td class="r">'||ROWNUM||'</td>'||CHR(10)||
       --'<td>'||v.table_name||'</td>'||CHR(10)||
       --'<td>'||v.table_owner||'</td>'||CHR(10)||
       '<td>'||v.index_name||'</td>'||CHR(10)||
       '<td>'||v.owner||'</td>'||CHR(10)||
       '<td>'||v.index_type||'</td>'||CHR(10)||
       '<td class="c">'||v.partitioned||'</td>'||CHR(10)||
       '<td class="c">'||v.degree||'</td>'||CHR(10)||
       '<td class="c">'||v.temporary||'</td>'||CHR(10)||
       '<td>'||v.uniqueness||'</td>'||CHR(10)||
       '<td class="c"><a href="#ic_'||LOWER(v.index_name||'_'||v.owner)||'">'||v.columns||'</a></td>'||CHR(10)||
       '<td class="r">'||v.num_rows||'</td>'||CHR(10)||
       '<td class="r">'||v.sample_size||'</td>'||CHR(10)||
       '<td class="r">'||v.sample_size_perc||'</td>'||CHR(10)||
       '<td nowrap>'||v.last_analyzed||'</td>'||CHR(10)||
       '<td class="r">'||v.distinct_keys||'</td>'||CHR(10)||
       '<td class="r">'||v.blevel||'</td>'||CHR(10)||
       '<td class="r">'||v.leaf_blocks||'</td>'||CHR(10)||
       '<td class="r">'||v.avg_leaf_blocks_per_key||'</td>'||CHR(10)||
       '<td class="r">'||v.avg_data_blocks_per_key||'</td>'||CHR(10)||
       '<td class="r">'||v.clustering_factor||'</td>'||CHR(10)||
       '<td class="c">'||v.global_stats||'</td>'||CHR(10)||
       '<td class="c">'||v.user_stats||'</td>'||CHR(10)||
       '<td class="c">'||v.stattype_locked||'</td>'||CHR(10)||
       '<td class="c">'||v.stale_stats||'</td>'||CHR(10)||
       '</tr>'||CHR(10) line_text
  FROM (
SELECT /*+ NO_MERGE LEADING(pt s i) */
       s.table_name,
       s.table_owner,
       s.index_name,
       s.owner,
       i.index_type,
       i.partitioned,
       i.degree,
       i.temporary,
       i.uniqueness,
       (SELECT COUNT(*)
          FROM dba_ind_columns c
         WHERE c.index_owner = s.owner
           AND c.index_name = s.index_name
           AND c.table_owner = s.table_owner
           AND c.table_name = s.table_name) columns,
       s.num_rows,
       s.sample_size,
       CASE WHEN s.num_rows > 0 THEN TO_CHAR(ROUND(s.sample_size * 100 / s.num_rows, 1), '99999990D0') END sample_size_perc,
       TO_CHAR(s.last_analyzed, 'YYYY-MM-DD/HH24:MI:SS') last_analyzed,
       s.distinct_keys,
       s.blevel,
       s.leaf_blocks,
       s.avg_leaf_blocks_per_key,
       s.avg_data_blocks_per_key,
       s.clustering_factor,
       s.global_stats,
       s.user_stats,
       s.stattype_locked,
       s.stale_stats
  FROM plan_table pt,
       dba_ind_statistics s,
       dba_indexes i
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = s.table_owner
   AND pt.object_name = s.table_name
   AND s.object_type = 'INDEX'
   AND s.owner = i.owner
   AND s.index_name = i.index_name
   AND s.table_owner = i.table_owner
   AND s.table_name = i.table_name
 ORDER BY
       s.table_name,
       s.table_owner,
       s.index_name,
       s.owner) v
 UNION ALL
SELECT object_name table_name,
       object_owner owner,
       3 line_type,
       1 row_num,
       '<tr>'||CHR(10)||
       '<th>#</th>'||CHR(10)||
       --'<th>Table Name</th>'||CHR(10)||
       --'<th>Owner</th>'||CHR(10)||
       '<th>Index Name</th>'||CHR(10)||
       '<th>Owner</th>'||CHR(10)||
       '<th>Index Type</th>'||CHR(10)||
       '<th>Part</th>'||CHR(10)||
       '<th>DoP</th>'||CHR(10)||
       '<th>Temp</th>'||CHR(10)||
       '<th>Uniqueness</th>'||CHR(10)||
       '<th>Cols</th>'||CHR(10)||
       '<th>Num<br>Rows</th>'||CHR(10)||
       '<th>Sample<br>Size</th>'||CHR(10)||
       '<th>Perc</th>'||CHR(10)||
       '<th>Last Analyzed</th>'||CHR(10)||
       '<th>Distinct<br>Keys</th>'||CHR(10)||
       '<th>Blevel</th>'||CHR(10)||
       '<th>Leaf<br>Blocks</th>'||CHR(10)||
       '<th>Avg<br>Leaf<br>Blocks<br>per Key</th>'||CHR(10)||
       '<th>Avg<br>Data<br>Blocks<br>per Key</th>'||CHR(10)||
       '<th>Clustering<br>Factor</th>'||CHR(10)||
       '<th>Global<br>Stats</th>'||CHR(10)||
       '<th>User<br>Stats</th>'||CHR(10)||
       '<th>Stat<br>Type<br>Locked</th>'||CHR(10)||
       '<th>Stale<br>Stats</th>'||CHR(10)||
       '</tr>'||CHR(10) line_text
  FROM plan_table
 WHERE object_type = 'TABLE'
 UNION ALL
SELECT object_name table_name,
       object_owner owner,
       4 line_type,
       1 row_num,
       CHR(10)||'</table>'||CHR(10)||CHR(10) line_text
  FROM plan_table
 WHERE object_type = 'TABLE') v2
 ORDER BY
       v2.table_name,
       v2.owner,
       v2.line_type,
       v2.row_num;

/* -------------------------
 *
 * index columns
 *
 * ------------------------- */
PRO <a name="idx_cols"></a><h2>Index Columns</h2>
PRO
SELECT '<!-- '||TO_CHAR(SYSDATE, 'YYYY-MM-DD/HH24:MI:SS')||' -->' FROM dual;
PRO <!-- Please Wait -->

SELECT /* sqlhc.sql Index Columns */
       v2.line_text
  FROM (
SELECT object_name table_name,
       object_owner owner,
       1 line_type,
       1 row_num,
       '<a name="ic_'||LOWER(object_name||'_'||object_owner)||'"></a><h3>Index Columns: '||object_name||' ('||object_owner||')</h3>'||CHR(10)||CHR(10)||
       'CBO Statistics and relevant attributes.'||CHR(10)||CHR(10)||
       '<table>'||CHR(10)||CHR(10)||
       '<tr>'||CHR(10)||
       '<th>#</th>'||CHR(10)||
       --'<th>Table Name</th>'||CHR(10)||
       --'<th>Owner</th>'||CHR(10)||
       '<th>Index Name</th>'||CHR(10)||
       --'<th>Index Owner</th>'||CHR(10)||
       '<th>Col<br>Pos</th>'||CHR(10)||
       '<th>Col<br>ID</th>'||CHR(10)||
       '<th>Column Name</th>'||CHR(10)||
       '<th>Descend</th>'||CHR(10)||
       '<th>Num<br>Rows</th>'||CHR(10)||
       '<th>Num<br>Nulls</th>'||CHR(10)||
       '<th>Sample<br>Size</th>'||CHR(10)||
       '<th>Perc</th>'||CHR(10)||
       '<th>Num<br>Distinct</th>'||CHR(10)||
       '<th>Low Value</th>'||CHR(10)||
       '<th>High Value</th>'||CHR(10)||
       '<th>Last Analyzed</th>'||CHR(10)||
       '<th>Avg<br>Col<br>Len</th>'||CHR(10)||
       '<th>Density</th>'||CHR(10)||
       '<th>Num<br>Buckets</th>'||CHR(10)||
       '<th>Histogram</th>'||CHR(10)||
       '<th>Global<br>Stats</th>'||CHR(10)||
       '<th>User<br>Stats</th>'||CHR(10)||
       '</tr>'||CHR(10) line_text
  FROM plan_table
 WHERE object_type = 'TABLE'
 UNION ALL
SELECT v.table_name,
       v.table_owner,
       2 line_type,
       ROWNUM row_num,
       CHR(10)||'<tr>'||CHR(10)||
       '<td class="r">'||ROWNUM||'</td>'||CHR(10)||
       --'<td>'||v.table_name||'</td>'||CHR(10)||
       --'<td>'||v.table_owner||'</td>'||CHR(10)||
       '<td>'||
       (CASE WHEN v.column_position = 1 THEN '<a name="ic_'||LOWER(v.index_name||'_'||v.index_owner)||'"></a>' END)||
       v.index_name||'</td>'||CHR(10)||
       --'<td>'||v.index_owner||'</td>'||CHR(10)||
       '<td class="r">'||v.column_position||'</td>'||CHR(10)||
       '<td class="c">'||v.column_id||'</td>'||CHR(10)||
       '<td>'||v.column_name||'</td>'||CHR(10)||
       '<td>'||v.descend||'</td>'||CHR(10)||
       '<td class="r">'||v.num_rows||'</td>'||CHR(10)||
       '<td class="r">'||v.num_nulls||'</td>'||CHR(10)||
       '<td class="r">'||v.sample_size||'</td>'||CHR(10)||
       '<td class="r">'||v.sample_size_perc||'</td>'||CHR(10)||
       '<td class="r">'||v.num_distinct||'</td>'||CHR(10)||
       '<td nowrap>'||v.low_value||'</td>'||CHR(10)||
       '<td nowrap>'||v.high_value||'</td>'||CHR(10)||
       '<td nowrap>'||v.last_analyzed||'</td>'||CHR(10)||
       '<td class="r">'||v.avg_col_len||'</td>'||CHR(10)||
       '<td class="r">'||v.density||'</td>'||CHR(10)||
       '<td class="r">'||v.num_buckets||'</td>'||CHR(10)||
       '<td>'||v.histogram||'</td>'||CHR(10)||
       '<td class="c">'||v.global_stats||'</td>'||CHR(10)||
       '<td class="c">'||v.user_stats||'</td>'||CHR(10)||
       '</tr>'||CHR(10) line_text
  FROM (
WITH column_low_high AS (
SELECT /*+ MATERIALIZE */
       object_owner owner,
       object_name table_name,
       object_alias column_name,
       partition_start low_value_cooked,
       partition_stop high_value_cooked
  FROM plan_table
 WHERE object_type = 'COLUMN'
   AND partition_start||partition_start IS NOT NULL
)
SELECT /*+ NO_MERGE LEADING(pt t i c c2) */
       i.table_name,
       i.table_owner,
       i.index_name,
       i.index_owner,
       i.column_position,
       c.column_id,
       i.column_name,
       i.descend,
       t.num_rows,
       c.num_nulls,
       c.sample_size,
       CASE
       WHEN t.num_rows > c.num_nulls THEN TO_CHAR(LEAST(100, ROUND(c.sample_size * 100 / (t.num_rows - c.num_nulls), 1)), '99999990D0')
       WHEN t.num_rows = c.num_nulls THEN TO_CHAR(100, '99999990D0')
       END sample_size_perc,
       c.num_distinct,
       NVL(c2.low_value_cooked, c.low_value) low_value,
       NVL(c2.high_value_cooked, c.high_value) high_value,
       TO_CHAR(c.last_analyzed, 'YYYY-MM-DD/HH24:MI:SS') last_analyzed,
       c.avg_col_len,
       LOWER(TO_CHAR(c.density, '0D000000EEEE')) density,
       c.num_buckets,
       c.histogram,
       c.global_stats,
       c.user_stats
  FROM plan_table pt,
       dba_tables t,
       dba_ind_columns i,
       dba_tab_cols c,
       column_low_high c2
 WHERE pt.object_type = 'TABLE'
   AND pt.object_owner = t.owner
   AND pt.object_name = t.table_name
   AND t.owner = i.table_owner
   AND t.table_name = i.table_name
   AND i.table_owner = c.owner
   AND i.table_name = c.table_name
   AND i.column_name = c.column_name
   AND c.owner = c2.owner(+)
   AND c.table_name = c2.table_name(+)
   AND c.column_name = c2.column_name(+)
 ORDER BY
       i.table_name,
       i.table_owner,
       i.index_name,
       i.index_owner,
       i.column_position) v
 UNION ALL
SELECT object_name table_name,
       object_owner owner,
       3 line_type,
       1 row_num,
       '<tr>'||CHR(10)||
       '<th>#</th>'||CHR(10)||
       --'<th>Table Name</th>'||CHR(10)||
       --'<th>Owner</th>'||CHR(10)||
       '<th>Index Name</th>'||CHR(10)||
       --'<th>Index Owner</th>'||CHR(10)||
       '<th>Col<br>Pos</th>'||CHR(10)||
       '<th>Col<br>ID</th>'||CHR(10)||
       '<th>Column Name</th>'||CHR(10)||
       '<th>Descend</th>'||CHR(10)||
       '<th>Num<br>Rows</th>'||CHR(10)||
       '<th>Num<br>Nulls</th>'||CHR(10)||
       '<th>Sample<br>Size</th>'||CHR(10)||
       '<th>Perc</th>'||CHR(10)||
       '<th>Num<br>Distinct</th>'||CHR(10)||
       '<th>Low Value</th>'||CHR(10)||
       '<th>High Value</th>'||CHR(10)||
       '<th>Last Analyzed</th>'||CHR(10)||
       '<th>Avg<br>Col<br>Len</th>'||CHR(10)||
       '<th>Density</th>'||CHR(10)||
       '<th>Num<br>Buckets</th>'||CHR(10)||
       '<th>Histogram</th>'||CHR(10)||
       '<th>Global<br>Stats</th>'||CHR(10)||
       '<th>User<br>Stats</th>'||CHR(10)||
       '</tr>'||CHR(10) line_text
  FROM plan_table
 WHERE object_type = 'TABLE'
 UNION ALL
SELECT object_name table_name,
       object_owner owner,
       4 line_type,
       1 row_num,
       CHR(10)||'</table>'||CHR(10)||CHR(10) line_text
  FROM plan_table
 WHERE object_type = 'TABLE') v2
 ORDER BY
       v2.table_name,
       v2.owner,
       v2.line_type,
       v2.row_num;

/* -------------------------
 *
 * footer
 *
 * ------------------------- */
PRO
SELECT '<!-- '||TO_CHAR(SYSDATE, 'YYYY-MM-DD/HH24:MI:SS')||' -->' FROM dual;
PRO <hr size="3">
PRO <font class="f">^^mos_doc. SQLHC ^^doc_ver. ^^time_stamp2.</font>
PRO </body>
PRO </html>

SPO OFF;

-- nothing is updated to the db
ROLLBACK TO sqlhc;

-- turing trace off
ALTER SESSION SET SQL_TRACE = FALSE;
ALTER SESSION SET STATISTICS_LEVEL = 'TYPICAL';

SET TERM ON ECHO OFF FEED 6 VER ON SHOW OFF HEA ON LIN 80 NEWP 1 PAGES 14 SQLC MIX TAB ON TRIMS OFF TI OFF TIMI OFF ARRAY 15 NUMF "" SQLP SQL> SUF sql BLO . RECSEP WR APPI OFF SERVEROUT OFF;
PRO
PRO SQLTH file has been created:
PRO sqlhc_^^database_name_short._^^host_name_short._^^rdbms_version._^^sql_id._^^time_stamp..html.
PRO Review this file and act upon its content.
PRO
CL COL;
SET DEF ON;
UNDEFINE 1 2 mos_doc doc_ver doc_date doc_link bug_link input_sql_id input_license sql_id signature signaturef license;
    
     ]]></command_args>       
  </command>

    <command>
    <command_menu>408</command_menu>
    <command_title>Sqlplus Using PLSQL</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <category_id>core.sqlplus</category_id>
    <command_type>Sqlplus</command_type>    
    <command_args>connect / as sysdba        
        SET SERVEROUTPUT ON SIZE 100000 FORMAT WRAPPED; 
        SET LINESIZE 1000 
        SET FEEDBACK OFF; 
        DECLARE 
          TYPE RetCurTyp    IS REF CURSOR; 
          RET_CURSOR        RETCURTYP; 
          OUTPUT_CUR        RETCURTYP; 
          LOGDIR            VARCHAR2(255); 
          PATHSEP           CHAR (2); 
          OSTYPE            VARCHAR2(100); 
        BEGIN 
          -- Get Alert log dir 
          SELECT VALUE  
          INTO LOGDIR 
          FROM V$PARAMETER  
          WHERE NAME = 'background_dump_dest'; 
          -- Determine OS Type from DB Version banner 
          SELECT RTRIM(SUBSTR(REPLACE(BANNER,'TNS for ',''),1,INSTR(REPLACE(BANNER,'TNS for ',''),':')-1)) OS 
          INTO OSTYPE 
          FROM   V$VERSION 
          WHERE  BANNER LIKE 'TNS for %'; 
           
          -- DBMS_OUTPUT.PUT_LINE(SYS_CONTEXT('userenv','db_name')); 
          -- DBMS_OUTPUT.PUT_LINE('OS TYPE:'||OSTYPE); 
          IF INSTR (LOWER(OSTYPE), 'win') > 0 
          THEN 
           PATHSEP :='\\'; 
          ELSE 
           PATHSEP := '/'; 
          END IF; 
          -- DBMS_OUTPUT.PUT_LINE('PATH SEP:'||PATHSEP); 
          DBMS_OUTPUT.PUT_LINE(LOGDIR||PATHSEP||'alert_'||SYS_CONTEXT('userenv','db_name')||'.log'); 
          -- DBMS_OUTPUT.PUT_LINE('ALERT_LOG_DIR='||LOGDIR||PATHSEP); 
          EXCEPTION  -- exception handlers begin 
            WHEN no_data_found THEN  -- catches all 'no data found' errors 
              DBMS_OUTPUT.PUT_LINE ('No Data found for SELECT'); 
            WHEN others THEN  -- handles all other errors 
              DBMS_OUTPUT.PUT_LINE ('Error caught in outer block ['||SQLERRM||'].'); 
        END;
   </command_args>       
  </command>

 <command>
    <command_menu>409</command_menu>
    <command_title>OS sqlplus with prompts and PLSQL</command_title>
    <command_descr><![CDATA[
  Command Summary
    This command retrieves the latest configuration summary detail and provides
    immediate viewing of this data.
    NOTE: Limited summary details are currently available
          More details will be added in coming releases    
      
  Input Requirements
    o Select the desired ADR base
    o Select the desired ADR home
    
  Output Details
    o Example:
                          Summary Detail
          =================================================
        ORACLE_HOME:  /u01/app/oracle/product/11.2.0.1.0
          ...]]></command_descr>
    <command_type>Adr</command_type>    <command_type>OS</command_type>
    <command_prompt1>sys_pass|Please enter like dba_objects name|manager</command_prompt1>
    <command_prompt2>in_value|Please enter like dba_objects name|DBA%</command_prompt2>
    <command_args><![CDATA[
echo "

SET SERVEROUTPUT ON SIZE 1000000
SET ECHO OFF
SET VERIFY OFF
SET DEFINE \"&\"
SET FEEDBACK OFF

PROMPT
PROMPT ========================================================================
PROMPT Enter the name of the object
PROMPT ========================================================================
PROMPT
ACCEPT p_name CHAR PROMPT 'Enter the Object Name: '

VARIABLE l_name VARCHAR2(240)
VARIABLE num_var NUMBER

DECLARE
  l_name    VARCHAR2(240) :=  upper('&p_name');
  num_var   NUMBER :=0;
BEGIN

  dbms_output.put_line('Check count matching l_name: '||l_name );
  select count(*) into num_var from dba_objects
  where object_name like l_name;

  dbms_output.put_line(num_var || ' Count matching l_name: '||l_name );

EXCEPTION
WHEN OTHERS THEN
  dbms_output.put_line('Error encountered: '||sqlerrm);
END;

/

EXIT

" > /tmp/demo.sql
    
    
echo
echo "START TIME: `date`"
echo "Top of OS Script passing in Object Match: %%in_value%% to sqlplus"

$ORACLE_HOME/bin/sqlplus -S /nolog <<Zen
connect system/%%sys_pass%%

@/tmp/demo.sql
%%in_value%%

Zen

echo "The Rest of your OS commands can goes here"
echo "DONE: `date`"

    ]]></command_args>
 </command>





<!-- ALL the internal System commands 5XX SERIES --> 
<!--
   <menu_text><![CDATA[          
  *(1) Properties List All Properties - 510 series 
      (1a) Show da.properties
      (1b) Show user.properties
      (1c) Show session.properties
  (2) File Management / Reports Summary - 520
      *(2a) Show All collected files - 
      (2b) Show Current Session key
      (2c) ... 
  (3) SR Creation and Uploading - 530
      (3a) Package Files for upload
      (3b) Create Draft SR and Upload Collected Files
   <menu_map>1:command:510</menu_map>   
   <menu_map>1a:command:511</menu_map>   
   <menu_map>1b:command:522</menu_map>   
   <menu_map>1c:command:522</menu_map>   
   <menu_map>2:command:520</menu_map>   
   <menu_map>2a:command:520</menu_map>   
   <menu_map>2b:command:522</menu_map> 
   <menu_map>2c:command:523</menu_map> 
   <menu_map>3:command:530</menu_map>   
   <menu_map>3a:command:531</menu_map>   
   <menu_map>3b:command:532</menu_map>   
   <menu_map>B:menu:main</menu_map>
   <menu_default>h:menu:demo_help</menu_default>   
--> 
 <command>
    <command_menu>510</command_menu>
    <command_title>System show properties</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>System</command_type>
    <command_args>show_properties</command_args>   
 </command>    
 <command>
    <command_menu>511</command_menu>
    <command_title>System show da.properties</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>System</command_type>
    <command_args>show_da_properties</command_args>   
 </command>    
 <command>
    <command_menu>512</command_menu>
    <command_title>System show user.properties</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>System</command_type>
    <command_args>show_user_properties</command_args>   
 </command>    
 <!-- Having strange issue with show_session_properties not being found -->
 <command>
    <command_menu>513</command_menu>
    <command_title>System show sesssion propeties</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>System</command_type>
    <command_args>show_session_properties</command_args>   
 </command>    
 <!-- 
    commmand_args>show_last_collection rda|adr|ocm [details=true/{false}] 
    show_last_collection ocm
 --> 
 <command>
    <command_menu>514</command_menu>
    <command_title>Ocm Summary</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Ocm</command_type>    
    <command_args>summary</command_args>   
 </command>    
<command>
    <command_menu>515</command_menu>
    <command_title>Summary Details of Collection</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Ocm</command_type>
    <command_args>summary detail</command_args>   
 </command>    
<command>
    <command_menu>516</command_menu>
    <command_title>System Da Version</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>System</command_type>
    <command_args>show_da_version</command_args>   
 </command>    
<command>
    <command_menu>517</command_menu>
    <command_title>System Component Versions</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>System</command_type>
    <command_args>show_component_versions</command_args>   
 </command>    
 <command>
    <command_menu>520</command_menu>
    <command_title>System File Report Summary</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>System</command_type>
    <command_args>show_file_report_summary</command_args>   
 </command>    
 <command>
    <command_menu>521</command_menu>
    <command_title>System Collected Files for Session</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>System</command_type>
    <!-- timekey is optionally add: session|hour{default}|day|all --> 
    <command_args>show_collected_files session</command_args>   
 </command>    
 <command>
    <command_menu>522</command_menu>
    <command_title>System DA Session Key</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>System</command_type>
    <command_args>show_session_key</command_args>   
 </command>    
 <command>
    <command_menu>523</command_menu>
    <command_title>System Set DA.mos_userid</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>System</command_type>
    <command_prompt1>property_value|Please Enter mos username|</command_prompt1>    
    <command_args>set_user_property DA.mos_userid %%property_value%%</command_args>                    
 </command>    
 <command>
    <command_menu>524</command_menu>
    <command_title>System Set DA.mos_password</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>System</command_type>    
    <command_args>set_wallet_property DA.mos_password</command_args>                     
 </command>    
<!--
      (2e) Change any Da Property: ( i.e. use_wallet ) to true 525
      (2f) Change all Da Properties showing default
      (2g) Reset all Da Properties to default values, rm wallet_key, use_wallet=false
-->
 <command>
    <command_menu>525</command_menu>
    <command_title>System Set user_wallet to True</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>System</command_type>    
    <command_args>set_user_property use_wallet true</command_args>                     
 </command>    
 <command>
    <command_menu>526</command_menu>
    <command_title>System Set prompt_all to True</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>System</command_type>    
    <command_args>set_user_property prompt_all</command_args>                     
 </command>  
 
 <command>
    <command_menu>527</command_menu>
    <command_title>System Reset All da.properties</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>System</command_type>    
    <command_args>reset_user_properties_to_defaults</command_args>                     
 </command>    

 
 <command>
    <command_menu>530</command_menu>
    <command_title>System NOT SURE</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>System</command_type>
    <command_args>not_complete SR_MAIN_MENU</command_args>   
 </command>    
 <command>
    <command_menu>531</command_menu>
    <command_title>System Prompted Packge Collected Files</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>System</command_type>
    <!-- Default is to get hours matching sessions --> 
    <command_prompt1>timekey|Enter timeframe to collect: session {day} or day or month or year|day</command_prompt1>    
    <command_args>package_collected_files %%timekey%%</command_args>   
 </command>    
 <command>
    <command_menu>532</command_menu>
    <command_title>System Create Draft SR</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>System</command_type>
    <command_prompt1>DA.mos_sr_description|Please enter your SR Description|DA Sr Testonly Abstract</command_prompt1>    
    <command_args>create_draft_sr description=%%DA.mos_sr_description%%</command_args>   
 </command>                                                                 
<command>
   <command_menu>533</command_menu>
   <command_title>System Upload File to SR</command_title>  
           <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

   <command_type>System</command_type>
   <command_prompt1>sr_number|If using an existing SR_NUMBER, please enter|</command_prompt1>
   <command_prompt2>upload_file|Please enter full file path to upload(or default collection)|default</command_prompt2>
   <command_prompt3>timekey|Enter timeframe to collect: session {hour} or day or month or year|hour</command_prompt3>
   <command_args>upload srNumber=%%sr_number%% uploadFile=%%upload_file%% %%timekey%%</command_args>
</command>
 <command>
    <command_menu>534</command_menu>
    <command_title>System Package DA Files</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>System</command_type>
    <!-- timekey is optionally add: session|hour{default}|day|all --> 
    <command_prompt1>timekey|Please enter timeframe to collect: session hour or {day} or month or year|day</command_prompt1>
    <command_args>package_collected_files %%timekey%%</command_args>   
 </command>    
  <command>
    <command_menu>540</command_menu>
    <command_title>Download MOS Note</command_title>  
    <command_descr>Download MOS KM Note attachments</command_descr>
    <command_type>System</command_type>
    <command_prompt1>note_id|Please enter MOS Note Number|201804.1</command_prompt1>    
    <command_args>mos_download note_id=%%note_id%% options=</command_args>   
 </command>
  <command>
    <command_menu>541</command_menu>
    <command_title>Download DA Menu</command_title>  
    <command_descr>Download MOS KM Note attachments</command_descr>
    <command_type>System</command_type>
    <command_prompt1>note_id|Please enter MOS Note Number|201804.1</command_prompt1>    
    <command_args>mos_download note_id=%%note_id%% options=menu_file</command_args>   
 </command>
  <command>
    <command_menu>542</command_menu>
    <command_title>Download All Attachments</command_title>  
    <command_descr>Download MOS KM Note attachments</command_descr>
    <command_type>System</command_type>
    <command_prompt1>note_id|Please enter MOS Note Number|201804.1</command_prompt1>    
    <command_args>mos_download note_id=%%note_id%% options=all_attachments</command_args>   
 </command>
  
  
<!-- ALL the internal File commands 6XX SERIES --> 
<!-- These are typical cat, grep, and xpath like unix alternatives -->
 <command>
    <command_menu>601</command_menu>
    <command_title>FileImpl Help</command_title>
    <category_id>collect.file</category_id>
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>File</command_type>
    <command_args>help</command_args>       
</command>   
<command>
    <command_menu>602</command_menu>
    <command_title>FileImpl get_file returned</command_title>
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <category_id>collect.file</category_id>
    <command_type>File</command_type>
    <command_args>get_file file=/etc/passwd</command_args>   
    <command_args_windows>get_file file=config\da.properties</command_args_windows>    
</command>   
 <command>
    <command_menu>603</command_menu>
    <command_title>FileImpl get_file with Line#s</command_title>
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <category_id>collect.file</category_id>
    <command_type>File</command_type>
    <command_args>get_file file=/etc/passwd line_numbers=true</command_args>   
    <command_args_windows>get_file file=file=config\da.properties line_numbers=true</command_args_windows>    
</command>
<!-- 
  NOTE: The file path for xpath works with Unix direction relative slashes as well as absolute DOS paths 
  <collection>
<map id="1">
   <target>oracle_database</target>
   <version>10.x</version>
   <tool>rda</tool>   
   <toolArgs>PROFILE: DB10g</toolArgs>    
</map>   
-->
 <command>
    <command_menu>604</command_menu>
    <command_title>FileImpl xpath Show RDA Collect Defaults</command_title>
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <category_id>collect.file</category_id>
    <command_type>File</command_type>
    <command_args>xpath match=//target|//version|//tool|//toolArgs file=./menus/da_collection_map.xml</command_args>       
</command>   
  

 <command>
    <command_menu>605</command_menu>
    <command_title>FileImpl xpath with contains Set</command_title>
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <category_id>collect.file</category_id>
    <command_type>File</command_type>
    <command_args>xpath contains=set_ match=//command_title|//command_args file=./menus/qa_menus.xml</command_args>           
</command> 
<!-- 
  Show files in the /etc directory
-->
 <command>
    <command_menu>606</command_menu>
    <command_title>FileImpl get_dir File List</command_title>
             <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

     <category_id>collect.file</category_id>
    <command_type>File</command_type>
    <command_prompt1>output_format|Enter output type: xml,html,csv,text|text</command_prompt1>    
    <command_args>get_dir path=/etc match=* output_format=%%output_format%%</command_args>   
    <command_args_windows>get_dir path=D:\tmp match=* output_format=%%output_format%%</command_args_windows>        
</command>   
 <command>
    <command_menu>607</command_menu>
    <command_title>Hex Dump of File</command_title>
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <category_id>collect.file</category_id>
    <command_type>File</command_type>    
    <command_args>od file=%%DA_HOME%%/config/da.properties format=h</command_args>   
    <command_args_windows>od file=%%DA_HOME%%\\config\\da.properties format=h</command_args_windows>        
</command>   
<command>
    <command_menu>608</command_menu>
    <command_title>General Regex Extract and Field using AND matching  Apache.log</command_title>
    <command_descr><![CDATA[
    The filed_filter_regexes can be null and for or will then not be used
    When doing "and", the non-matching fields should show .* for all so 
    they will not cause a field to be excluded.
    Options for output: csv or xml
    
    NOTE: When doing and based searches use regex wild card or ".*" for fields
          not to be included in the AND field matching.
    NOTE: Order of the inputs is IMPORTANT:
    NOTE: New optional command input save_output_to=qa"+ FS + "csp_parsed.xml" 
          after the file= input.
          
      args = new String[] { "-extract_file", "file=qa"+ FS + "csp.log", "save_output_to=qa"+ FS + "csp_parsed.xml", "output_format=xml",            
    
      args = new String[] { "-extract_file", "file=qa"+ FS + "apache_log_small.log", 
                            "output_format=xml", 
                            "regex_extraction=(\\d+\\.\\d+\\.\\d+\\.\\d+) \\- (\\S+) \\[(.+?)\\] \"(.+?)\" (\\d+?) (\\S+) \"(.*?)\" \"(.*?)\"",
                            "fields=ip,user,date,request,ret_code,resp_bytes,url,browser",
                            "row_filter_type=and",
                            "field_filter_regexes=.*,.*, .*, .*RecentSearch.*|.*osso_login_success.*,200,.*,.*,.*"} ;
    ]]></command_descr>
    <category_id>collect.file</category_id>
    <command_type>File</command_type>
    <command_prompt1>IP|Enter regex for IP Address|.*</command_prompt1>    
    <command_prompt2>USER|Enter regex for USER EMAIL|.*@ORACLE.COM</command_prompt2>    
    <command_prompt3>DATE|Enter regex DATE format 10/Sep/2010:07:02:18 -0500|.*Sep.*2010.*</command_prompt3>    
    <command_prompt4>URL_REQUEST|Enter regex for URL REQUEST|GET.*</command_prompt4>    
    <command_prompt5>RETURN_CODE|Enter regex for response code. ie. 200,500|200</command_prompt5>    
    <command_prompt6>OUTPUT_FORMAT|Enter output format of xml or csv|xml</command_prompt6>    
    <command_args>extract_file file=qa/junit_support/file/apache_log_small.log  output_format=%%OUTPUT_FORMAT%% regex_extraction=(\d+\.\d+\.\d+\.\d+) \- (\S+) \[(.+?)\] "(.+?)" (\d+?) (\S+) "(.*?)" "(.*?)" fields=ip,user,date,request,ret_code,resp_bytes,url,browser row_filter_type=and field_filter_regexes=%%IP%%,%%USER%%,%%DATE%%,%%URL_REQUEST%%,%%RETURN_CODE%%,.*,.*,.*</command_args>   
    <command_args_windows>extract_file file=qa\\junit_support\\file\\apache_log_small.log output_format=%%OUTPUT_FORMAT%% regex_extraction=(\d+\.\d+\.\d+\.\d+) \- (\S+) \[(.+?)\] "(.+?)" (\d+?) (\S+) "(.*?)" "(.*?)" fields=ip,user,date,request,ret_code,resp_bytes,url,browser row_filter_type=and field_filter_regexes=%%IP%%,%%USER%%,%%DATE%%,%%URL_REQUEST%%,%%RETURN_CODE%%,.*,.*,.*</command_args_windows>        
</command>   
<command>
    <command_menu>609</command_menu>
    <command_title>General Regex Extract and Field OR matching Apache.log</command_title>
    <command_descr><![CDATA[
    The filed_filter_regexes can be null and for or will then not be used
    When doing "and", the non-matching fields should show .* for all so 
    they will not cause a field to be excluded.
    Options for output: csv or xml
    
    NOTE: When doing or matching use "null" string for fields not to be filtered
          with the or clause.
    
      args = new String[] { "-extract_file", "file=qa"+ FS + "apache_log_small.log", 
                            "output_format=xml", 
                            "regex_extraction=(\\d+\\.\\d+\\.\\d+\\.\\d+) \\- (\\S+) \\[(.+?)\\] \"(.+?)\" (\\d+?) (\\S+) \"(.*?)\" \"(.*?)\"",
                            "fields=ip,user,date,request,ret_code,resp_bytes,url,browser",
                            "row_filter_type=or",
                            "field_filter_regexes=null,null, null, .*RecentSearch.*|.*osso_login_success.*,200,null,null,null"} ;
    ]]></command_descr>
    <command_type>File</command_type>
    <command_prompt1>IP|Enter regex for IP Address|10.159.*</command_prompt1>    
    <command_prompt2>USER|Enter regex for USER EMAIL, use null to skip.|null</command_prompt2>    
    <command_prompt3>DATE|Enter regex DATE format 10/Sep/2010:07:02:18 -0500|.*Sep.*2010.*</command_prompt3>    
    <command_prompt4>URL_REQUEST|Enter regex for URL REQUEST|GET.*</command_prompt4>    
    <command_prompt5>RETURN_CODE|Enter regex for response code. ie. 200,500|302</command_prompt5>    
    <command_prompt6>OUTPUT_FORMAT|Enter output format of xml or csv|xml</command_prompt6>    
    <command_args>extract_file file=qa/junit_support/file/apache_log_small.log  output_format=%%OUTPUT_FORMAT%% regex_extraction=(\d+\.\d+\.\d+\.\d+) \- (\S+) \[(.+?)\] "(.+?)" (\d+?) (\S+) "(.*?)" "(.*?)" fields=ip,user,date,request,ret_code,resp_bytes,url,browser row_filter_type=or field_filter_regexes=%%IP%%,%%USER%%,%%DATE%%,%%URL_REQUEST%%,%%RETURN_CODE%%,null,null,null</command_args>   
    <command_args_windows>extract_file file=qa\\junit_support\\file\\apache_log_small.log output_format=%%OUTPUT_FORMAT%% regex_extraction=(\d+\.\d+\.\d+\.\d+) \- (\S+) \[(.+?)\] "(.+?)" (\d+?) (\S+) "(.*?)" "(.*?)" fields=ip,user,date,request,ret_code,resp_bytes,url,browser row_filter_type=or field_filter_regexes=%%IP%%,%%USER%%,%%DATE%%,%%URL_REQUEST%%,%%RETURN_CODE%%,null,null,null</command_args_windows>        
</command>   
<command>
    <command_menu>610</command_menu>
    <command_title>General Regex Extract and Field OR matching csp.log EM</command_title>
    <command_descr><![CDATA[
    The filed_filter_regexes can be null and for or will then not be used
    When doing "and", the non-matching fields should show .* for all so 
    they will not cause a field to be excluded.
    Options for output: csv or xml
    
    NOTE: When doing or matching use "null" string for fields not to be filtered
          with the or clause.

       args = new String[] { "-extract_file", "file=qa"+ FS + "csp.log", "output_format=xml", 
          "regex_extraction=\\[(.*?)\\] \\[(.*?)\\] \\[(.*?)\\] \\[\\] \\[(.*?)\\] \\[host: (.*?)\\] \\[nwaddr: (.*?)\\] \\[tid: (.*?)\\] \\[userId: (.*?)\\] \\[ecid: (.*?)\\] (.*+)",
          "fields=date,user,error,class,host,ip,tid,userid,ecid,message",
          "row_filter_type=and",
          "field_filter_regexes=2010-08-23T08:34:36.*,.*,ERROR,.*,.*,.*,.*,.*,.*,^SSL.*"} ; 
           field_filter_regexes=2010-08-23T08:34:36.*,.*,ERROR,.*,.*,.*,.*,.*,.*,^SSL.*
           field_filter_regexes=%%DATE%%,%%USER%%,ERROR,.*,.*,.*,.*,.*,.*,%%MESSAGE%%
    ]]></command_descr>
    <category_id>collect.file</category_id>
    <command_type>File</command_type>
    <command_prompt1>DATE|Enter regex DATE format 2010-08-23T08:34:36.722-07:00|2010-08-23.*</command_prompt1>    
    <command_prompt2>USER|Enter regex for EM USER, use null to skip.|sysman</command_prompt2>    
    <command_prompt3>MESSAGE|Enter regex to match message text ie. .*thrown.* .*Excep.*|^SSL.*</command_prompt3>    
    <command_prompt4>OUTPUT_FORMAT|Enter output format of xml or csv|xml</command_prompt4>    
    <command_args>extract_file file=qa/junit_support/file/csp.log save_output_to=qa\\csp_parsed.%%OUTPUT_FORMAT%% output_format=%%OUTPUT_FORMAT%% regex_extraction=\[(.*?)\] \[(.*?)\] \[(.*?)\] \[\] \[(.*?)\] \[host: (.*?)\] \[nwaddr: (.*?)\] \[tid: (.*?)\] \[userId: (.*?)\] \[ecid: (.*?)\] (.*+) fields=date,user,error,class,host,ip,tid,userid,ecid,message row_filter_type=and field_filter_regexes=%%DATE%%,%%USER%%,ERROR,.*,.*,.*,.*,.*,.*,%%MESSAGE%%</command_args>   
    <command_args_windows>extract_file file=qa\\junit_support\\file\\csp.log save_output_to=qa\\csp_parsed.%%OUTPUT_FORMAT%% output_format=%%OUTPUT_FORMAT%% regex_extraction=\[(.*?)\] \[(.*?)\] \[(.*?)\] \[\] \[(.*?)\] \[host: (.*?)\] \[nwaddr: (.*?)\] \[tid: (.*?)\] \[userId: (.*?)\] \[ecid: (.*?)\] (.*+) fields=date,user,error,class,host,ip,tid,userid,ecid,message row_filter_type=and field_filter_regexes=2010-08-23T08:34:36.*,.*,ERROR,.*,.*,.*,.*,.*,.*,^SSL.*</command_args_windows>        
</command>
<command>
    <command_menu>611</command_menu>
    <command_title>Find and zip files under a given directory</command_title>
    <command_descr><![CDATA[      
        zip_matching_files search_dir="+search_dir+" match=" +match + " zip_output="+zip + " "+verbose_text;
        NOTES: verbose defaults to false
               zip_output= is not required and uses default DA_OUTPUT/spool/da_{command_menu}_{session}.xzip
    ]]></command_descr>
    <category_id>collect.file</category_id>
    <command_type>File</command_type>    
    <command_prompt1>DIR|Enter directory to search for packaging files|qa/junit_support</command_prompt1>    
    <command_prompt2>MATCH|Enter regex match for files under %%DIR%%|.*.xml</command_prompt2>    
    <command_prompt3>ZIP_SAVE_FILE|Enter full path to zip file to save matching files|/tmp/ZipSave.zip</command_prompt3> 
    <command_prompt4>RECURSIVE|Search sub-directories under %%DIR%% (true/false)|true</command_prompt4>
    <command_prompt5>VERBOSE|Set to verbose mode to see matching during collection(true/false)|true</command_prompt5>    
    <command_args>zip_matching_files search_dir=%%DIR%% match=%%MATCH%% zip_output=%%ZIP_SAVE_FILE%% verbose_output=%%VERBOSE%% recursive=%%RECURSIVE%%</command_args>   
</command>   


<!-- TESTING SPACES and RDA XML Extraction --> 
 <command>
    <command_menu>612</command_menu>
    <command_title>FileImpl xpath Show RDA Collect Defaults</command_title>
            <command_descr><![CDATA[
          Command Summary
            RDA extraction of sdp_row format xml generated with -G option
            in RDA.

          Command Detail
            o contains=set_ 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <category_id>collect.file</category_id>
    <command_type>File</command_type>
    <command_args>xpath contains=Guarantees match=//sdp_row[@item='Guarantees Delivery']/@item|//sdp_row[@item='Guarantees Delivery']/@value|//sdp_row[@item='Name']/@value file=D:\\da\\dev\\rda\\steve\\collect\\OS_OS_protocol.xml</command_args>       
</command> 

  <!--     
      MATCHING / REGEX and HIGHLIGHTING output       
  -->
  <command>
    <command_menu>50</command_menu>
    <command_title>OS Env Match ORACLE_HOME</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <category_id>collect.os</category_id>
    <command_type>OS</command_type>
    <command_args>env</command_args>   
    <command_args_windows>set</command_args_windows>           
    <command_output_match>basic|containstring|ORACLE_HOME|all:ORACLE_HOME</command_output_match>
    <command_output_true>No action required, your a great Admin!, command: 50 </command_output_true>    
    <command_output_false>See problem YYY, command: 51</command_output_false>
  </command>
  <command>
    <command_menu>51</command_menu>    
    <command_title>OS command output match example</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <category_id>collect.os</category_id>
    <command_type>OS</command_type>
    <command_args>echo Start a string rda ocm adr to match end</command_args>       
    <command_args_windows>echo Start a string rda ocm adr to match end</command_args_windows>    
    <command_output_match>basic|startsWith|Start|match_only</command_output_match>
    <command_output_true>No action required, your a great Admin!, command: 51</command_output_true>
    <command_output_false>See problem 123, Check your CPU %%pattern%%, command: 51</command_output_false>
  </command>
  <command>
    <command_menu>52</command_menu>
    <command_title>OS Env Match ORACLE_HOME</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_args>echo Start a string rda ocm adr to match end</command_args>       
    <command_args_windows>echo Start a string rda ocm adr to match end</command_args_windows>    
    <command_output_match>basic|endsWith|end|match_only</command_output_match>
    <command_output_true>No action required, your a great Admin!, command: 52</command_output_true>
    <command_output_false>See problem 123, Check your CPU %%pattern%%, command: 52</command_output_false>
  </command>
  <command>
    <command_menu>53</command_menu>    
    <command_title>OS Test Match TESTS_TRUE word</command_title> 
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_args>echo TESTS_TRUE</command_args>       
    <command_args_windows>echo TESTS_TRUE</command_args_windows>    
    <command_output_match>basic|=|TESTS_TRUE|all</command_output_match>
    <command_output_true>No action required, your test is TRUE, command: 53</command_output_true>
    <command_output_false>See problem 123, NOT finding TESTS_TRUE, command: 53</command_output_false>
  </command>     
  
   <command>
    <command_menu>54</command_menu>    
    <command_title>Output Save Format demo to DB, XML, etc.</command_title> 
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_args>
    #!/bin/bash
    echo "steve|303-232-2323|690 Blairshire Circle"
    echo "georget|407-232-2323|111 Smith Street"
    </command_args>  
    <!-- 
    output_format=xml|csv|em_metric 
    output_format=xml fields="name,phone,address" input_delimitor="|" storage=DB:CLOB    

CURRENTLY:     
    SHOW LINES TO PARSE:
LINE: steve|303-232-2323|690 Blairshire Circle
<xml>arr1= 2=s</xml>
LINE: georget|407-232-2323|111 Smith Street
<xml>arr1= 2=g</xml>
    -->
    <command_save_format>output_format=xml fields="name,phone,address" input_delimitor="|" skip_lines=1 storage=DB:CLOB</command_save_format>        
  </command>     

    <!-- 
output_format=xml fields="UID,PID,PPID,C,STIME,TTY,TIME,CMD"
[oracle@dtplnx08 da]$ ps -ef
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 Apr04 ?        00:00:02 init [3]
root         2     1  0 Apr04 ?        00:00:02 [migration/0]
    -->
  <command>
    <command_menu>55</command_menu>    
    <command_title>Output Save Format ps -ef, XML, etc.</command_title> 
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_args>
    #!/bin/bash
    ps -ef
    </command_args>  
    <!-- 
    output_format=xml fields="name,phone,address" input_delimitor="|" storage=DB:CLOB        
    -->
    <command_save_format>output_format=xml fields="UID,PID,PPID,C,STIME,TTY,TIME,CMD" skip_lines=1</command_save_format>        
  </command>  

  <!--     
fields="UID,PID,PPID,C,STIME,TTY,TIME,CMD"  storage=DB:FIELDS|CLOB
[oracle@dtplnx08 da]$ ps -ef
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 Apr04 ?        00:00:02 init [3]
root         2     1  0 Apr04 ?        00:00:02 [migration/0]
    -->
  <command>
    <command_menu>56</command_menu>    
    <command_title>Output Save Format ps -ef, DB</command_title> 
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_args>
    #!/bin/bash
    ps -ef
    </command_args>  
    <command_save_format>output_format=xml fields="UID,PID,PPID,C,STIME,TTY,TIME,CMD" skip_lines=1</command_save_format>        
  </command>  
    
  <!--  <command_output_match>regex|{"rda.*\\.[a-z]*"}|{=n|>n|<n|!=n}|{match_every_line|match_any_line}|match_only</command_output_match> -->
  <command>
    <command_menu>60</command_menu>   
    <command_title>OS Test regex match</command_title> 
    <command_descr>
    Command Summary
        
        This command summary is not complete yet!        
        
            Input Requirements
            o None
            
            Ouput Details
            o Location goes in output directory
            
    </command_descr>
    <command_type>OS</command_type>
    <command_args>echo Start a string rda ocm adr to match end</command_args>       
    <command_args_windows>echo Start a string rda ocm adr to match end</command_args_windows>    
    <command_output_match>regex|(?s).*rda.*|>0|match_only:rda</command_output_match>
    <command_output_true>No action required after regex Check, 
             Your a great Admin!, command: 60</command_output_true>
    <command_output_false>See problem 123 after regex Check, 
             Review your CPU %%pattern%%, command: 60</command_output_false>
  </command>   
  <command>
    <command_menu>61</command_menu>
    <command_title>OS Test regex match ORACLE_HOME</command_title> 
    <command_descr>
    Command Summary
        
        This command summary is not complete yet!        
        
            Input Requirements
            o None
            
            Ouput Details
            o Location goes in output directory
            
    </command_descr>
    <command_type>OS</command_type>
    <command_args>env</command_args>   
    <command_args_windows>set</command_args_windows>          
    <!-- Display Choices: match_only|non_match|all -->
    <command_output_match>regex|(?s).*ORACLE_HOME=.*|>0|non_match</command_output_match>
    <command_output_true>No action required for regex 61, found ORACLE_HOME set.</command_output_true>
    <command_output_false>Problem with regex 61: ORACLE_HOME was not set in env.</command_output_false>
  </command>
 <command>
    <command_menu>62</command_menu>
    <command_title>OS Test regex PATH= from env</command_title> 
    <command_descr>
    Command Summary
        
        This command summary is not complete yet!        
        
            Input Requirements
            o None
            
            Ouput Details
            o Location goes in output directory
            
</command_descr>
    <command_type>OS</command_type>
    <category_id>other</category_id>
    <command_args>env | grep PATH</command_args>   
    <command_args_windows>set</command_args_windows>          
    <!-- Display Choices: match_only|non_match|all -->
     <command_output_match>regex|(?s).*PATH=.*|>0|match_only:product</command_output_match>
    <command_output_true>No action required for regex 61, found ORACLE_HOME set in \nPATH with string product in it.</command_output_true>
    <command_output_false>Problem with regex 62: PATH needs $ORACLE_HOME/bin, \nor product in path not set.</command_output_false>
 </command>

  
<!-- TESTING NO OUTPUT Main menu '0' not shown... -->
  <command>
    <command_menu>999</command_menu>
    <category_id>other</category_id>
    <command_title>OS No output testing</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_args>env | grep XXXXX</command_args>   
    <command_args_windows>echo</command_args_windows>           
</command>


<command>
  <command_menu>rda_host</command_menu>
  <command_title>RDA Host Collection</command_title>
  <command_descr><![CDATA[  Command Summary
        
        This command shows a simple Os type command to do a directory
        listing. The output will be available for the customer to review.
        There are several other command types to run RDA, OCM, and ADR
        If other platform specific commands are needed click add Commands.
        
            Input Requirements
            o None
            
            Ouput Details
            o Long listing of the tmp directory in Unix.
                
]]></command_descr>
  <command_type>Rda</command_type>
  <command_args><![CDATA[run_module=host]]></command_args>
</command>

<!-- 
  Example Prereqs: prereq_one_1 
  Purpose: This example shows a single level LOV and it auto-selects with message  
-->
    <command>
    <command_menu>prereq_one_1</command_menu>
    <command_title>Prereq Test Start uses prereq_101</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>        
    <command_prompt1>PREREQ_1011|View directory for path of your choice: |PREREQ_1011:value</command_prompt1>
    <command_args>
echo "unix - check auto select one only lov directory: %%PREREQ_1011%%"    
ls %%PREREQ_1011%%
    </command_args>   
    <command_args_windows>
@echo off
echo "windows check auto select one directory: %%PREREQ_1011%%"
dir %%PREREQ_1011%%
echo %PWD%
    </command_args_windows>        
  </command>  
  

    <command>
    <command_menu>grep_files_lov</command_menu>
    <command_title>Grep files from User pick prereq_files</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>        
    <command_prompt1>DIRECTORY_PATH|Entry your directory to grep files: |menus/*.xml</command_prompt1>
    <command_prompt2>PREREQ_FILES|View directory for dir %%DIRECTORY_PATH%% of your choice: |PREREQ_FILES:value</command_prompt2>
    <command_prompt3>GREP_MATCH|Entry your grep match: |</command_prompt3>
    <command_args>
echo "unix - Searching for match: %%GREP_MATCH%% in directory: %%PREREQ_FILES%%"    
grep %%GREP_MATCH%% %%PREREQ_FILES%% 
    </command_args>   
    <command_args_windows>
@echo off
echo "windows - Searching for match: %%GREP_MATCH%% in directory: %%PREREQ_FILES%%"    
findstr %%GREP_MATCH%% %%PREREQ_FILES%% 
 </command_args_windows>     
  </command>

   <command>
    <command_menu>PREREQ_FILES</command_menu>
    <command_title>List files in Directory matching input</command_title>  
    <command_descr>Test Da Defaulting to a value</command_descr>
    <command_type>OS</command_type>    
        <command_args>
        for f in `echo %%DIRECTORY_PATH%%`        
        do
            echo MENU=$f        
        done
        echo "MENU=/tmp/menu.xml"    
    </command_args>  
      <command_args_windows>
@echo off
echo MENU=%%DA_HOME%%\menus\qa_menus.xml         
echo MENU=%%DA_HOME%%\menus\host.xml         
     </command_args_windows>     
  </command>

    <command>
    <command_menu>prereq_one</command_menu>
    <command_title>Prereq Test Start uses prereq_101</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>        
    <command_prompt1>PREREQ_101|View directory for path of your choice: |PREREQ_101:value</command_prompt1>
    <command_args>
echo "unix - check directory: %%PREREQ_101%%"    
ls %%PREREQ_101%%
    </command_args>   
    <command_args_windows>
@echo off
echo "windows check directory: %%PREREQ_101%%"
dir %%PREREQ_101%%
echo %PWD%
    </command_args_windows>        
  </command>
  
  
  
   <command>
    <command_menu>PREREQ_100</command_menu>
    <command_title>Internal Only One Choice</command_title>  
    <command_descr>Test Da Defaulting to a value</command_descr>
    <command_type>OS</command_type>    
        <command_args>
echo "HOME=%%DA_HOME%%"
    </command_args>   
    <command_args_windows>
@echo off
echo HOME=%%DA_HOME%%    
echo PATH=%PATH%
    </command_args_windows>            
  </command>

  <command>
    <command_menu>PREREQ_101</command_menu>
    <command_title>Internal Only prereq_101</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>    
        <command_args>
echo PATH=$PATH
echo "HOME=/home"    
echo "ORACLE_HOME=$ORACLE_HOME"    
echo DA_HOME=%%DA_HOME%%
    </command_args>   
    <command_args_windows>
@echo off
echo HOME=C:\
echo HOME=D:\
echo HOMEBLANK=
echo DA_HOME=%%DA_HOME%%    
    </command_args_windows>            
  </command>
  
  
  <command>
    <command_menu>PREREQ_1011</command_menu>
    <command_title>Internal Only prereq_101</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>    
        <command_args>
echo DA_HOME=%%DA_HOME%%
    </command_args>   
    <command_args_windows>
@echo off
echo DA_HOME=%%DA_HOME%%    
    </command_args_windows>            
  </command>
  
<!-- 
  Example Prereqs: prereq_two
  Purpose: Used to show n-number of one to many LOVs
  In this example it lists country, state, and city.
-->
  <command>
    <command_menu>prereq_two</command_menu>
    <command_title>Prereq Test uses prereq_201</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>        
    <command_prompt1>PREREQ_201|Pick country|PREREQ_201:value</command_prompt1>
    <command_prompt2>PREREQ_202|Pick State in Country %%PREREQ_201%%|PREREQ_202:value</command_prompt2>
    <command_prompt3>PREREQ_203|Pick City in State %%PREREQ_202%%|PREREQ_203:all</command_prompt3>
    <command_args>
if [ "%%PREREQ_202%%" = "FL" ]; then    
  echo "%%PREREQ_203%% is a great city in country: %%PREREQ_201%% and in the best state: %%PREREQ_202%%"
else 
  echo "%%PREREQ_203%% is an average city in country: %%PREREQ_201%% and in state: %%PREREQ_202%%"
fi
    </command_args>   
    <command_args_windows>
@echo off
if "%%PREREQ_202%%" == "FL" ( 
  echo %%PREREQ_203%% is a great city in country: %%PREREQ_201%% and in state: %%PREREQ_202%%  
  goto SkipEnd
)

echo %%PREREQ_203%% is an average city in country: %%PREREQ_201%% and in state: %%PREREQ_202%%

:SkipEnd

</command_args_windows>
  </command>

  <command>
    <command_menu>PREREQ_201</command_menu>
    <command_title>Internal Only LOV: Pick Country</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>    
        <command_args>
echo COUNTRY=US
echo COUNTRY=CANADA
echo COUNTRY=AFRICA
    </command_args>   
    <command_args_windows>@echo off
echo COUNTRY=US
echo COUNTRY=CANADA
echo COUNTRY=AFRICA
    </command_args_windows>            
  </command>
  
  <command>
    <command_menu>PREREQ_202</command_menu>
    <command_title>Internal Only LOV: Pick State</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>    
        <command_args>
if [ "%%PREREQ_201%%" = "US" ]; then
    echo STATE=FL
    echo STATE=GA
    echo STATE=CA
elif [ "%%PREREQ_201%%" = "CANADA" ]; then
    echo STATE=Montreal
    echo STATE=Qubec
    echo STATE=Alberta
else 
    echo STATE=Tanzere
    echo STATE=Capetown
    echo STATE=SandStone
fi
    </command_args>   
    <command_args_windows>
@echo off
if "%%PREREQ_201%%" == "US" ( 
  echo STATE=FL
  echo STATE=GA
  echo STATE=CA
  goto SkipEnd
)

if "%%PREREQ_201%%" == "CANADA" (
  echo STATE=Montreal
  echo STATE=Qubec
  echo STATE=Alberta
  goto SkipEnd
)

if "%%PREREQ_201%%" == "AFRICA" (
  echo STATE=Tanzere
  echo STATE=Capetown
  echo STATE=SandStone
  goto SkipEnd
)

:SkipEnd
    </command_args_windows>            
  </command>  
  
  
  <command>
    <command_menu>PREREQ_203</command_menu>
    <command_title>Internal Only LOV: Pick City</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>    
        <command_args>
if [ "%%PREREQ_202%%" = "FL" ]; then
    echo Orlando
    echo Tallahassse
    echo Tampa
elif [ "%%PREREQ_202%%" = "GA" ]; then
    echo Atlanta
    echo Montgomery    
else 
    echo LA
    echo Oakland
    echo Redwood Shorts
fi
    </command_args>   
    <command_args_windows>
@echo off
if "%%PREREQ_202%%" == "FL" ( 
   echo Orlando
    echo Tallahassse
    echo Tampa
  goto SkipEnd
)

if "%%PREREQ_202%%" == "GA" (
    echo Atlanta
    echo Montgomery   
  goto SkipEnd
)

if "%%PREREQ_202%%" == "CA" (
    echo LA
    echo Oakland
    echo Redwood Shorts
  goto SkipEnd
)

echo others 

:SkipEnd
    </command_args_windows>            
  </command>   

<!-- 
    Example Prereqs: prereq_three
    Purpose: Used for Web Logic Server to list the WLS Domains and
    then pick the server under a given domain, or all servers.
    
    Note: Optionally add: select_all_option=true for the wls_lovs servers
-->
  <command>
    <command_menu>prereq_three</command_menu>
    <command_title>Prereq WLS Domainds uses prereq_301</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>        
    <command_prompt1>PREREQ_301|Pick domain to process|PREREQ_301:name</command_prompt1>
    <command_prompt2>PREREQ_302|Pick server running in domain %%PREREQ_301%%|PREREQ_302:value</command_prompt2>
    <command_args>
echo "The unix %%PREREQ_301%% domain has server: %%PREREQ_302%% in it."
    </command_args>   
    <command_args_windows>
@echo off
echo Windows wls %%PREREQ_301%% domain has server: %%PREREQ_302%% in it
</command_args_windows>
  </command>

  <command>
    <command_menu>PREREQ_301</command_menu>
    <command_title>Internal Only LOV: Pick Domains</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>System</command_type>       
    <command_args>wls_lovs domains</command_args>   
  </command>


  <command>
    <command_menu>PREREQ_302</command_menu>
    <command_title>Internal Only LOV: Pick Servers from Domain</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>System</command_type>       
    <command_args>wls_lovs servers domain=%%PREREQ_301%% select_all_option=true</command_args>   
  </command>  

  <command>
    <command_menu>prereq_four</command_menu>
    <command_title>Prereq Test uses prereq_401</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>        
    <command_prompt1>PREREQ_401|Pick all country|PREREQ_401:value</command_prompt1>
    <command_args>
  echo "Selected all: %%PREREQ_401%%"
    </command_args>   
    <command_args_windows>
@echo off
echo Selected all: %%PREREQ_401%%
</command_args_windows>
  </command>

  <command>
    <command_menu>static_lov</command_menu>
    <command_title>Prereq Test uses LOV_101</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>        
    <command_prompt1>LOV_101|Do you like to use LOVs|LOV:value:YES=y;NO=n</command_prompt1>
    <command_args>      
      if [ "%%LOV_101%%" = "y" ];then
        echo "You have selected that you do like to use LOVs: %%LOV_101%%"
      else 
        echo "You have selected that you do not like to use LOVs: %%LOV_101%%"
      fi
    </command_args>   
    <command_args_windows>
@echo off
 echo "You have selected %%LOV_101%% for your choice on using LOVs."

</command_args_windows>
  </command>

  <command>
    <command_menu>static_lov2</command_menu>
    <command_title>Prereq Test uses LOV_101 and LOV_102</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_prompt1>LOV_101|Do you want to return name,value or all? |LOV:all:name;value;all</command_prompt1>    
    <command_prompt2>LOV_102|You selected to return %%LOV_101%% portion for the string|LOV:%%LOV_101%%:NAME_PORTION=VALUE_PORTION</command_prompt2>    
    <command_args>
      echo "Assigned value for LOV_101 is [%%LOV_101%%],assigned value for LOV_102 is [%%LOV_102%%]"
      if [ "%%LOV_101%%" = "name" ];then
        echo "Your choice to return only [name] part of second prompt, this is : %%LOV_102%%"
      elif [ "%%LOV_101%%" = "value" ];then 
        echo "Your choice to return only [value] part of second prompt, this is: %%LOV_102%%"
      elif [ "%%LOV_101%%" = "all" ];then 
        echo "Your choice to return [all] of second prompt,this is: %%LOV_102%%"        
      fi
    </command_args>   
    <command_args_windows>
@echo off
 echo "name=%%NAME%% LOV_101=%%LOV_101%%  LOV_102=%%LOV_102%%"
 echo "You have selected %%LOV_101%% for your choice on using LOVs."

</command_args_windows>
  </command>



<!-- NOTE: Blank lines are skipped and this tests that -->
 <command>
    <command_menu>PREREQ_401</command_menu>
    <command_title>Internal Only LOV: Pick Country or all option</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>    
        <command_args>
echo COUNTRY=US
# echo
echo COUNTRY=CANADA
echo COUNTRY=AFRICA
echo Select all of the above
    </command_args>   
    <command_args_windows>@echo off
echo COUNTRYA=US
echo COUNTRYB=CANADA
echo COUNTRYC=AFRICA
echo Select all of the above
    </command_args_windows>            
  </command>

  <command>
      <command_menu>prereq_seven</command_menu>
      <category_id>core.batch</category_id>
      <command_title>run multiple with prereq</command_title>    
      <command_descr>Demo run of multiple commands after getting all prompts.</command_descr>      
      <command_type>System</command_type>      
    <command_prompt1>PREREQ_401|Pick country|PREREQ_401:value</command_prompt1>
    <command_args>run_da_batch cmds=menus/qa_menus.xml|prereq_four,menus/qa_menus.xml|session_set output_files=single</command_args>      
 </command> 
      <command>
      <command_menu>system_run_multiple_wPrereq</command_menu>
      <category_id>core.batch</category_id>
      <command_title>run multiple with prereq</command_title>    
      <command_descr>Demo run of multiple commands after getting all prompts.</command_descr>      
      <command_type>System</command_type>      
    <command_prompt1>PREREQ_401|Pick country|PREREQ_401:value</command_prompt1>
    <command_args>run_da_batch cmds=menus/qa_menus.xml|prereq_four,menus/qa_menus.xml|session_set output_files=single</command_args>      
   </command>
         <command>
      <command_menu>system_run_multiple_wPrereq_two</command_menu>
      <category_id>core.batch</category_id>
      <command_title>run multiple with prereq</command_title>    
      <command_descr>Demo run of multiple commands after getting all prompts.</command_descr>      
      <command_type>System</command_type> 
    <command_prompt1>PREREQ_201|Pick country|PREREQ_201:value</command_prompt1>
    <command_prompt2>PREREQ_202|Pick State in Country %%PREREQ_201%%|PREREQ_202:value</command_prompt2>
    <command_prompt3>PREREQ_203|Pick City in State %%PREREQ_202%%|PREREQ_203:all</command_prompt3>      
    <command_args>run_da_batch cmds=menus/qa_menus.xml|PREREQ_two,menus/qa_menus.xml|session_set output_files=single</command_args>      
   </command>
<!-- 
  Example Prereqs: prereq_one
  Purpose: This example shows a single level LOV.  
-->
  <command>
    <command_menu>prereq_five</command_menu>
    <command_title>Prereq Test Start uses prereq_501</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>        
    <command_prompt1>PREREQ_501|View directory for path of your choice: |PREREQ_501:value</command_prompt1>
    <command_prompt2>inputx|testing prereq returned line: %%PREREQ_501%%|xyz_default</command_prompt2>
    <command_args>
echo %%PREREQ_501%%
echo "unix"    
echo "input %%inputx%% done"
echo ending_line
    </command_args>   
    <command_args_windows>
@echo off
echo "windows"
echo %%PREREQ_501%%
echo input %%inputx%% done
echo ending_line
    </command_args_windows>        
  </command>

  <command>
    <command_menu>PREREQ_501</command_menu>
    <command_title>Internal Only prereq_501</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>    
        <command_args>
echo "LINE_ONE=ONE"
echo "LINE Two=TWO"
</command_args>   
    <command_args_windows>
@echo off
REM set | find "HOME"
echo LINE_ONE=ONE
echo LINE Two=TWO
    </command_args_windows>            
  </command>

 <command>
    <command_menu>prereq_six_one</command_menu>
    <command_title>Sets value for the command_args token in prereq command.Uses PREREQ_SIX_LOV</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>        
    <command_prompt1>SAVE_ONCE.MY_DIR|Hit return to accept the default directory purposed: |/tmp</command_prompt1>
    <command_prompt2>PREREQ_SIX_LOV|Enter a file of your choice: |PREREQ_SIX_LOV:value</command_prompt2>
    <command_args>
echo "MY_FILE must appear as /tmp/myFile - No token chars should appear here"
    </command_args>   
    <command_args_windows>
@echo off
echo "MY_FILE must appear as /tmp/myFile - No token chars should appear here"
    </command_args_windows>        
  </command>

 <command>
    <command_menu>prereq_six_two</command_menu>
    <command_title>Uses the value set and tokenizes command_args in prereq command.Uses PREREQ_SIX_LOV</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>        
    <command_prompt1>SAVE_ONCE.MY_DIR|Enter a directory of your choice: |/tmp</command_prompt1>
    <command_prompt2>PREREQ_SIX_LOV|Enter a file of your choice: |PREREQ_SIX_LOV:value</command_prompt2>
    <command_args>
echo "MY_FILE must appear as /tmp/myFile - No token chars should appear here"
    </command_args>   
    <command_args_windows>
@echo off
echo "MY_FILE must appear as /tmp/myFile - No token chars should appear here"
    </command_args_windows>        
  </command>

   <command>
    <command_menu>PREREQ_SIX_LOV</command_menu>
    <command_title>Internal Only One Choice</command_title>  
    <command_descr>Test Da Defaulting to a value</command_descr>
    <command_type>OS</command_type>    
        <command_args>
MY_DIR=%%SAVE_ONCE.MY_DIR%%
MY_FILE=$MY_DIR/myFile
export MY_DIR MY_FILE
echo "MY_FILE=$MY_FILE"    
    </command_args>   
    <command_args_windows>
@echo off
MY_DIR=%%SAVE_ONCE.MY_DIR%%
MY_FILE=$MY_DIR/myFile
echo "MY_FILE=$MY_FILE"    
    </command_args_windows>            
  </command>

<!-- 
      ALL the SQL commands 7XX SERIES 
      NOTE: Not supporting connect / as sysdba yet
      
      Commmand_args must start with: sql|primary_keys| sqlreport(future) & invalid_objects
      
      Then must be followed by all the args in name value pairs.
      
      ie. output_format=text user=%%SQL_USER%% pass=%%SQL_PASS%% port=%%SQL_PORT%% sid=%%SQL_SID%%
      where: output_format=text,csv,xml,html (default=text)
      
-->   
  <command>
    <command_menu>700</command_menu>    
    <command_title>Sql Version</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Sql</command_type>
    <command_args>version</command_args>       
  </command>
    <command>
    <command_menu>701</command_menu>    
    <command_title>Sql Help</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Sql</command_type>
    <command_args>help</command_args>       
  </command>
  
  <command>
    <command_menu>702</command_menu>
    <command_title>View Invalid Objects</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Sql</command_type>
    <command_prompt1>SQL_USER|Please enter user to connect as|scott</command_prompt1>        
    <command_prompt2>SQL_PASS|Please enter sql password|tiger</command_prompt2>    
    <command_prompt3>SQL_PORT|Please enter the listener port|1521</command_prompt3>    
    <command_prompt4>SQL_SID|Please enter sid|V1121</command_prompt4>    
    <command_prompt5>OBJECT_NAME_LIKE|Please enter object_name like match .ie. DA%|DA%</command_prompt5>    
    <command_prompt6>OBJECT_TYPE_LIKE|Please enter object_type like|%</command_prompt6>        
    <command_prompt7>SHOW_FIELDS|Please enter fields to show .ie. object_name,status|object_name,object_type,status</command_prompt7>        
    <command_args>invalid_objects output_format=csv db_user=%%SQL_USER%% db_pass=%%SQL_PASS%% db_port=%%SQL_PORT%% db_sid=%%SQL_SID%%  object_name_like=%%OBJECT_NAME_LIKE%% object_type_like=%%OBJECT_TYPE_LIKE%% show_fields=%%SHOW_FIELDS%% output_delimiter=| show_sql    
    </command_args>       
  </command>
  
<!-- Normal testing, prompt for everything except default machine -->  
  <command>
    <command_menu>703</command_menu>    
    <command_title>Sql Select Prompt Login</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

        <command_type>Sql</command_type>
        <command_prompt1>SQL_USER|Please enter user to connect as|scott</command_prompt1>        
        <command_prompt2>SQL_PASS|Please enter sql password|</command_prompt2>    
        <command_prompt3>SQL_MACHINE|Please enter the db host|localhost</command_prompt3>        
        <command_prompt4>SQL_PORT|Please enter the listener port|1521</command_prompt4>    
        <command_prompt5>SQL_SID|Please enter sid|V1121</command_prompt5>    
        <command_prompt6>SQL_OUTPUT|Please output type of xml,csv,html,(text)|csv</command_prompt6>    
        <command_args>sql output_format=%%SQL_OUTPUT%% db_user=%%SQL_USER%% db_machine=%%SQL_MACHINE%% db_pass=%%SQL_PASS%% db_port=%%SQL_PORT%% db_sid=%%SQL_SID%%
        select * from user_objects where object_name like 'EM%'    
       </command_args>       
  </command>

<!-- Tests default output_format(text), and default port=1521, machine=current host -->
  <command>
    <command_menu>704</command_menu>    
    <category_id>install</category_id>
    <command_title>Sql Shows USER_OBJECTS like E% defaults port </command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Sql</command_type>
    <command_prompt1>SQL_USER|Please enter user to connect as|scott</command_prompt1>        
    <command_prompt2>SQL_PASS|Please enter sql password|tiger</command_prompt2>        
    <command_prompt3>SQL_SID|Please enter sid|V1121</command_prompt3>
    <command_prompt4>SAVE_REPEAT.SQL|Please enter SQL|select dummy from dual</command_prompt4>
    <command_args>sql db_user=%%SQL_USER%% db_pass=%%SQL_PASS%% db_sid=%%SQL_SID%% show_sql=true
    %%SAVE_REPEAT.SQL%%    
   </command_args>       
  </command>  

<!-- 
     tests failure error message by not prompting for username or password 
     To text language specific output: export LANG=fr_FR or LANG=es_US (spanish)
-->  
  <command>
    <command_menu>705</command_menu>    
    <category_id>install.db</category_id>
    <command_title>Sql Shows USER_OBJECTS like E%</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Sql</command_type>    
    <command_prompt1>SQL_SID|Please enter sid|V1121</command_prompt1>
    <command_prompt2>OBJECT_NAME_LIKE|Please object_name like|%</command_prompt2>
    <command_args>sql db_sid=%%SQL_SID%%
    select object_name, object_type, status, last_ddl_time 
    from user_objects where object_name like '%%OBJECT_NAME_LIKE%%'    
   </command_args>       
  </command>  


<!-- Tests default output_format(text), and default port=1521, machine=current host 
     Special report format with multiple SQLs: 
        report=html|xml|csv for each sql
        
        NOTE: Need to have ; on a line of its own ??
-->
  <command>
    <command_menu>706</command_menu>    
    <category_id>install</category_id>
    <command_title>Report SQL Testing from db_sql  </command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Sql</command_type>
    <command_prompt1>SQL_USER|Please enter user to connect as|scott</command_prompt1>        
    <command_prompt2>SQL_PASS|Please enter sql password|tiger</command_prompt2>        
    <command_prompt3>SQL_SID|Please enter sid|V1121</command_prompt3>
    <command_prompt4>OBJECT_NAME_LIKE|Please object_name like|%</command_prompt4>
    <command_prompt5>OBJECT_TYPE_LIKE|Please object_type like|TABLE</command_prompt5>
    <command_prompt6>SQL_OUTPUT|Please output type of xml,csv,html,(text)|csv</command_prompt6>
    <command_args>sql_report output_format=%%SQL_OUTPUT%% db_user=%%SQL_USER%% db_pass=%%SQL_PASS%% db_sid=%%SQL_SID%% show_sql=true
    # REM Title=Typical Object Viewer Matching NAME: %%OBJECT_NAME_LIKE%% 
    select object_name, object_type, status, last_ddl_time 
    from user_objects 
    where object_name like '%%OBJECT_NAME_LIKE%%' AND
          object_type like '%%OBJECT_TYPE_LIKE%%'
    ;

    # REM Title=Count of Objects matching: %%OBJECT_NAME_LIKE%% 
    select count(*) OBJECTS_COUNT from user_objects 
    where object_name like '%%OBJECT_NAME_LIKE%%' and object_type like '%%OBJECT_TYPE_LIKE%%'
    ;
    
   </command_args>       
  </command>  

  <command>
    <command_menu>707</command_menu>    
    <command_title>Sql Select Prompt Login</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Sql</command_type>
    <command_prompt1>JDBC|Enter jdbc details user:machine:port:sid|system:localhost:1521:%%ORACLE_SID%%</command_prompt1>        
    <command_prompt2>SQL_PASS|Please enter sql password|</command_prompt2>    
    <command_prompt3>SQL_OUTPUT|Please output type of xml,csv,html,(text)|csv</command_prompt3>    
    <command_args>sql output_format=%%SQL_OUTPUT%% jdbc=%%SQL_PASS%%:%%JDBC%%
    select * from user_objects where object_name like 'A%'    
   </command_args>       
  </command>

<command>
  <command_menu>my_command</command_menu>  
  <category_id>backup</category_id>
  <command_title>Short description less than 40 chars.</command_title>
  <command_descr><![CDATA[  Command Summary
        
        This command shows a simple Os type command to do a directory
        listing. The output will be available for the customer to review.
        There are several other command types to run RDA, OCM, and ADR
        If other platform specific commands are needed click add Commands.
        
            Input Requirements
            o None
            
            Ouput Details
            o Long listing of the tmp directory in Unix.
                
]]></command_descr>
  <command_type>OS</command_type>
  <command_args><![CDATA[ls -l /tmp]]></command_args>
</command>


<!--  WLS IMPL
################################################################################
     help|version|summary [detail] |status | validate_requirements | wls_file {file} | wls_cmd CMD TEXT in script
     need: collect and summary
     
     Most important one: wls_cmd (connected and disconnected mode)
     wls_cmd 
-->
  <command>
    <command_menu>801</command_menu>    
    <category_id>help</category_id>
    <command_title>WLS Help Information</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Wls</command_type>        
    <command_args>help</command_args>       
  </command>  

  <command>
    <command_menu>802</command_menu>    
    <category_id>setup</category_id>
     <command_title>WLS Setup Information</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Wls</command_type>        
    <command_args>version</command_args>       
  </command>  

<command>
    <command_menu>803</command_menu>    
    <category_id>setup</category_id>
    <command_title>WLS Summary</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Wls</command_type>        
    <command_args>summary</command_args>       
  </command>  

<command>
    <command_menu>804</command_menu>    
    <category_id>setup</category_id>
    <command_title>WLS Status</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Wls</command_type>        
    <command_args>status</command_args>       
  </command>  

<command>
    <command_menu>805</command_menu>    
    <category_id>setup</category_id>
    <command_title>WLS Validate WL_HOME, MW_HOME, etc.</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Wls</command_type>        
    <command_args>validate_requirements</command_args>       
  </command>  

  <command>
    <command_menu>806</command_menu>        
    <command_title>WLS Python test script</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Wls</command_type>    
    <command_prompt1>FILE_PATH|Please enter path of WLS Script file to run|test.py</command_prompt1>    
    <command_args>wls_file script_path=%%FILE_PATH%%</command_args>       
  </command>  

  <command>
    <command_menu>807</command_menu>       
    <command_title>WLS Example of Connected Mode</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Wls</command_type>    
    <command_prompt1>USER|Please the WLS User for connected mode|weblogic</command_prompt1>    
    <command_prompt2>PASS_WORD|Please the WLS password for connected mode|weblogic1</command_prompt2>    
    <command_prompt3>URI|Please the URI connect string|t3://localhost:7001</command_prompt3>    
    <command_args>wls_cmds user=%%USER%% pass=%%PASS_WORD%% uri=%%URI%%
p=pwd()
print p
serverConfig()
print '## ServerConfig() Environment ############################################'
output=ls('a')
print output
p=pwd()
print p
serverRuntime() 
print '## serverRuntime() Environment ############################################'
print 'domainName=',domainName
print 'connected=',connected
p=pwd()
print p
# print 'ServerName=', domainService.getServerName()
# print 'user=', user
print 'home=', home
print 'serverName=', serverName
print 'isAdminServer=', isAdminServer
output=ls('a')
print output
help()
print 'Script ran successfully ...' 

    </command_args>       
  </command>  
  
  <command>
    <command_menu>808</command_menu>        
    <command_title>WLS Not connected Mode</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Wls</command_type>        
    <command_args>wls_cmds
out=ls()
print out

   </command_args>       
  </command>  
 
 <!-- ISSUES WITH THIS find('Listen');  But very powerful, need to figure it out -->
 <command>
    <command_menu>809</command_menu>        
    <command_title>WLS find MBean Search</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Wls</command_type>    
    <command_prompt1>FIND_CMD|Please enter word to match MBean named key(s)|Listen</command_prompt1>    
    <command_args>wls_find find=%%FIND_CMD%%</command_args>       
  </command>  

 <command>
    <command_menu>810</command_menu>       
    <command_title>WLS Connected Mode Run Any Command</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Wls</command_type>    
    <command_prompt1>USER|Please the WLS User for connected mode|weblogic</command_prompt1>    
    <command_prompt2>PASS_WORD|Please the WLS password for connected mode|weblogic1</command_prompt2>    
    <command_prompt3>URI|Please the URI connect string|t3://localhost:7001</command_prompt3>    
    <command_prompt4>YOUR_COMMAND|Please enter your own command like ls() or listIncidents()|ls()</command_prompt4>    
    <command_args>wls_cmds user=%%USER%% pass=%%PASS_WORD%% uri=%%URI%%
p=pwd()
print p
serverConfig()
print '## %%YOUR_COMMAND%% ############################################'
output=%%YOUR_COMMAND%%
print output
print 'Script ran custom command successfully ...' 
    </command_args>       
  </command>  

 <command>
    <command_menu>811</command_menu>       
    <command_title>WLS Connected Command as File using wlst.sh</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>Wls</command_type>    
    <command_prompt1>USER|Please the WLS User for connected mode|weblogic</command_prompt1>    
    <command_prompt2>PASS_WORD|Please the WLS password for connected mode|weblogic1</command_prompt2>    
    <command_prompt3>URI|Please the URI connect string|t3://localhost:7001</command_prompt3>    
    <command_prompt4>YOUR_COMMAND|Please enter your own command like ls() or listIncidents()|ls()</command_prompt4>    
    <command_args>wls_file
connect('%%USER%%', '%%PASS_WORD%%', '%%URI%%')
print '## %%YOUR_COMMAND%% ############################################'
output=%%YOUR_COMMAND%%
print output
print 'Script ran successfully ...' 
    </command_args>       
</command>  


<!--  
    ############################################################################
     ARU COMMANDS
    ############################################################################
    <menu_map>1:command:aru_validate_101</menu_map>
    <menu_map>2:command:aru_status_102</menu_map>
    <menu_map>3:command:aru_readme_103</menu_map>
    <menu_map>4:command:aru_details_104</menu_map>
    <menu_map>5:command:aru_download_ebs_105</menu_map>
    <menu_map>6:menu:aru_download_release_106</menu_map>   
    <menu_map>B:menu:main</menu_map>   
   
      String credentials ="mos_user=steve.andrew@oracle.com mos_pass=XXXX " ;
      args = new String[] { "-help" } ;
      args = new String[] { "-download_patch_release bug=6880880 platform=46 release_id=80111000" } ;
      String ebs_solaris_bug = "3610099" ; // 1307174 Jul 21  2005 p3610099_11i_SOLARIS.zip (1.4 Meg) type: 453
      args = new String[] { "-download_ebs_patch bug=" + ebs_solaris_bug + " platform=453 " +credentials } ;
      args = new String[] { "-download_readme bug=" + ebs_solaris_bug + " platform=453 " +credentials } ;
      // SAME with no platform: 
      args = new String[] { "-bug_details bug=" + ebs_solaris_bug + " " + credentials } ; 
      // DETAILS: with or without filter using platform
      args = new String[] { "-bug_details bug=" + ebs_solaris_bug + " platform=912 " +credentials } ;
      args = new String[] { "-validate_requirements " +  credentials } ; /* calls validateRequirements */
      args = new String[] { "-status " + credentials } ; /* Works basic test status - non-connected mode */
      
     <command>
    <command_menu>aru_validate_101</command_menu>
    <command_title>Aru Patch status check</command_title>  
    <command_descr>Aru Status check</command_descr>
    <command_type>Aru</command_type>    
    <command_prompt1>MOS_USER|Please enter your MOS user id |steve.andrew@oracle.com</command_prompt1>        
    <command_prompt2>MOS_PASS|Please enter sql password|tiger</command_prompt2>    
    <command_prompt3>ARU_BUG|Please enter the bug number to get readme for|6880880</command_prompt3>    
    <command_prompt4>ARU_PLATFORM|Please enter the platform id (ie. 453 for Solaris, 912 NT, 46 Linux|46</command_prompt4>    
    <command_args>env</command_args>       
    </command>    

    // PROXY SETTINGS SaveOnce probably...
    // propertiesManager.addUserProperty(propertyName, propertyValue); 
    // propertiesManager.addUserProperty("http.proxyHost", "XXXXXXXwww-proxy.test-domain.com");
    // propertiesManager.addDaProperty("http.proxyPort", "80");
    // propertiesManager.addDaProperty("https.proxyHost", "www-proxy.test-domain.com");
    // propertiesManager.addDaProperty("https.proxyPort", "443");     
-->
   <command>
    <command_menu>aru_status_101</command_menu>
    <command_title>Aru Patch status check</command_title>  
    <command_descr>Aru Status check</command_descr>
    <command_type>Aru</command_type>    
    <command_prompt1>MOS_USER|Please enter your MOS user id |steve.andrew@oracle.com</command_prompt1>        
    <command_prompt2>MOS_PASS|Please enter MOS password|</command_prompt2>
    <command_prompt3>SAVE_ONCE.http.proxyHost|Please enter the http proxy_host as needed|</command_prompt3>
    <command_prompt4>SAVE_ONCE.http.proxyPort|Please enter the http proxy_port as needed|80</command_prompt4>
   <command_args>status mos_user=%%MOS_USER%% mos_pass=%%MOS_PASS%%</command_args>       
  </command>    

   <command>
    <command_menu>aru_validate_102</command_menu>
    <command_title>Aru System validation</command_title>  
    <command_descr>Aru validation checks URL connection of web service</command_descr>
    <command_type>Aru</command_type>    
    <command_prompt1>MOS_USER|Please enter your MOS user id |steve.andrew@oracle.com</command_prompt1>        
    <command_prompt2>MOS_PASS|Please enter MOS password|</command_prompt2>
    <command_prompt3>SAVE_ONCE.http.proxyHost|Please enter the http proxy_host as needed|</command_prompt3>
    <command_prompt4>SAVE_ONCE.http.proxyPort|Please enter the http proxy_port as needed|80</command_prompt4>
    <command_args>validate_requirements mos_user=%%MOS_USER%% mos_pass=%%MOS_PASS%%</command_args>       
  </command>    
  
     <command>
    <command_menu>aru_readme_103</command_menu>
    <command_title>Get Aru Patch Readme</command_title>  
    <command_descr>Download patch readme for a given platform</command_descr>
    <command_type>Aru</command_type>    
    <command_prompt1>MOS_USER|Please enter your MOS user id |steve.andrew@oracle.com</command_prompt1>        
    <command_prompt2>MOS_PASS|Please enter MOS password|</command_prompt2>    
    <command_prompt3>ARU_BUG|Please enter the bug number to get readme for|6880880</command_prompt3>    
    <command_prompt4>ARU_PLATFORM|Please enter the platform id ie. 453 for Solaris, 912 NT, 46 Linux|46</command_prompt4>
    <command_prompt5>SAVE_ONCE.http.proxyHost|Please enter the http proxy_host as needed|</command_prompt5>
    <command_prompt6>SAVE_ONCE.http.proxyPort|Please enter the http proxy_port as needed|80</command_prompt6>
   <command_args>download_readme mos_user=%%MOS_USER%% mos_pass=%%MOS_PASS%% bug=%%ARU_BUG%% platform=%%ARU_PLATFORM%%</command_args>       
  </command>    
  
  <command>
    <command_menu>aru_details_104</command_menu>
    <command_title>Review ARU Patch Details</command_title>  
    <command_descr>Check and review the details from ARU on a given patch.</command_descr>
    <command_type>Aru</command_type>    
    <command_prompt1>MOS_USER|Please enter your MOS user id |steve.andrew@oracle.com</command_prompt1>        
    <command_prompt2>MOS_PASS|Please enter MOS password|</command_prompt2>    
    <command_prompt3>ARU_BUG|Please enter the bug number to get readme for|6880880</command_prompt3>    
    <command_prompt4>ARU_PLATFORM|Please enter the platform id ie. 453 for Solaris, 912 NT, 46 Linux|46</command_prompt4>
    <command_prompt5>SAVE_ONCE.http.proxyHost|Please enter the http proxy_host as needed|</command_prompt5>
    <command_prompt6>SAVE_ONCE.http.proxyPort|Please enter the http proxy_port as needed|80</command_prompt6>
    <command_args>bug_details mos_user=%%MOS_USER%% mos_pass=%%MOS_PASS%% bug=%%ARU_BUG%% platform=%%ARU_PLATFORM%%</command_args>   
  </command>    

<command>
    <command_menu>aru_download_ebs_105</command_menu>
    <command_title>Download EBS patch</command_title>  
    <command_descr>Download EBS patch</command_descr>
    <command_type>Aru</command_type>    
    <command_prompt1>MOS_USER|Please enter your MOS user id |steve.andrew@oracle.com</command_prompt1>        
    <command_prompt2>MOS_PASS|Please enter MOS password|</command_prompt2>    
    <command_prompt3>ARU_BUG|Please enter the bug number to get readme for|3610099</command_prompt3>  
    <command_prompt4>ARU_PLATFORM|Please enter the platform id ie. 453 for Solaris, 912 NT, 46 Linux|453</command_prompt4>    
    <command_prompt5>DOWNLOAD_DIRECTORY|Please enter the directory to download|/tmp/</command_prompt5>
   <command_args>download_ebs_patch mos_user=%%MOS_USER%% mos_pass=%%MOS_PASS%% bug=%%ARU_BUG%% platform=%%ARU_PLATFORM%% download_directory=%%DOWNLOAD_DIRECTORY%%</command_args>       
  </command>    

<command>
    <command_menu>aru_download_release_106</command_menu>
    <command_title>Aru Patch Download Release check</command_title>  
    <command_descr>Aru Download based on Release check</command_descr>
    <command_type>Aru</command_type>    
    <command_prompt1>MOS_USER|Please enter your MOS user id |steve.andrew@oracle.com</command_prompt1>        
    <command_prompt2>MOS_PASS|Please enter MOS password|</command_prompt2>    
    <command_prompt3>SAVE_REPEAT.QA_MENU.ARU_BUG|Please enter the bug number to get readme for|6880880</command_prompt3>  
    <command_prompt4>SAVE_ONCE.QA_MENU.ARU_PLATFORM|Please enter the platform id ie. 453 for Solaris, 912 NT|46</command_prompt4>    
    <command_prompt5>ARU_RELEASE_ID|Please enter the release_id|80111000</command_prompt5>                                                                  
   <command_args>download_patch_release mos_user=%%MOS_USER%% mos_pass=%%MOS_PASS%% bug=%%SAVE_REPEAT.QA_MENU.ARU_BUG%% platform=%%SAVE_ONCE.QA_MENU.ARU_PLATFORM%% release_id=%%ARU_RELEASE_ID%%</command_args>       
  </command>    
  
  <command>
    <command_menu>aru_download_release_107</command_menu>
    <command_title>Aru Patch Download Release check for R12 Basedon value</command_title>  
    <command_descr>Aru Download basedon A, B, C value for R12</command_descr>
    <command_type>Aru</command_type>    
    <command_prompt1>MOS_USER|Please enter your MOS user id |steve.andrew@oracle.com</command_prompt1>        
    <command_prompt2>MOS_PASS|Please enter MOS password|</command_prompt2>    
    <command_prompt3>SAVE_REPEAT.QA_MENU.ARU_BUG|Please enter the bug number to download or 9062910|13420532</command_prompt3>  
    <command_prompt4>SAVE_ONCE.QA_MENU.ARU_PLATFORM|Please enter the platform id ie. 912 NT, 453 Solaris|46</command_prompt4>        
    <command_prompt5>BASED_ON|Please enter the basedon aru value of R12 patch|A</command_prompt5>
   <command_args>download_ebs_patch mos_user=%%MOS_USER%% mos_pass=%%MOS_PASS%% bug=%%SAVE_REPEAT.QA_MENU.ARU_BUG%% platform=%%SAVE_ONCE.QA_MENU.ARU_PLATFORM%% based_on=%%BASED_ON%%</command_args>       
  </command>   

  <command>
    <command_menu>prompt_std</command_menu>    
    <command_title>Basic Prompt</command_title>    
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_prompt1>DIR|Please enter value for directory |%%DIR%%</command_prompt1>    
    <command_prompt2>FILTER|Please enter value for filter|%%FILTER%%</command_prompt2>    
    <command_prompt3>PROMPTxt|You have selected %%DIR%% in prompt1|%%PROMPTxt%%</command_prompt3>    
    <command_args>echo Showing files matching %%FILTER%% in directory %%DIR%%
                  echo you wanted dir %%DIR%% and now you have changed dir to %%PROMPTxt%%</command_args>       
    <command_args_windows>
      @echo off
      echo "Showing files matching %%FILTER%% in directory %%DIR%%"
      echo "You wanted dir %%DIR%% and now you have changed dir to %%PROMPTxt%%"
   </command_args_windows>       
  </command>

  <command>
    <command_menu>prompt_std_SaveOnce</command_menu>    
    <command_title>Basic Prompt SAVE_ONCE</command_title>    
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_prompt1>SAVE_ONCE.DIR|Please enter value for directory|/tmp</command_prompt1>    
    <command_prompt2>SAVE_ONCE.FILTER|Please enter value for filter|qa.xml</command_prompt2>    
    <command_args>echo Showing files matching %%SAVE_ONCE.FILTER%% in directory %%SAVE_ONCE.DIR%%</command_args>       
    <command_args_windows>
     @echo off
     echo "Showing files matching %%SAVE_ONCE.FILTER%% in directory %%SAVE_ONCE.DIR%%"
    </command_args_windows>       
  </command>

  <command>
    <command_menu>prompt_std_SaveRepeat</command_menu>    
    <command_title>Basic Prompt SAVE_REPEAT</command_title>    
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_prompt1>SAVE_REPEAT.DIR|Please enter value for directory|/tmp</command_prompt1>    
    <command_prompt2>SAVE_REPEAT.FILTER|Please enter value for filter|qa.xml</command_prompt2>    
    <command_args>echo Showing files matching %%SAVE_REPEAT.FILTER%% in directory %%SAVE_REPEAT.DIR%%</command_args>       
    <command_args_windows>
     @echo off
     echo "Showing files matching %%SAVE_REPEAT.FILTER%% in directory %%SAVE_REPEAT.DIR%%"
    </command_args_windows>       
  </command>

  <command>
    <command_menu>prompt_std_SaveWallet</command_menu>    
    <command_title>Basic Prompt SAVE_WALLET</command_title>    
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_prompt1>SAVE_WALLET.PASS|Please enter the password for the user|</command_prompt1>    
    <command_args>echo Password for user is %%SAVE_WALLET.PASS%%</command_args>       
    <command_args_windows>
     @echo off
     echo "Password for user is %%SAVE_WALLET.PASS%%"
    </command_args_windows>       
  </command>

  <command>
    <command_menu>prompt_std_RepeatWallet</command_menu>    
    <command_title>Basic Prompt REPEAT_WALLET</command_title>    
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_prompt1>REPEAT_WALLET.PASS|Please enter the password for the user|</command_prompt1>    
    <command_args>echo Password for user is %%REPEAT_WALLET.PASS%%</command_args>       
    <command_args_windows>
     @echo off
     echo "Password for user is %%REPEAT_WALLET.PASS%%"
    </command_args_windows>       
  </command>

  <command>
   <command_menu>PREREQ_LOV_NUMBERS</command_menu>
   <command_title>Internal Only testing prereq LOV showing all numbers</command_title>  
   <command_descr>Displays a list of numbers</command_descr>
   <command_type>OS</command_type>    
   <command_args>echo ONE=1;echo TWO=2;echo THREE=3;echo FOUR=4</command_args>   
   <command_args_windows>
    @echo off
    echo "ONE=1"
    echo "TWO=2"
    echo "THREE=3"
    echo "FOUR=4"    
   </command_args_windows>   
  </command>

  <command>
    <command_menu>dyn_lov_numbers</command_menu>    
    <command_title>Dynamic LOV using numbers</command_title>    
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_prompt1>PREREQ_LOV_NUMBERS|Please select a number|PREREQ_LOV_NUMBERS:name</command_prompt1>    
    <command_args>echo you have selected option %%PREREQ_LOV_NUMBERS%%</command_args>       
    <command_args_windows>
     @echo off
     echo "You have selected option %%PREREQ_LOV_NUMBERS%%"
   </command_args_windows>       
  </command>

  <command>
   <command_menu>PREREQ_LOV_NUMBERS_AUTOSELECT</command_menu>
   <command_title>Internal Only testing prereq LOV showing one number</command_title>  
   <command_descr>Displays a list of numbers</command_descr>
   <command_type>OS</command_type>    
   <command_args>echo ONE=1</command_args>   
   <command_args_windows>
    @echo off    
    echo ONE=1
   </command_args_windows>   
  </command>

  <command>
    <command_menu>dyn_lov_autoselect</command_menu>    
    <command_title>LOV Using autoselect feature</command_title>    
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_prompt1>PREREQ_LOV_NUMBERS_AUTOSELECT|Please select a number|PREREQ_LOV_NUMBERS_AUTOSELECT:name</command_prompt1>    
    <command_args>echo you have selected option %%PREREQ_LOV_NUMBERS_AUTOSELECT%%</command_args>       
    <command_args_windows>
     @echo off
     echo "You have selected option %%PREREQ_LOV_NUMBERS_AUTOSELECT%%"
   </command_args_windows>       
  </command>

  <command>
    <command_menu>static_lov_autoselect</command_menu>
    <command_title>Prereq Test uses LOV_101</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>        
    <command_prompt1>LOV_101|Do you like to use LOVs|LOV:value:YES=y</command_prompt1>
    <command_args>      
      if [ "%%LOV_101%%" = "y" ];then
        echo "You have selected that you do like to use LOVs: %%LOV_101%%"
      else 
        echo "You have selected that you do not like to use LOVs: %%LOV_101%%"
      fi
    </command_args>   
    <command_args_windows>
    @echo off
    echo "You have selected %%LOV_101%% for your choice on using LOVs."
    </command_args_windows>
  </command>

  <command>
    <command_menu>prompt_101</command_menu>    
    <command_title>Match Directory Files</command_title>    
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_prompt1>PATH|Please enter dir path to list|.</command_prompt1>    
    <command_prompt2>FILTER|Please enter file match filter|.txt</command_prompt2>    
    <command_args>ls %%PATH%% | grep %%FILTER%%</command_args>       
    <command_args_windows>DIR %%PATH%% | C:\\windows\\system32\\find "%%FILTER%%"</command_args_windows>    
    <command_output_match>basic|contains|RDA|non_match</command_output_match>
    <command_output_true>Matched True, no action required.</command_output_true>
    <command_output_false>Matched False...see patch xyz</command_output_false>
  </command>


  <command>
    <command_menu>prompt_102</command_menu>    
    <command_title>SAVE_ONCE, SAVE_REPEAT, SAVE_WALLET Prompts</command_title>    
    <command_descr>Demo of SAVE_ONCE, SAVE_REPEAT, SAVE_WALLET Prompts</command_descr>
    <command_type>OS</command_type>
    <command_prompt1>SAVE_REPEAT.QA_MENU.MOS_USER|Please enter your MOS user id |steve.andrew@oracle.com</command_prompt1>        
    <command_prompt2>SAVE_WALLET.QA_MENU.MOS_PASS|Please enter MOS password for user: %%SAVE_REPEAT.QA_MENU.MOS_USER%%|</command_prompt2>    
    <command_prompt3>SAVE_ONCE.QA_MENU.ARU_PLATFORM|Please enter the platform id ie. 453 for Solaris, 912 NT, 453 Solaris|46</command_prompt3>      
    <command_args>echo demo of SAVE_REPEAT.QA_MENU.MOS_USER: %%SAVE_REPEAT.QA_MENU.MOS_USER%%
    echo value of SAVE_WALLET.QA_MENU.MOS_PASS: %%SAVE_WALLET.QA_MENU.MOS_PASS%%
    echo demo of SAVE_ONCE.QA_MENU.ARU_PLATFORM: %%SAVE_ONCE.QA_MENU.ARU_PLATFORM%%
    </command_args>           
  </command>
  
  
  <command>
    <command_menu>prompt_103</command_menu>    
    <command_title>LONG password SecurePrompt test SAVE_WALLET Prompts</command_title>    
    <command_descr>LONG password SecurePrompt test SAVE_WALLET Prompts, truncates prompts larget than 60 </command_descr>
    <command_type>OS</command_type>
    <command_prompt1>SAVE_REPEAT.QA_MENU.MOS_USER|Please enter your MOS user id |steve.andrew@oracle.com</command_prompt1>        
    <command_prompt2>SAVE_WALLET.QA_MENU.MOS_PASS|Please enter MOS password for user: %%SAVE_REPEAT.QA_MENU.MOS_USER%%|</command_prompt2>    
    <command_prompt3>TEST_PASSWORD|Please enter a password with the text prompt too long at 60 gets cut off automatically!|</command_prompt3>      
    <command_args>echo demo of SAVE_REPEAT.QA_MENU.MOS_USER: %%SAVE_REPEAT.QA_MENU.MOS_USER%%
    echo value of SAVE_WALLET.QA_MENU.MOS_PASS: %%SAVE_WALLET.QA_MENU.MOS_PASS%%
    echo demo of long prompt TEST_PASSWORD: %%TEST_PASSWORD%%
    </command_args>           
  </command>
  
    <command>
    <command_menu>prompt_104</command_menu>    
    <command_title>LONG password SecurePrompt test REPEAT_WALLET Prompts</command_title>    
    <command_descr>LONG password SecurePrompt test REPEAT_WALLET Prompts, truncates prompts larget than 60 </command_descr>
    <command_type>OS</command_type>
    <command_prompt1>SAVE_REPEAT.QA_MENU.MOS_USER|Please enter your MOS user id |steve.andrew@oracle.com</command_prompt1>        
    <command_prompt2>REPEAT_WALLET.QA_MENU.MOS_PASS|Please enter MOS password for user: %%SAVE_REPEAT.QA_MENU.MOS_USER%%|</command_prompt2>    
    <command_prompt3>TEST_PASSWORD|Please enter a password with the text prompt too long at 60 gets cut off automatically!|</command_prompt3>      
    <command_args>echo demo of SAVE_REPEAT.QA_MENU.MOS_USER: %%SAVE_REPEAT.QA_MENU.MOS_USER%%
    echo value of REPEAT_WALLET.QA_MENU.MOS_PASS: %%REPEAT_WALLET.QA_MENU.MOS_PASS%%
    echo demo of long prompt TEST_PASSWORD: %%TEST_PASSWORD%%
    </command_args>           
  </command> 
  
  <!-- 
       DA_SESSION_ example 
  -->
    <command>
    <command_menu>session_set</command_menu>    
    <command_title>Set number of processes to DA_SESSION_PROCESS_COUNT</command_title>    
    <command_descr><![CDATA[This command allows you to share output from one command to the next
     by setting a special output variable prefixed with DA_SESSION_{PARM_NAME} and then 
     the PARM_NAME can be used in sub-sequent session commands by putting the
     %% around it such as %%PARM_NAME%%. 
     
     The result will allow the new command to use any give output from one command
     to the next which provides for a means of command chaning within your command
     args. ie. If PROCESS_COUNT > number x, show details of all the processes else
     only process the first process or file etc.
    ]]></command_descr>
    <command_type>OS</command_type>    
    <command_args>
    echo "First five oracle processes" 
    ps -ef | grep ora | head -5
    echo "Totals:"
    echo "DA_SESSION_PROCESS_COUNT=`ps -ef | grep ora | wc -l`"
    </command_args>   
    <command_args_windows>echo DA_SESSION_PROCESS_COUNT=4</command_args_windows>           
  </command>
  
    <command>
    <command_menu>session_use</command_menu>    
    <command_title>Show DA_SESSION_PROCESS_COUNT from sessionWallet as PROCESS_COUNT</command_title>    
    <command_descr>This shows how the DA_SESSION_PROCESS_COUNT from command session_set 
    put the variable PROCESS_COUNT in da session object to be tokenized for all
    other future command_args such as this example.
    </command_descr>
    <command_type>OS</command_type>    
    <command_args><![CDATA[    
    echo "Checking for DA SESSION PROCESS_COUNT =%%PROCESS_COUNT%%"
    if [ -z %%PROCESS_COUNT%% ]; then
      echo "Failed passing or setting DA SESSION PROCESS_COUNT, please run session_set command"
    elif [ %%PROCESS_COUNT%% -gt 5 ]; then
      echo "Great to see you have an Oracle Process count > 5 or found: %%PROCESS_COUNT%%"
      ps -ef | grep ora
      echo "It appears you are using the Oracle Database, consider using RDA on the admin menu"
    else 
      echo "Sorry your not running more oracle processes, try or < than 5, found: %%PROCESS_COUNT%%"
      ps -ef | grep ora
      echo "Considering running menu xyz to see installed products since we would like more oracle"
    fi
   ]]></command_args>   
    <command_args_windows>echo Checking for DA SESSION PROCESS_COUNT =%%PROCESS_COUNT%%</command_args_windows>           
  </command>  
  
<!-- 
    JAVA EXAMPLES: Two types simple 1) java main()  2) DA java Impl interface
    both are supported from apps/JavaApplicationImpl
-->
    <command>
    <command_menu>java_main</command_menu>    
    <command_title>Java Main demo </command_title>    
    <command_descr>Demo of Java main to show java properties</command_descr>
    <command_type>Java</command_type>
    <command_prompt1>SAVE_REPEAT.QA_MENU.JAVA_REGEX|Please enter a Java System regex match or "all" i.e java.*|user.dir</command_prompt1>        
    <command_args>class=oracle.sysman.da.plugin.java.JavaPropertiesMainDemo %%SAVE_REPEAT.QA_MENU.JAVA_REGEX%%</command_args>               
  </command>

    <command>
    <command_menu>java_impl</command_menu>    
    <category_id>other</category_id>
    <command_title>Java Da Impl example</command_title>    
    <command_descr>Demo of Java main to show java properties</command_descr>
    <command_type>Java</command_type>
    <command_prompt1>SAVE_REPEAT.QA_MENU.JAVA_REGEX|Please enter a Java System regex match or "all" i.e java.*|java.vm.*</command_prompt1>        
    <command_args>da_class=oracle.sysman.da.plugin.java.JavaDaImplDemo match_property=%%SAVE_REPEAT.QA_MENU.JAVA_REGEX%%</command_args>           
  </command>

   <command>
    <command_menu>java_help</command_menu>    
    <command_title>Java Da Impl Help</command_title>    
    <command_descr>Demo of Java main to show basic Impl Help</command_descr>
    <command_type>Java</command_type>    
    <command_args>help</command_args>           
  </command>

  <command>
    <command_menu>test_category</command_menu>    
    <command_title>Java Main demo </command_title>    
    <command_descr>Demo of Java main to show java properties</command_descr>
    <command_type>Java</command_type>
    <category_id>test_category</category_id>
    <command_prompt1>SAVE_REPEAT.QA_MENU.JAVA_REGEX|Please enter a Java System regex match or "all" i.e java.*|user.dir</command_prompt1>        
    <command_args>class=oracle.sysman.da.plugin.java.JavaPropertiesMainDemo %%SAVE_REPEAT.QA_MENU.JAVA_REGEX%%</command_args>               
  </command>

<!-- 
SFTP DOWNLOAD or UPLOAD to sftp.oracle.com

         <command_args>oracle_sftp upload|download [srNumber=%%sr_number%% if upload] uploadFile=%%upload_file%%</command_args>
         #####################################################################################
         
         <command_args>oracle_sftp=download download_file_from=%%DOWNLOAD_FILE_FROM%% download_file_to=%%DOWNLOAD_FILE_FROM%%</command_args>
         <command_args>oracle_sftp=upload upload_file_from=%%UPLOAD_FILE_FROM%% upload_file_to=%%UPLOAD_FILE_TO%% mkdir_path=%%MKDIR_PATH%%</command_args>
         
         <command_prompt1>sr_number|If using an existing SR_NUMBER, please enter|</command_prompt1>

         <command_args>oracle_internal_sftp=upload upload_file_from=%%UPLOAD_FILE_FROM%% mkdir_path=%%MKDIR_PATH%% upload_file_to=%%UPLOAD_FILE_TO%%</command_args>
         <command_args>oracle_internal_sftp=download download_file_from=%%DOWNLOAD_FILE_FROM%% download_file_to=%%DOWNLOAD_FILE_TO%%</command_args>

    NOTE: required_setup_properties.ini         
    system|oracle_sftp|||DA.mos_userid||Enter MOS User id||da|12.0.0.0
    system|oracle_sftp|||DA.mos_password||Enter MOS Password||wallet|12.0.0.0
    system|oracle_internal_sftp|||DA.sftp_userid||Enter sftp.oracle.com User id||da|12.0.0.0
    system|oracle_internal_sftp|||DA.sftp_password||Enter sftp.oracle.com Password||wallet|12.0.0.0                           
-->
   
    <command>
      <command_menu>external_download</command_menu>
      <command_title>sftp</command_title>    
      <command_descr>sftp</command_descr>
      <category_id>core.sftp</category_id>
      <command_type>System</command_type>
      <command_prompt1>DOWNLOAD_FILE_FROM|Please enter full path of file to download|/support/outgoing/PATCHSET_COMPARE_TOOL/patchsets.sh</command_prompt1>
      <command_prompt2>DOWNLOAD_FILE_TO|Please enter full path where file is to be placed or just name|/tmp/patchsets.sh</command_prompt2>      
      <command_args>oracle_sftp=download download_file_from=%%DOWNLOAD_FILE_FROM%% download_file_to=%%DOWNLOAD_FILE_TO%%</command_args>
   </command>

    <command>
      <command_menu>external_upload</command_menu>
      <command_title>sftp</command_title>    
      <command_descr>sftp</command_descr>
      <category_id>core.sftp</category_id>
      <command_type>System</command_type>
      <command_prompt1>UPLOAD_FILE_FROM|Please enter full upload from path|/tmp/xyz.txt</command_prompt1>
      <command_prompt2>UPLOAD_FILE_TO|Please enter full upload to path or just name|/support/incoming/A123/xyz.txt</command_prompt2>      
      <command_prompt3>MKDIR_PATH|Please enter SR# for directory if no yet created|/support/incoming/A123</command_prompt3>
      <command_args>oracle_sftp=upload upload_file_from=%%UPLOAD_FILE_FROM%% upload_file_to=%%UPLOAD_FILE_TO%% mkdir_path=%%MKDIR_PATH%%</command_args>
   </command>

    <command>
      <command_menu>internal_download</command_menu>
      <command_title>sftp</command_title>    
      <command_descr>sftp</command_descr>
      <category_id>core.sftp</category_id>
      <command_type>System</command_type>
      <command_prompt1>DOWNLOAD_FILE_FROM|Please enter full path of file to download|/support/outgoing/PATCHSET_COMPARE_TOOL/patchsets.sh</command_prompt1>
      <command_prompt2>DOWNLOAD_FILE_TO|Please enter full path where file is to be placed or just name|/tmp/patchsets.sh</command_prompt2>      
      <command_args>oracle_internal_sftp=download download_file_from=%%DOWNLOAD_FILE_FROM%% download_file_to=%%DOWNLOAD_FILE_TO%%</command_args>
   </command>

    <command>
      <command_menu>internal_upload</command_menu>
      <command_title>sftp</command_title>    
      <command_descr>sftp</command_descr>
      <category_id>core.sftp</category_id>
      <command_type>System</command_type>
      <command_prompt1>UPLOAD_FILE_FROM|Please enter full path of file to be uploaded|/tmp/xyz.txt</command_prompt1>
      <command_prompt2>UPLOAD_FILE_TO|Please enter full path where you want file placed or just name|/support/incoming/A123/xyz.txt</command_prompt2>      
      <command_prompt3>MKDIR_PATH|Please enter SR# for directory if no yet created|/support/incoming/A123</command_prompt3>
      <command_args>oracle_internal_sftp=upload upload_file_from=%%UPLOAD_FILE_FROM%% mkdir_path=%%MKDIR_PATH%% upload_file_to=%%UPLOAD_FILE_TO%%</command_args>
   </command>

<!--
     New MULTI-COMMAND Support     
     Purpose: 
     To be able to run multiple commands from one or more DA MENU files by
     adding them in a list to the cmds argument in a comma delimited format
     with the file1|cmd1, ... file{n}|cmd{n} as a list. The output will just
     be spooled into the one batch command default(output_files=single) but
     can be set to "one_each" to create a single command / single output
     file for each one in the batch. 
     
     Details:
     The tricky part here is to make all the prompts clear when you have multiple
     commands with different needs in the same batch.
     
     Syntax:
      run_da_batch cmds=file_path1|cmd1,file_path2|cmd2,... output_files=one_each|{single}
      ie. To run two commands with the default going into one file:
        run_da_batch cmds=menus/qa_menus.xml|os_101,menus/qa_menus.xml|os_102
      To run two commands with the default going into one separate files:
        run_da_batch cmds=menus/qa_menus.xml|os_101,menus/qa_menus.xml|os_102 output_files=one_each
        
     To provide a means to break out of the batch on matching conditions:        
         action_choices=exit_on_match:.*properties.*
         action_choices=exit_on_not_match:.*OK: .*
--> 
   <command>
      <command_menu>system_run_multiple_commands</command_menu>
      <category_id>core.batch</category_id>
      <command_title>run multiple</command_title>    
      <command_descr>Demo run of multiple commands after getting all prompts.</command_descr>      
      <command_type>System</command_type>
      <command_prompt1>FILE_NAME_MATCH|Please enter a path or file to match under ORACLE_HOME|.</command_prompt1>
      <command_args>run_da_batch cmds=menus/qa_menus.xml|os_101,menus/qa_menus.xml|os_102 output_files=single action_choices=exit_on_not_match:.*properties.*</command_args>      
   </command>

   <command>
      <command_menu>system_run_da_batch_IncorrectCommand</command_menu>
      <category_id>core.batch</category_id>
      <command_title>Cause invalid command error in calling run_da_batch</command_title>    
      <command_descr>Cause invalid command error in calling run_da_batch</command_descr>      
      <command_type>System</command_type>
      <command_prompt1>FILE_NAME_MATCH|Please enter a path or file to match under ORACLE_HOME|.</command_prompt1>
      <command_args>run_da_batch cmds=menus/qa_menus.xml|InvalidCommand output_files=single action_choices=exit_on_not_match:.*properties.*</command_args>      
   </command>
   
   <command>
      <command_menu>rda_DBA</command_menu>
      <command_title>General Oracle RDBMS Information</command_title>
      <command_descr><![CDATA[
        Command Summary
          Collects Oracle RDBMS Information
             
        Input Requirements
          o None
          
        Output Details
          o Shows a summary of the collection process
          o Generates a collection of files in the "DBA" 
            subdirectory under the Diagnostic Assistant output directory]]></command_descr>
      <command_type>Rda</command_type>
      <command_prompt1 type="string" validation_match = "" required="false">SAVE_WALLET.DA.oracle_database.system_oracle_SID|Oracle database system. If a pass word is not provided the SYSDBA account will be used|</command_prompt1>
      <command_args><![CDATA[run_module=DBA system_oracle_SID=%%SAVE_WALLET.DA.oracle_database.system_oracle_SID%%]]></command_args>
</command>
   
   
   
<!--
     New DA UPDATES    
     Purpose: 
     To support updating DA / RDA and any related "plugin" type applications or
     code. Supports downloads from MOS Notes, ARU, LOCAL or URL sources based
     on a da plugins registry file: config/da_updates.xml.
     
     Details:
     The idea is to use the da_updates.xml as the source of all updates
     which will be downloaded from ARU BUG: 17943564 (Platform Linux). The main
     DA/RDA patch is a GENERIC platform 2000 patch.
     DA will initially be released with a da_updates.xml, but then will be
     updated via DA Updates or just updating the da_updates.xml file itself.
     The program downloads the da_updates.xml first, and then uses it to check
     customer system for available plugins / updates that match their installed
     targets and/or products discovered by DA.     
     
     Syntax:
      da_updates={list_all,check,download,stage,apply} - one or more or "run_all_steps"
                 tool_id_list={.*|EXACHK} - not needed, defaults to all
                 short_report=y/n (defaults to n or long)
            
      ie. To run a couple of the steps. 
        da_updates=list_all,check limit=EXACHK
      ie. To run a couple of the steps. 
        da_updates=run_all_steps limit=EXACHK  
      
      Also supports LOV System Commands:   
        lov support: LOV_list_all_updates|LOV_check_available_updates
--> 
   <command>
      <command_menu>da_updates_list_all</command_menu>
      <command_title>List all DA Updates</command_title>    
      <command_descr>List all the available updates in da_updates.xml even if not discovered at this DA_HOME.</command_descr>      
      <command_type>System</command_type> 
      <category_id>core.updates</category_id>
      <command_args>da_updates=list_all</command_args>      
   </command>   
   <command>
      <command_menu>da_updates_check</command_menu>
      <command_title>Check for available DA Updates</command_title>    
      <command_descr>Checks for all the available updates in da_updates.xml for this DA environment - discovered targets.</command_descr>
      <category_id>core.updates</category_id>
      <command_type>System</command_type>
      <command_prompt1 type="multichoice" validation_match="" required="false">PREREQ_LOV_list_all_updates|To limit the output one tool|PREREQ_LOV_check_available_updates:name</command_prompt1>
      <command_args>da_updates=check tool=%%PREREQ_LOV_list_all_updates%%</command_args>      
   </command>   
   <command>
      <command_menu>da_updates_download</command_menu>
      <command_title>Download DA Updates</command_title>    
      <command_descr>Download all the available updates discovered at this DA_HOME.</command_descr>
      <category_id>core.updates</category_id>
      <command_type>System</command_type>      
      <command_args>da_updates=download</command_args>      
   </command>   
   <command>
      <command_menu>da_updates_stage</command_menu>
      <command_title>Stage all DA Updates</command_title>    
      <command_descr>Stage all the available updates in da_updates.xml discovered at this DA_HOME.</command_descr>
      <category_id>core.updates</category_id>
      <command_type>System</command_type>      
      <command_args>da_updates=stage</command_args>      
   </command>   
  <command>
      <command_menu>da_updates_apply</command_menu>
      <command_title>Apply staged DA Updates</command_title>    
      <command_descr>Apply all the available updates already staged in da_updates.xml discovered at this DA_HOME.</command_descr>
      <category_id>core.updates</category_id>
      <command_type>System</command_type>      
      <command_args>da_updates=apply</command_args>      
   </command>
   <command>
      <command_menu>da_updates_run_all_steps</command_menu>
      <command_title>Run all Steps to do full update</command_title>    
      <command_descr>Run all the steps to update all target plugins and DA.</command_descr>      
      <command_type>System</command_type>
      <category_id>core.updates</category_id>
      <command_prompt1 type="multichoice" validation_match = "" required="false">PREREQ_LOV_check_available_updates|To limit the output one tool|PREREQ_LOV_check_available_updates:name</command_prompt1>      
      <command_prompt2 type="string" validation_match = "" required="false">SAVE_REPEAT.short_report|To limit the output to a short report format (y/n)|n</command_prompt2>
      <command_args>da_updates=run_all_steps tool=%%PREREQ_LOV_check_available_updates%%  short_report=%%SAVE_REPEAT.short_report%%</command_args>      
   </command>
   
  <command>
      <command_menu>PREREQ_LOV_da_updates_lov</command_menu>
      <command_title>Internal Only prereq LOV showing all da_home/config/da_updates_xxx.xml files
      </command_title>  
      <command_descr>Shows available da_updates.xml files in the DA HOME config directory</command_descr>
      <command_type>System</command_type>    
      <command_args>da_updates=LOV_list_all_updates</command_args>   
    </command>
   
    <command>
      <command_menu>PREREQ_LOV_list_all_updates</command_menu>
      <command_title>Internal Only prereq_501</command_title>  
              <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

      <command_type>System</command_type>    
      <command_args>da_updates=LOV_list_all_updates</command_args>   
    </command>

    <command>
      <command_menu>PREREQ_LOV_check_available_updates</command_menu>
      <command_title>Internal Only prereq_501</command_title>  
              <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

      <command_type>System</command_type>    
      <command_args>da_updates=LOV_check_available_updates</command_args>   
   </command>
                                 
  <command>
      <command_menu>hiran_test</command_menu>
      <command_title>run multiple</command_title>    
      <command_descr>Demo run of multiple commands after getting all prompts.</command_descr>      
      <command_type>System</command_type>
      <command_prompt1 type="string" validation_match = "" required="false">SAVE_REPEAT.CORE_OTHER.SR_NUM|Please enter an existing SR_NUMBER (required)|</command_prompt1>
      <command_prompt2 type="string" validation_match = "" required="false">SAVE_ONCE.DA.mos_userid|Enter your MOS user name|</command_prompt2>
      <command_prompt3 type="password" validation_match = "" required="false">SAVE_WALLET.DA.mos_password|Enter your MOS password|</command_prompt3>
      <command_args>run_da_batch cmds=menus/host.xml|rda_OS,menus/core_other.xml|sys_PKG_UPL_DAY output_files=one_each</command_args>      
  </command>
  
  <!--
  BUG: 
  System command that finds and documents commands matching
  certain types based on the "command_category" field if the following
  filters are added: 
  
  This is being done with a new DA Command xml tag: 
     <command_category> {problem types} = keys </command_catgory> 
     The {problem types} will be: 

A) analysis_category_id = "catgory_id" - (from category_id da xml) 
- so that a person can use our same default collection category tree
to find "Checker" or "Analyzer" scripts to check for that known problem. 
- Examples of this would be a HCVE script or DA Checker such as
"oracle_network.xml" 
. 
ie. <command_category> analyzer_category_id=configure.sqlplus 
.
</command_category>

B) known_problem = bug, note, doc type with the following format: known_problem={type:KEY} 
ie. <command_category> known_problem=note:1071109.6 </command_category> 

For documentation, this would also provide a link: 
ie. known_problem=doc:{text description}|{url }

known_problem=doc:Resolving+the+Most+Common+Error+Messages+for+Oracle+Net+Serv ices|http://docs.oracle.com/cd/E16655_01/network.121/e17610/trouble.htm#NETAG394
http://docs.oracle.com/cd/E16655_01/network.121/e17610/trouble.htm#NETAG394. 
  
   ie. type=known|known_problem|bug|note|doc  OR  checker / analyze
  Starts with known, or ( check, analyze) 
  else if "", defaults to all or both.    
  --> 
  <command>
      <command_menu>find_commands</command_menu>
      <command_title>Search for commands and document them.</command_title>    
      <command_descr><![CDATA[
  Command Summary
    This command finds DA commands based on the command name, title, descr
    or command category if tagged with one.    
      
  Input Requirements
    o menu - if provided a da xml menu file, or all active discovered menus,
      can provide "all"
    o match - searchs the da commands name, title, description or "all"
    o type - optionally limits the search with keywords: known|note|bug|doc|check
    
   Output Details
    o Generates an output report similar to the commands xsl documentation for
      all matching command types.
      
  References       
    NOTE:201804.1 - Diagnostic Assistant main note      
    ]]></command_descr>      
      <command_type>System</command_type>
      <command_category>known_problem=note:201804.1</command_category>
      <command_prompt1 type="string" validation_match = "" required="false">SAVE_REPEAT.FIND_MENUS|Please enter a menu to search or all|oracle_network.xml</command_prompt1>
      <command_prompt2 type="string" validation_match = "" required="false">SAVE_REPEAT.FIND_MATCH|Please enter a keyword to find commands name,title, or desc, or all|all</command_prompt2>
      <command_prompt3 type="string" validation_match = "" required="false">SAVE_REPEAT.FIND_TYPE|Limit to a DA type command: known,note bug,doc, checker or all|all</command_prompt3>
      <command_args>search=commands menus=%%SAVE_REPEAT.FIND_MENUS%% match=%%SAVE_REPEAT.FIND_MATCH%% type=%%SAVE_REPEAT.FIND_TYPE%%</command_args>      
  </command>  
  
  
    <command>
      <command_menu>da_includes_demo</command_menu>
      <command_title>load multiple commands args</command_title>    
            <command_descr><![CDATA[
  Command Summary
    Show how DA can include command_args from one command in another command.
    This feature was created for the use-case in OS/SQLPLUS commands where one command
    may use a set of shell functions or PLSQL procedures. This eliminates the
    need to maintain the code in each command that needs the functions or 
    procedures. It could also be used to show a menu of 5 commands wehre 
    the first 4 OS commands or SQL could be run one at a time and the 
    5th command could include 1, include 2... include 4 and run all 4 
    of the above in a batch fashion. Note: This generally could be done
    with a da system batch command as well.
    
    Unix  Example:
    #  DA_INCLUDE[file=menus/qa_menus.xml|command=da_include_1|extract_lines=2-|save_merged=/tmp/demo_merged.sh]
    
    Windows Example:
    REM  DA_INCLUDE[file=menus/qa_menus.xml|command=da_include_1|extract_lines=2-|save_merged=/tmp/demo_merged.sh]

      
  Input Requirements
    o none - Standalone demo      
    
   Output Details
    o Generates an output report showing all of the merged or included 
      shell commands.
      
  References                 
    ]]></command_descr>        
      <command_type>OS</command_type>
      <command_args>
      echo "################################################################"
      echo "DEMO of DA_INCLUDE option allows using code from other commands"
      echo "################################################################"
      # DA_INCLUDE[file=menus/qa_menus.xml|command=da_include_1|extract_lines=2-|save_merged=/tmp/demo_merged.sh]      
       
      echo "A) About to call Setup_OS function for commands like OS_NAME, ECHO, CPU_INFO"
      export LOG=/tmp/demo.log
      export LOG_YN="Y"
      Setup_OS
      echo "Shows that include worked after CPU_INFO: $CPU_INFO"
      echo "$CPU_INFO_print"
      
      # DA_INCLUDE[file=menus/qa_menus.xml|command=da_include_2|extract_lines=2-|save_merged=/tmp/demo_merged.sh]
      
      # Supporting ${OUT_DIR}/${PRD}_${REPORT}.txt
      export OUT_DIR=/tmp/
      export PRD=DA
      export REPORT=DEMO      
      echo "B) Table is created with function \"Show_Table col_name,value col_name2,value2\" " 
      Show_Table "OS Url, ${LINK_System}" "OS Patches, ${LINK_Patches}"  "OS Docs, ${LINK_Doc}"
      
      </command_args>       
      <command_args_windows>
@echo off
echo ################################################################
echo Windows DEMO of DA_INCLUDE option allows using code from other commands
echo ################################################################

REM DA_INCLUDE[file=menus/qa_menus.xml|command=da_include_1|extract_lines=2-|save_merged=/tmp/demo_merged.cmd]

      </command_args_windows>
      
  </command>

 <command>
      <command_menu>da_include_1</command_menu>
      <command_title>load multiple commands args</command_title>    
            <command_descr><![CDATA[
  Command Summary
    Just used for da_include demo. Data file
      
  Input Requirements
    o none - Standalone demo      
    
   Output Details
    o Generates an output report showing all of the merged or included 
      shell commands.
      
  References                 
    ]]></command_descr>        
      <command_type>OS</command_type>      
      <command_args><![CDATA[      
Log ()
{
  DAY=`date '+%m%d%y'`
  HOUR=`date '+%H:%M'`
  DATE=`date '+%m%d%y'`
  # $ECHO "pwd=`pwd`  LOG_YN=$LOG_YN Inside log $1"
  # read ins
  if [ "${LOG_YN}" = "Y" ];then
    $ECHO "$DATE, $HOUR, $1" >> $LOG
  fi
} ### End Procedure Log ###      
      
Setup_OS ()
{
##
## $Header: Setup_OS 2.09 14-MAR-2003 support $
##
## Procedure Name: Setup_OS
##
## Usage:
##   Setup_OS
##
## Parameters:
##   None.
##
## Description:
##   Internal Procedure *ONLY* Called to setup OS Command Specific Variables.
##   Variables used that are OS Specific go in here They are based on the 
##   OS_NAME from uname...
##
## Examples:
##   Setup_OS
##
## Returns:
##   Sets several envvars for executing OS commands
##
## Notes:
##   None.
##
## Version History:
##   2.01 30-APR-2002 ssandrew Initial Release
##   2.02 21-JUN-2002 dbezemer Added more platform specific variables into it.
##                             Changed C:/WINNT (hardcoded) into command 'windir'
##   2.05 03-JUL-2002 dbezemer Moved ORACLE specific executables to Setup_Oracle
##        09-JUL-2002 dbezemer Removed ORACLE_HOME from the PATH - needed in Setup_Oracle
##   2.06 26-JUL-2002 dbezemer Added OS_VERSION and OS_SUBVERSION to the OS specific list
##                             Changed the way to set the path on NT, do not use SHELL
##   2.07 08-AUG-2002 svarga   Modified Windows NT section to show DOMAIN_NAME also when
##                             Connection-specific DNS Suffix is not available.
##   2.08 14-JAN-2003 dbezemer Ignore certain error messages when running HP
##   2.09 14-MAR-2003 dbezemer Added deprecation notice for certain vars
##                    dbezemer Add COMPRESS and UNCOMPRESS environment var
##                             Add ZIP and UNZIP for Linux only
##
## Deprecation Notice:
##   The following environment settings are deprecated:
##   LINK_System, LINK_Patches, LINK_Doc

 # NT is  Windows_NT -- needed to trap some MKS commands
  OS_NAME=`uname`; export OS_NAME

  #DEV Actually the shell type (bash) and OS used should be tested here
  if [ "${OS_NAME}" = "Linux" ];then
    ECHO="echo -e"
  else
    ECHO="echo"
  fi  

  if [ "${OS_NAME}" = "Windows_NT" ];then
    # caused problems because SHELL is not passed to Apache process by default
    SHL="`which sh.exe | sed 's/\/sh.exe//g'`"
    PATH="$SHL;`windir`;`windir`/System32"     # Do the setting with ORACLE_HOME after it is set properly
    export PATH

    # TMP Files Directory for processing
    # NT already has TMP set; no need for it here then.

  else
    #  Make sure /usr/sbin and /usr/bin are part of path.  If it's not there, add it.
    case "$PATH" in
      */usr/sbin*)        PATH=`$ECHO $PATH`;;
      *:)                 PATH=${PATH}/usr/sbin: ;;
      "")                 PATH=/usr/sbin ;;
      *)                  PATH=$PATH:/usr/sbin ;;
    esac

    #  No need to check for non-existent path as, at a minimum, it has /usr/sbin from
    #  the previous case statement.
    case "$PATH" in
      */usr/bin*)         PATH=`$ECHO $PATH`;;
      *:)                 PATH=${PATH}/usr/bin: ;;
      *)                  PATH=$PATH:/usr/bin ;;
    esac

    # TMP Files Directory for processing
    TMP=/tmp; export TMP

  fi

  export PATH 

  ##
  ## Main Right-hand frame Report Overview file name
  ## It actually will be written to: OUT_DIR/$HeaderReport
  ## HeaderReport=RDA_right_frame.htm
  ## 

  HeaderReport=${PRD}_right_frame.htm

  # Start setting up commands that are different for each OS. Make them
  # unknown to begin with to allow skipping when attempting to execute.
  # Correct command syntax should be set under each OS setup.
  SHOWREV=''
  ECHO_SHOWREV=N
  ECHO_PKGINFO=N
  LISTENER_FOUND_IN=3
  OS_NAME=`uname`

  # Set defaults
  DF="df -k "
  PS_EF="ps -ef "
  STRINGS_CMD="strings -a "
  GREP="grep "
  CASESENS="ON"     # Case sensitive is default (used in some API grep commands)

  # Change default setting for specific platform if needed
  case $OS_NAME in
    SunOS)
      # SunOS Version format: x.y
      OS_VERSION=`uname -r | awk -F"." '{ print $1 }'`
      OS_SUBVERSION=`uname -r | awk -F"." '{ print $2 }'`
      Log "Running ${OS_NAME}, Version $OS_VERSION.$OS_SUBVERSION"
      if [ -x /usr/local/bin/top ]; then 
        TOP="/usr/local/bin/top 40 1"
      else
        TOP="sar -u 1 4|grep -v $OS_NAME"
      fi
      GREP="/usr/xpg4/bin/grep "
      ZIP="NO"
      COMPRESS="compress "
      UNCOMPRESS="uncompress "
      SYSDEF=`/usr/sbin/sysdef|grep -v instance |grep -v drv |tail -77`
      SYSDEF_print="/usr/sbin/sysdef|grep -v instance |grep -v drv |tail -77"
      UCB_PS="/usr/ucb/ps aux"
      PKGINFO="pkginfo -l"
      SHOWREV="showrev -p"
      CPU_STATS="mpstat 1 3 -v"
      Memory_Stats="vmstat -s"
      CPU_INFO=`psrinfo -v`
      CPU_INFO_print="psrinfo -v"
      IOSTAT_M="iostat -M"
      IOSTAT_d="iostat -d"
      IOSTAT_xe="iostat -xe"
      IOSTAT_e="iostat -e"
      SAR_g="sar -g 1 4|grep -v $OS_NAME"
      SAR_u="sar -u 1 4|grep -v $OS_NAME"
      SAR_c="sar -c 1 4|grep -v $OS_NAME"
      SAR_m="sar -m 1 4|grep -v $OS_NAME"
      SWAP_l="swap -l"
      SWAP_s="swap -s"
      NETWORKS="/etc/networks"
      USE_NDD=Y
      NET_TUNING="ndd"
      DOMAIN_NAME=`domainname`
      DOMAIN_NAME_print="domainname"
      if [ "${DO_PING_TEST}" = "y" ];then               
        Ping_MACHINE_NANE=`/usr/sbin/ping -s -v -R $MACHINE_NAME 1280 10`
        Ping_WAN_NODE=`/usr/sbin/ping -s -v -R $WAN_NODE 1280 10`
        Ping_RDBMS_NODE=`/usr/sbin/ping -s -v -R $RDBMS_NODE 1280 10`
        Ping_WEB_NODE=`/usr/sbin/ping -s -v -R $WEB_NODE 1280 10`
        Ping_CLIENT_NODE=`/usr/sbin/ping -s -v -R $CLIENT_NODE 1280 10`
      fi
      IFCONFIG_a=`ifconfig -a`
      #BEGIN Deprecation
      LINK_System="http://www.sun.com/products-n-solutions/hardware/index.html"
      LINK_Patches="http://sunsolve.Sun.COM/pub-cgi/show.pl?target=patches/patch-access"
      LINK_Doc="http://docs.sun.com"
      #END Deprecation
    ;;
    HP*) 
      # HP-UX Version format: <char>.xx.yy
      OS_VERSION=`uname -r | awk -F"." '{ print $2 }'`
      OS_SUBVERSION=`uname -r | awk -F"." '{ print $3 }'`
      Log "Running ${OS_NAME}, Version $OS_VERSION.$OS_SUBVERSION"
      DF="df -kP"
      TOP="/usr/bin/top -s1 -d2 -n40"
      ZIP="NO"
      COMPRESS="compress "
      UNCOMPRESS="uncompress "
      SYSDEF=`/usr/sbin/sysdef|grep -v instance |grep -v drv |tail -77`
      SYSDEF_print="/usr/sbin/sysdef|grep -v instance |grep -v drv |tail -77"
      UCB_PS="ps -f -u $USER"
      PKGINFO="swlist -lbundle"
      # Get 11.0 vs. 10.20 specific commands
      HP_VER=$OS_VERSION           # set HP_VER for backward compatibility
      # show_patches is used in 11.0 to show revisions, while swlist is used in 10.20
      #  ndd does not exists on 10.20 of HP, nettune is used instead.
      if [ "$HP_VER" = "11" ]; then
        SHOWREV="/usr/contrib/bin/show_patches"
        NET_TUNING="ndd"
        USE_NDD=Y
      else
        SHOWREV=`swlist -lproduct PH\*`
        SHOWREV_print="swlist -lproduct PH\*"
        $ECHO_SHOWREV=Y
        NET_TUNING="/usr/contrib/bin/nettune -l"
        USE_NDD=N
      fi
      Memory_Stats="vmstat -s"
      CPU_STATS="sar -u 1 3"
      CPU_INFO=`ioscan -fnkC processor`
      CPU_INFO_print="ioscan -fnkC processor"
      IOSTAT_M="iostat"
      IOSTAT_d="iostat"
      IOSTAT_xe="iostat"
      IOSTAT_e="iostat"
      SAR_g="sar -w 1 4|grep -v $OS_NAME"
      SAR_u="sar -u 1 4|grep -v $OS_NAME"
      SAR_c="sar -c 1 4|grep -v $OS_NAME"
      SAR_m="sar -m 1 4|grep -v $OS_NAME"
      SWAP_s="sar -w 2 2 "
      SWAP_l="sar -w 2 2 "
      NETWORKS="/etc/networks"
      DOMAIN_NAME=`domainname`
      DOMAIN_NAME_print="domainname"
      if [ "${DO_PING_TEST}" = "y" ];then               
        Ping_MACHINE_NANE=`/usr/sbin/ping -o $MACHINE_NAME 1280 10`
        Ping_WAN_NODE=`/usr/sbin/ping -o $WAN_NODE 1280 10`
        Ping_RDBMS_NODE=`/usr/sbin/ping -o $RDBMS_NODE 1280 10`
        Ping_WEB_NODE=`/usr/sbin/ping -o $WEB_NODE 1280 10`
        Ping_CLIENT_NODE=`/usr/sbin/ping -o $CLIENT_NODE 1280 10`
      fi
      IFCONFIG_a=`lanscan -i | xargs -n1 ifconfig 2>/dev/null`
      #BEGIN Deprecation
      LINK_System="http://europe-support2.external.hp.com/emse/bin/doc.pl/screen=emseHome/sid=964ab34f15d3f6ea46"
      LINK_Patches="http://europe-support2.external.hp.com/common/bin/doc.pl/distrib_redir=1+988379627|*"
      LINK_Doc="http://docs.hp.com/"
      #END Deprecation
    ;;
    AIX)
      # AIX Version format: yy xx
      OS_VERSION=`uname -v`
      OS_SUBVERSION=`uname -r`
      Log "Running ${OS_NAME}, Version $OS_VERSION.$OS_SUBVERSION"
      TOP="/usr/bin/top"
      ZIP="NO"
      COMPRESS="compress "
      UNCOMPRESS="uncompress "
      SYSDEF=`/usr/sbin/lsattr -El sys0`
      SYSDEF_print="/usr/sbin/lsattr -El sys0"
      UCB_PS="ps -f -u $USER"
      PKGINFO="lslpp -h"
      Memory_Stats="vmstat -s"
      CPU_STATS="iostat -t 1 3"
      CPU_INFO=`pstat -S`
      CPU_INFO_print="pstat -S"
      SHOWREV="/usr/sbin/instfix -a"
      IOSTAT_M="iostat"
      IOSTAT_d="iostat"
      IOSTAT_xe="iostat"
      IOSTAT_e="iostat"
      SAR_g="svmon -G"
      SAR_u="sar -u 1 4|grep -v $OS_NAME"
      SAR_c="sar -c 1 4|grep -v $OS_NAME"
      SAR_m="sar -m 1 4|grep -v $OS_NAME"
      SWAP_s="lsps -a"
      SWAP_l="lsps -a"
      LISTENER_FOUND_IN=4
      NETWORKS="/etc/hosts"
      USE_NDD=N
      #  ndd does not exist on AIX, no is used instead.
      NET_TUNING="no -a"
      DOMAIN_NAME=`cat /etc/resolv.conf|grep domain |awk '{print $2}'`
      DOMAIN_NAME_print="cat /etc/resolv.conf|grep domain |awk '{print $2}'"
      if [ "${DO_PING_TEST}" = "y" ];then               
        Ping_MACHINE_NANE=`/usr/sbin/ping -R $MACHINE_NAME 1280 10`
        Ping_WAN_NODE=`/usr/sbin/ping -R $WAN_NODE 1280 10`
        Ping_RDBMS_NODE=`/usr/sbin/ping -R $RDBMS_NODE 1280 10`
        Ping_WEB_NODE=`/usr/sbin/ping -R $WEB_NODE 1280 10`
        Ping_CLIENT_NODE=`/usr/sbin/ping -R $CLIENT_NODE 1280 10`
      fi
      IFCONFIG_a=`ifconfig -a`
      #BEGIN Deprecation
      LINK_System="http://www-1.ibm.com/servers/support/"
      LINK_Patches="http://techsupport.services.ibm.com/rs6k/fixdb.html"
      LINK_Doc="http://techsupport.services.ibm.com/rs6000/aix.CAPARdb"
      #END Deprecation

      if [ -x /bin/sar ]; then
        if [ -x /bin/svmon ]; then
          Log ""   # do nothing, we can get to both
        else
          Log "svmon information cannot be gathered"
          Log "check permissions or run this script as root"
        fi
      else
        if [ -x /bin/svmon ]; then
          Log "sar information cannot be gathered"
          Log "check permissions or run this script as root"
        else
          Log "sar and svmon information cannot be gathered"
          Log "check permissions or run this script as root"
        fi
      fi
    ;;
    OSF1) 
      # Compaq Tru64 / Digital UNIX Version format: Vx.y
      OS_VERSION=`uname -r | awk -F"." '{ print $1 }' | sed 's/V//'`
      OS_SUBVERSION=`uname -r | awk -F"." '{ print $2 }'`
      Log "Running ${OS_NAME}, Version $OS_VERSION.$OS_SUBVERSION"
      TOP="/usr/bin/top -s1 -d2 -n40"
      ZIP="NO"
      COMPRESS="compress "
      UNCOMPRESS="uncompress "
      SYSDEF=`cat /etc/sysconfigtab`
      SYSDEF_print="cat /etc/sysconfigtab"
      UCB_PS="ps -f -u $USER"
      PKGINFO=`setld -i|grep installed|grep -v Patch`
      PKGINFO_print="setld -i|grep installed|grep -v Patch"
      $ECHO_PKGINFO=Y
      Memory_Stats="vmstat -s"
      CPU_STATS="/usr/sbin/pset_info"
      CPU_INFO=`psrinfo -v`
      CPU_INFO_print="psrinfo -v"
      SHOWREV=`/usr/sbin/setld -i|grep Patch`
      $ECHO_SHOWREV=Y
      SHOWREV_print="/usr/sbin/setld -i|grep Patch"
      IOSTAT_M="iostat"
      IOSTAT_d="iostat"
      IOSTAT_xe="iostat"
      IOSTAT_e="iostat"
      #  sar does not exist on Dec, vmstat is best found so far
      SAR_g="vmstat -s"
      SAR_u="vmstat -s"
      SAR_c="vmstat -s"
      SAR_m="vmstat -s"
      SWAP_s="swapon -s "
      SWAP_l="swapon -s"
      NETWORKS="/etc/networks"
      USE_NDD=N
      NET_TUNING="/sbin/sysconfig -q inet"
      DOMAIN_NAME=`domainname`
      DOMAIN_NAME_print="domainname"
      if [ "${DO_PING_TEST}" = "y" ];then               
        Ping_MACHINE_NANE=`/usr/sbin/ping -R -c 10 -s 1280 $MACHINE_NAME`
        Ping_WAN_NODE=`/usr/sbin/ping -R -c 10 -s 1280 $WAN_NODE`
        Ping_RDBMS_NODE=`/usr/sbin/ping -R -c 10 -s 1280 $RDBMS_NODE`
        Ping_WEB_NODE=`/usr/sbin/ping -R -c 10 -s 1280 $WEB_NODE`
        Ping_CLIENT_NODE=`/usr/sbin/ping -R -c 10 -s 1280 $CLIENT_NODE`
      fi
      IFCONFIG_a=`ifconfig -a`
      #BEGIN Deprecation
      LINK_System="http://www.compaq.com/support/index.shtml"
      LINK_Patches="http://ftp1.support.compaq.com/public/Digital_UNIX/"
      LINK_Doc="http://tru64unix.compaq.com/faqs/publications/pub_page/pubs_page.html"
      #END Deprecation
    ;;
    Linux) 
      # Linux Version format: x.y.<others>
      OS_VERSION=`uname -r | awk -F"." '{ print $1 }'`
      OS_SUBVERSION=`uname -r | awk -F"." '{ print $2 }'`
      Log "Running ${OS_NAME}, Version $OS_VERSION.$OS_SUBVERSION"
      if [ ! -z "$BASH_VERSION" ]; then
        # We seem to be running in bash, which is ok on Linux
        true # dummy command instead of nop
      elif [ ! -z "$KSH_VERSION" ]; then
        # We seem to be running in ksh, which would probably
        # work, too, but we prefer to run in bash on Linux.
        # If bash is not available we try to continue in ksh.
        bashpath=`which bash`
        if [ $? -eq 0 -a -f "$bashpath" -a -x "$bashpath" ]; then
          Log "RDA has been started under ksh - will run under bash instead."
          exec bash $0 $@
        else
          Log "RDA has been started under ksh, but bash is not available. Continuing in ksh."
        fi
      else
        # We seem to be running in an unknown shell. Let's check
        # whether bash is available and use it if possible.
        bashpath=`which bash`
        if [ $? -eq 0 -a -f "$bashpath" -a -x "$bashpath" ]; then
          Log "RDA has been started under an unknown shell - will run under bash instead."
          exec bash $0 $@
        else
          Log "RDA is running under an unknown shell, and bash is not available."
          Log "If errors will be encountered then please consider installing bash."
        fi
      fi

      if [ -f "/usr/bin/zip" ]; then
        ZIP="zip -q "
        UNZIP="unzip "
      else
        ZIP="gzip -q "
        UNZIP="gunzip "
      fi 
      TOP="/usr/bin/top -d 1 -n 2 b"
      SYSDEF=`ipcs -l`
      SYSDEF_print="ipcs -l"
      PS_ELF="ps -elf"
      CPU_INFO=`cat /proc/cpuinfo`
      CPU_INFO_print="cat /proc/cpuinfo"
      PKGINFO="rpm -qa"
      CPU_STATS="procinfo"
      Memory_Stats="cat /proc/meminfo"
      #  sar doesn't exist so need some way to get this stuff
      SAR_g="cat /proc/stat"               # paging activity
#      SAR_u="sar -u 1 4|grep -v $OS_NAME"  # cpu usage
#      SAR_c="sar -c 1 4|grep -v $OS_NAME"  # system calls
#      SAR_m="sar -m 1 4|grep -v $OS_NAME"  # message and semaphore
      SWAP_s="free -t"
      SWAP_l="cat /proc/swaps"
      #  iostat does not exist on Linux.  vmstat is best I can find so far.
      IOSTAT_M="vmstat"  # disk thruput in MB
      IOSTAT_d="vmstat"  # disk thruput in bytes
      IOSTAT_xe="vmstat" # disk extended statistics
      IOSTAT_e="vmstat"  # disk errors
      NETWORKS="/etc/networks"
      USE_NDD=N
      NET_TUNING="grep -i tcp /usr/src/linux/include/net/tcp.h"
      DOMAIN_NAME=`domainname`
      DOMAIN_NAME_print="domainname"
      GET_GNU_LIBC="Y"
      SUSERELEASE="/etc/SuSE-release"
      if [ -f $SUSERELEASE -a -r $SUSERELEASE ]; then
        true
      else
        unset SUSERELEASE
      fi
      if [ "${DO_PING_TEST}" = "y" ];then               
        Ping_MACHINE_NANE=`/bin/ping -R -c 10 -s 1280 $MACHINE_NAME`
        Ping_WAN_NODE=`/bin/ping -R -c 10 -s 1280 $WAN_NODE`
        Ping_RDBMS_NODE=`/bin/ping -R -c 10 -s 1280 $RDBMS_NODE`
        Ping_WEB_NODE=`/bin/ping -R -c 10 -s 1280 $WEB_NODE`
        Ping_CLIENT_NODE=`/bin/ping -R -c 10 -s 1280 $CLIENT_NODE`
      fi
      IFCONFIG_a=`/sbin/ifconfig -a`
      #BEGIN Deprecation
      LINK_System="http://www.linux.com/enhance/hardware/"
      LINK_Patches="http://www.redhat.com/support/errata/"
      LINK_Doc="http://www.redhat.com/support/manuals/"
      #END Deprecation
    ;;
    DYNIX/ptx) 
      # Sequent DYNIX Version format: Vx.y
      OS_VERSION=`uname -r | awk -F"." '{ print $1 }' | sed 's/V//'`
      OS_SUBVERSION=`uname -r | awk -F"." '{ print $2 }'`
      Log "Running ${OS_NAME}, Version $OS_VERSION.$OS_SUBVERSION"
      TOP="/usr/bin/top -s1 -d2 40"
      ZIP="NO"
      COMPRESS="compress "
      UNCOMPRESS="uncompress "
      SYSDEF=`/etc/sysdef|grep -v instance |grep -v drv |tail -77`
      SYSDEF_print="/etc/sysdef|grep -v instance |grep -v drv |tail -77"
      UCB_PS="ps -f -u `who am i|awk '{print $1}'`"
      PKGINFO="pkginfo -i"
      SHOWREV="cat /etc/versionlog"
      Memory_Stats="sar -cwmpr"
      CPU_STATS="sar -qwu 1 3"
      CPU_INFO=`/etc/showcfg|grep PROC`
      CPU_INFO_print="/etc/showcfg|grep PROC"
      IOSTAT_M="sar -d"
      IOSTAT_d="sar -d"
      IOSTAT_xe="sar -d"
      IOSTAT_e="sar -d"
      SAR_g="sar -w 1 4|grep -v $OS_NAME"
      SAR_u="sar -u 1 4|grep -v $OS_NAME"
      SAR_c="sar -c 1 4|grep -v $OS_NAME"
      SAR_m="sar -m 1 4|grep -v $OS_NAME"
      SWAP_s="sar -w 2 2 "
      SWAP_l="sar -w 2 2 "
      NETWORKS="/etc/networks"
      USE_NDD=N
      NET_TUNING="grep -i tcp /usr/conf/uts/symmetry.$MACHINE_NAME/config.h"
      DOMAIN_NAME=`domainname`
      DOMAIN_NAME_print="domainname"
      if [ "${DO_PING_TEST}" = "y" ];then               
        Ping_MACHINE_NANE=`/etc/ping -R -s 1280 -c 10 $MACHINE_NAME`
        Ping_WAN_NODE=`/etc/ping -R -s 1280 -c 10 $WAN_NODE`
        Ping_RDBMS_NODE=`/etc/ping -R -s 1280 -c 10 $RDBMS_NODE`
        Ping_WEB_NODE=`/etc/ping -R -s 1280 -c 10 $WEB_NODE`
        Ping_CLIENT_NODE=`/etc/ping -R -s 1280 -c 10 $CLIENT_NODE`
      fi
      IFCONFIG_a=`ifconfig -a`
      #BEGIN Deprecation
      LINK_System="http://www-1.ibm.com/eserver/support/"
      LINK_Patches="http://techsupport.services.ibm.com/eserver/fixes"
      LINK_Doc="http://webdocs.numaq.ibm.com"
      #END Deprecation
    ;;
    Windows_NT)
      # Windows NT/2000 Version format: x yy
      OS_VERSION=`uname -r`
      OS_SUBVERSION=`uname -v`
      Log "Running ${OS_NAME}, Version $OS_VERSION.$OS_SUBVERSION"
      TOP=" ps -l "
      DF=" df -kP"
      ZIP="NO"
      COMPRESS="mkszip "         # mkszip works like compress
      UNCOMPRESS="uncompress "
      SYSDEF_print="net config Server"
      UCB_PS=" ps -fu `who am i | awk -F"@" '{print $1}'`"
      PS_EF=" ps -ef"
      STRINGS_CMD="strings -a -z "  # Special option for MKS
      CASESENS="OFF"            # Turn off case-sensitivity
      PKGINFO=" net config Server"
      SHOWREV=" net statistics Server"
      Memory_Stats=" ps -e -o args,vsz,time"
      CPU_STATS=" ps -l"
      CPU_INFO=" ps -e -o args,pcpu,time,etime"
      CPU_INFO_print=" ps -ef"
      IOSTAT_M=" ps -l"
      IOSTAT_d=" ps -l"
      IOSTAT_xe=" ps -l"
      IOSTAT_e=" ps -l"
      SAR_g=" ps -l"
      SAR_u=" ps -l"
      SAR_c=" ps -l"
      SAR_m=" ps -l"
      SWAP_s=" df -k "
      SWAP_l=" df -k "
      NETWORKS="C:/WINNT/system32/drivers/etc/host"
      USE_NDD=N
      NET_TUNING=" net start"
      DOMAIN_NAME="`ipconfig | grep DNS | awk -F":" '{print $2}' | sed 's/ //g'`"              
      if [ "${DOMAIN_NAME}" = "" ]; then
        DOMAIN_NAME="`ipconfig | grep 'Primary DNS Suffix' | awk -F":" '{print $2}' | sed 's/ //g'`"
      fi
      DOMAIN_NAME_print="ipconfig | grep DNS"

      if [ "${DO_PING_TEST}" = "y" ];then               
        Ping_MACHINE_NANE=`ping -l 1280 -n 10 $MACHINE_NAME`
        Ping_WAN_NODE=`ping  -l 1280 -n 10  $WAN_NODE`
        Ping_RDBMS_NODE=`ping -l 1280 -n 10  $RDBMS_NODE`
        Ping_WEB_NODE=`ping -l 1280 -n 10  $WEB_NODE`
        Ping_CLIENT_NODE=`ping -l 1280 -n 10  $CLIENT_NODE`
      fi
      IFCONFIG_a=`ipconfig /all`
      #BEGIN Deprecation
      LINK_System="http://www.microsoft.com"
      LINK_Patches="http://www.microsoft.com"
      LINK_Doc="http://www.microsoft.com"
      #END Deprecation
      
      # for MKS on NT (Knowledge Base Article #20014)
      # to make the case statement case sensitive
      DUALCASE=1
    ;;
    *) Log "Not sure what OS to use"
      # Always NEED some COMMAND IN A CASE STATEMENT EVEN DO NOTHING
      junk=nothingYET 
  esac

} ### End Procedure Setup_OS ###
      
    ]]></command_args>
      <command_args_windows>
      
goto :HELP

      REM ## HELP procedure
      rem Display brief on-line help message
      rem NOTE: An echo. displays a blank line
      rem 
:HELP
      echo .
      echo Help -  This is the help for command_args_windows DA_INCLUDE demo
      echo.
      echo SYNOPSIS
      echo      DA_INCLUDE can be used to merge code from one command to another
      echo USAGE
      echo "     DA_INCLUDE  file=menus/qa_menus.xml|command=da_include_1| "
      echo "        extract_lines=2-|save_ merged=/tmp/demo_merged.cmd "
      echo OPTIONS
      echo   Key OPTIONS
      echo .

goto :END

:END 
echo End of help     

      </command_args_windows>
  </command>
      

    <command>
      <command_menu>da_include_2</command_menu>
      <command_title>load multiple commands args</command_title>    
            <command_descr><![CDATA[
  Command Summary
    Just used for da_include demo. Data file
      
  Input Requirements
    o none - Standalone demo      
    
   Output Details
    o Generates an output report showing all of the merged or included 
      shell commands.
      
  References                 
    ]]></command_descr>        
      <command_type>OS</command_type>
      <command_args><![CDATA[

Show_Table ()
{
##
## $Header: Show_Table 2.05 15-JAN-2003 support $
## 
## Procedure Name: Show_Table
##
## Usage:
##   Show_Table "Col, Value" "Col2, Value2" "Col3, Value3" ... "Col9, Value9"
##
## Parameters:
##   $1 First Col,Value Pair
##   $2 First Col,Value Pair
##   $3 First Col,Value Pair
##   ... up to 9
##   color=#CCFFCC (optional background color - defaults to #CCFFFF)
##   color="lightblue" 
##   size=1-7 (optional table border size - defaults to 5)
##
## Description:
##   Show two-column table of the supplied arguments.
##
## Examples:
##   Show_Table "Machine, Sun Solaris" "CPU, 300Mz"
##
## Returns:
##   None
##
## Notes:
##  -implemented the text show_table with good alignment but this seems to
##   have problems on Solaris. Moved back to the simple TABs. May need to sort out
##   at a later stage.
##  -Currently no table/column headers are displayed
##
## Version History:
##   2.01 30-APR-2002 ssandrew Initial Release
##   2.03 13-JUN-2002 dbezemer Added text support and removed useless </TR> from html output
##   2.04 16-OCT-2002 dbezemer Remove table header code; added </TR> at end of rows
##   2.05 15-JAN-2003 dbezemer Add table headers for 508 standards
##

  def_color=${color:=#CCFFFF}; export def_color
  border=${size:=5}; export border

  if [ "${internal_output}" = "html" ]; then
    echo "<table BORDER=${border} CELLSPACING=0 CELLPADDING=0 summary=\"General Table\">"  | tee -a $OUT_DIR/${PRD}_${REPORT}.htm
    echo "<TR align=left BGCOLOR=black><TH id=Name></TH><TH id=Value></TH></TR>" | tee -a $OUT_DIR/${PRD}_${REPORT}.htm
    for Record in "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
    do 
      Title=`$ECHO $Record | awk -F"," '{print $1}'`
      Data=`$ECHO $Record | awk -F"," '{print $2}'`
      no_boldTitle=`$ECHO $Title | sed 's/<b>//g' | sed 's/<\/b>//g' | sed 's/<\/B>//g'  | sed 's/<B>//g'`
      if [ "${Record}" != "" ]; then
        $ECHO "<TR><TD ALIGN=LEFT BGCOLOR=$def_color headers=Name><small>$SPACE$SPACE$Title$SPACE$SPACE</small></TD><TD ALIGN=LEFT BGCOLOR=$def_color headers=Value><small>$SPACE$SPACE$Data$SPACE$SPACE</small></TD></TR>"  | tee -a $OUT_DIR/${PRD}_${REPORT}.htm
      fi
    done
    $ECHO "</table>"  | tee -a $OUT_DIR/${PRD}_${REPORT}.htm
  else
    $ECHO "\n"

    for Record in "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
    do
      Title=`$ECHO "$Record" | awk -F"," '{print $1}'`
      Data=`$ECHO "$Record" | awk -F"," '{print $2}'`
      if [ "$Record" != "" ]; then
       # TAB method:
       $ECHO "\t$Title\t$Data" | tee -a ${OUT_DIR}/${PRD}_${REPORT}.txt
      fi
    done
  fi

} ### End Procedure Show_Table ###


]]></command_args>      
  </command>
  
 <command>
    <command_menu>DA_DEBUG</command_menu>    
    <command_title>Check toknizations</command_title>    
    <command_descr>Checks some of DA assumed tokenized settings.
    i.e %%DA_HOME%% %%DA_OUTPUT%% etc.    
    </command_descr>
    <command_type>OS</command_type>    
    <command_args><![CDATA[    
    echo "Unix Checking DA Tokenized values"
    echo "######################################"
    echo "DA_HOME=%%DA_HOME%%"
    echo "DA_OUTPUT=%%DA_OUTPUT%%"
    echo "DA_SESSION_KEY=%%DA_SESSION_KEY%%"
    echo "DA_VERSION=%%DA_VERSION%%"
    echo "PWD=%%PWD%%"    
    echo "DA_ENV=%%DA_ENV%%"
    echo "OS way DA_ENV=$DA_ENV"
    echo "DA_HOST_MACHINE=%%DA_HOST_MACHINE%%"
    echo "DA_HOST_MACHINE_IP=%%DA_HOST_MACHINE_IP%%"
    echo "OS_NAME=%%OS_NAME%%"
    echo "OS_VERSION=%%OS_VERSION%%"
    echo "OS_USER=%%OS_USER%%"
    echo "OS_ARCH=%%OS_ARCH%%"
    echo "IS_WINDOWS=%%IS_WINDOWS%%"
    echo "IS_UNIX=%%IS_UNIX%%"
    echo "JAVA_VERSION=%%JAVA_VERSION%%"
    echo "JAVA_HOME=%%JAVA_HOME%%"
    echo "CLASS_PATH=%%CLASS_PATH%%"           
    echo "PERL_EXE=$PERL_EXE"
    echo "PERL_LIB=$PERL_LIB"
    echo "PERL_SHL=$PERL_SHL"
    echo "FOUND_PERL=$FOUND_PERL"   
    echo "############ CAPTURE DA CORE FILES ##################"
    echo DA_FILE_COLLECTED=%%DA_OUTPUT%%/da_collection.log
    echo DA_FILE_COLLECTED=%%DA_OUTPUT%%/config/user.properties
    echo DA_FILE_COLLECTED=%%DA_OUTPUT%%/config/daenv.sh
    echo DA_FILE_COLLECTED=%%DA_OUTPUT%%/log/diagnostic_assistant.log
    echo DA_FILE_COLLECTED=%%DEBUG_MY_FILE%%
    echo DA_DIR_COLLECTED=%%DA_HOME%%/config  

   ]]></command_args>     
       <command_args_windows><![CDATA[
    @echo off    
    echo "Windows Checking DA Tokenized values"
    echo "######################################"
    echo "DA_HOME=%%DA_HOME%%"
    echo "DA_OUTPUT=%%DA_OUTPUT%%"
    echo "DA_SESSION_KEY=%%DA_SESSION_KEY%%"
    echo "DA_VERSION=%%DA_VERSION%%"
    echo "PWD=%%PWD%%"
    echo "DA_ENV=%%DA_ENV%%"
    echo "OS way DA_ENV=%DA_ENV%"
    echo "DA_HOST_MACHINE=%%DA_HOST_MACHINE%%"
    echo "DA_HOST_MACHINE_IP=%%DA_HOST_MACHINE_IP%%"
    echo "OS_NAME=%%OS_NAME%%"
    echo "OS_VERSION=%%OS_VERSION%%"
    echo "OS_USER=%%OS_USER%%"
    echo "OS_ARCH=%%OS_ARCH%%"
    echo "IS_WINDOWS=%%IS_WINDOWS%%"
    echo "IS_UNIX=%%IS_UNIX%%"
    echo "JAVA_VERSION=%%JAVA_VERSION%%"
    echo "JAVA_HOME=%%JAVA_HOME%%"
    echo "CLASS_PATH=%%CLASS_PATH%%" 
    echo "PERL_EXE=%PERL_EXE%"
    echo "PERL_LIB=%PERL_LIB%"
    echo "PERL_SHL=%PERL_SHL%"
    echo "FOUND_PERL=%FOUND_PERL%"    
    echo "############ CAPTURE DA CORE FILES ##################"
    echo DA_FILE_COLLECTED=%%DA_OUTPUT%%\da_collection.log
    echo DA_FILE_COLLECTED=%%DA_OUTPUT%%\config\user.properties
    echo DA_FILE_COLLECTED=%%DA_OUTPUT%%\config\daenv.sh
    echo DA_FILE_COLLECTED=%%DA_OUTPUT%%\log\diagnostic_assistant.log
    echo DA_FILE_COLLECTED=%%DEBUG_MY_FILE%%
    echo DA_DIR_COLLECTED=%%DA_HOME%%\config  

   ]]></command_args_windows>  
  </command>  
    
  <command>
    <command_menu>install_wfa</command_menu>   
    <command_title>Workflow Analyzer Install as Concurrent Program</command_title>
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_prompt1>SQL_USER|Please enter APPS username|</command_prompt1>
    <command_prompt2>SQL_PASS|Please enter APPS password|</command_prompt2>
    <command_args><![CDATA[
                printf "\nStarting the FNDLOAD process now... \n";
                printf "Running the following commands using %%SQL_USER%% and %%SQL_PASS%%.\n";
                printf "\n FNDLOAD %%SQL_USER%%/%%SQL_PASS%% O Y UPLOAD $FND_TOP/patch/115/import/afcpprog.lct tools/WF_ANALYZER_TOOL_PROG.ldt \n";
                printf "\n\n    done with Loading the Program\n";
                printf "\n FNDLOAD %%SQL_USER%%/%%SQL_PASS%% O Y UPLOAD $FND_TOP/patch/115/import/afcpreqg.lct tools/WF_ANALYZER_REPORT_GROUP.ldt \n";                
                printf "\n\n    done with Registering the Program\n";
                printf "\n    Please check RDA_HOME/da/output/workflow for the Workflow Analyzer Report. \n\n";
 ]]>
    </command_args> 
</command>
     
  <!--<event>
      <event_id>ora_123</event_menu>
      <event_title>missing index</event_title>    
      <event_descr>Demo even of missing index.</event_descr>      
      <event_type>System</event_type>
      <event_frequency>mins|hours|once:time</event_frequency>      
      <event_checker>check_log_xyz|em_log monitor|metric||file_list.csv with name/regex pattern</event_checker>
      <event_condition>OUTPUT_CONTAINS=ORA-123(>5,24hrs),ORA-13|IF NOT NULL|IF=1</event_condition>      
      --><!-- 
           EVENT LOG: ora_123, triggered 01/01/15, 4 
                       ora_13, triggered 01/01/15 
                      ora_123, triggered 01/01/15 <== 2nd occurence
      --><!--
      <event_action>Notifiy ASR|Log in DaEvent.log|run da cmd 123</event_action>      
      <event_collection>da cmd 123 details args error_code</event_collection>      
      <event_asr>sr(notify mos)|package and/or upload collect</event_asr>      
  </event>-->

<!-- DEMO Category "other.demo" based collection -->  
<command>
    <command_menu>collect_demo1</command_menu>
    <category_id>other.demo</category_id>
    <command_title>OS to just so ENV</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_args>env</command_args>   
    <command_args_windows>set</command_args_windows>           
</command>

  <command>
    <command_menu>collect_demo2</command_menu>
    <category_id>other.demo</category_id>
    <command_title>OS filters env or set for PATH</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_args>env | grep PATH</command_args>   
    <command_args_windows>echo %PATH%</command_args_windows>           
</command>

  <command>
    <command_menu>collect_demo_input1</command_menu>
    <category_id>other.demo.inputs</category_id>
    <command_title>OS collect_demo_input1 filters env for matching value</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_prompt1>INPUT_FILTER|Please enter a string to filter env|PATH</command_prompt1>
    <command_args>env | grep %%INPUT_FILTER%%</command_args>   
    <command_args_windows>set | findstr "%%INPUT_FILTER%%"</command_args_windows>           
</command>

  <command>
    <command_menu>collect_demo_input2</command_menu>
    <category_id>other.demo.inputs</category_id>
    <command_title>OS collect_demo_input2 filters env for matching value</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>
    <command_prompt1>INPUT_FILTER|Please enter a string to filter env|PATH</command_prompt1>
    <command_args>env | grep %%INPUT_FILTER%%</command_args>   
    <command_args_windows>set | findstr "%%INPUT_FILTER%%"</command_args_windows>           
</command>
<!-- END DEMO Category "other.demo" based collection -->  
    
 <command>
    <command_menu>sys_SET_BRWSR_FLAG</command_menu>
    <command_title>Allow/Disallow Browser Viewer</command_title>
    <command_descr>
  Command Summary
    This command can be used to allow or disallow use of a browser viewer.
    By default, this functionality is disallowed (false).
      
  Input Requirements
    o true or false
    
  Output Details
    o Confirmation that the value chosen was saved  
    </command_descr> 
    <command_type>System</command_type>        
    <command_prompt1>LOV_TF|Allow browser viewer to be used|LOV:value:YES=true;NO=false</command_prompt1>
    <command_args>echo "browser_viewer_spawned %%LOV_TF%%"</command_args>                     
 </command>  

  <command>
    <command_menu>PREREQ_BOOLEAN</command_menu>
    <command_title>Valid values for boolean questions</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>        
    <command_args>
      echo true
      echo false
   </command_args>
    <command_args_windows>@echo off
      echo true
      echo false
    </command_args_windows>              
  </command>    

<command>
    <command_menu>jde_logs</command_menu>
    <command_title>Get GenerateNER_logs dir</command_title>
    <command_descr>Returns contents of GenerateNER_logs directory</command_descr>
    <category_id>bldpkg</category_id>
    <command_type>File</command_type>
    <command_prompt1> type="multichoice" validation_match = "" required="true">PREREQ_PATHCODES|Select pathcode|PREREQ_PATHCODES:all</command_prompt1>
    <command_prompt2>RT_PACKAGE|Entered LOV %%PREREQ_PATHCODES%% Package name to collect|</command_prompt2>
    <command_args>echo "This command is only valid on a Windows platform" </command_args>    
    <command_args_windows>zip_matching_files search_dir=%%JDE_INSTALL_PATH%%\%%PREREQ_PATHCODES%%\PACKAGE\%%RT_PACKAGE%%\serverlogs\GenerateNER_logs match=.*? verbose_output=false</command_args_windows>    
</command>  


  <command>
    <command_menu>rda_oem121_hcve_simple_notlocal_rcu</command_menu>
    <command_title>HCVE pre-install: OEM CloudControl 12c- Simple install - Not local database with RCU database checks</command_title>
    <category_id>preinstall.oem12c.simpleNotLocalRcu</category_id>
    <command_descr><![CDATA[
  Command Summary
    This module is targeted at Oracle Enterprise Manager, OEM CloudControl 12c
    for a simple install having a non-local database with RCU database checks.
    
  Command Detail
    o Executes the "Aoem121_<platform>" rule set pre-install health check
    o This command is currently valid for the following platforms:
         All
    
  Input Requirements
    o Agent base home location
    o Middleware home location
    o Central inventory location
    o Oracle home location
    o Repository Creation Utility [RCU] connect string
    o Username with SYSDBA privileges
    o Password for the user
    
  Output Details
    o Produces the documentation of the "Aoem121_<platform>" rules set as a report
    o Removes all previous reports for the rule set 
    o The exit code is 0 when tests are successful, 1 in case of failures, or 
      2 when it detects execution error
    ]]></command_descr>
    <command_type>Rda</command_type>
    <command_prompt1 type="string" validation_match = "" required="true">HCVE_OEM121_S_AGENT_BASE|Planned agent base home directory|%%HCVE_OEM121_S_AGENT_BASE%%</command_prompt1>
    <command_prompt2 type="string" validation_match = "" required="true">HCVE_OEM121_S_MW_HOME|Planned middleware directory|%%HCVE_OEM121_S_MW_HOME%%</command_prompt2>
    <command_prompt3 type="string" validation_match = "" required="true">HCVE_OEM121_S_INV|Planned central inventory directory|%%HCVE_OEM121_S_INV%%</command_prompt3>
    <command_prompt4 type="string" validation_match = "" required="true">HCVE_OEM121_S_OH|Planned Oracle Home directory|%%HCVE_OEM121_S_OH%%</command_prompt4>
    <command_prompt5 type="string" validation_match = "" required="true">HCVE_OEM121_S_SID|RCU connect string using format  [hostname]:[DB port number]::[DB service name]|%%HCVE_OEM121_S_SID%%</command_prompt5>
    <command_prompt6 type="string" validation_match = "" required="true">HCVE_OEM121_S_USR|Database user with SYSDBA privileges|</command_prompt6>
    <command_prompt7 type="string" validation_match = "" required="true">SAVE_WALLET.HCVE_OEM121_S.PASS|Password</command_prompt7>
    <command_args>run_hcve=EM:Aoem121
     RDA_ENV=COL/TOOL.HCVE.EM.OEM.W_TYPE=B,COL/TOOL.HCVE.EM.OEM.D_AGENT_BASE_HOME=%%HCVE_OEM121_S_AGENT_BASE%%,COL/TOOL.HCVE.EM.OEM.D_MIDDLEWARE_HOME=%%HCVE_OEM121_S_MW_HOME%%,COL/TOOL.HCVE.EM.OEM.D_INVENTORY=%%HCVE_OEM121_S_INV%%,COL/TOOL.HCVE.EM.OEM.B_DB_LOCAL=0,COL/TOOL.HCVE.EM.OEM.D_ORACLE_HOME=%%HCVE_OEM121_S_OH%%,COL/TOOL.HCVE.EM.OEM.T_SID=%%HCVE_OEM121_S_SID%%,COL/TOOL.HCVE.EM.OEM.T_USER=%%HCVE_OEM121_S_USR%%,PASS=%%SAVE_WALLET.HCVE_OEM121_S.PASS%%
    </command_args>
  </command>

 <command>
    <command_menu>rda_oem121_hcve_simple_notlocal_rcu</command_menu>
    <command_title>HCVE pre-install: OEM CloudControl 12c- Simple install - Not local database with RCU database checks</command_title>
    <category_id>preinstall.oem12c.simpleNotLocalRcu</category_id>
    <command_descr><![CDATA[
  Command Summary
    This module is targeted at Oracle Enterprise Manager, OEM CloudControl 12c
    for a simple install having a non-local database with RCU database checks.
    
  Command Detail
    o Executes the "Aoem121_<platform>" rule set pre-install health check
    o This command is currently valid for the following platforms:
         All
    
  Input Requirements
    o Agent base home location
    o Middleware home location
    o Central inventory location
    o Oracle home location
    o Repository Creation Utility [RCU] connect string
    o Username with SYSDBA privileges
    o Password for the user
    
  Output Details
    o Produces the documentation of the "Aoem121_<platform>" rules set as a report
    o Removes all previous reports for the rule set 
    o The exit code is 0 when tests are successful, 1 in case of failures, or 
      2 when it detects execution error
    ]]></command_descr>
    <command_type>Rda</command_type>
    <command_prompt1 type="string" validation_match = "" required="true">HCVE_OEM121_S_AGENT_BASE|Planned agent base home directory|%%HCVE_OEM121_S_AGENT_BASE%%</command_prompt1>
    <command_prompt2 type="string" validation_match = "" required="true">HCVE_OEM121_S_MW_HOME|Planned middleware directory|%%HCVE_OEM121_S_MW_HOME%%</command_prompt2>
    <command_prompt3 type="string" validation_match = "" required="true">HCVE_OEM121_S_INV|Planned central inventory directory|%%HCVE_OEM121_S_INV%%</command_prompt3>
    <command_prompt4 type="string" validation_match = "" required="true">HCVE_OEM121_S_OH|Planned Oracle Home directory|%%HCVE_OEM121_S_OH%%</command_prompt4>
    <command_prompt5 type="string" validation_match = "" required="true">HCVE_OEM121_S_SID|RCU connect string using format  [hostname]:[DB port number]::[DB service name]|%%HCVE_OEM121_S_SID%%</command_prompt5>
    <command_prompt6 type="string" validation_match = "" required="true">HCVE_OEM121_S_USR|Database user with SYSDBA privileges|</command_prompt6>
    <command_prompt7 type="string" validation_match = "" required="true">SAVE_WALLET.HCVE_OEM121_S.PASS|Password</command_prompt7>
    <command_args>run_hcve=EM:Aoem121
     RDA_ENV=COL/TOOL.HCVE.EM.OEM.W_TYPE=B,COL/TOOL.HCVE.EM.OEM.D_AGENT_BASE_HOME=%%HCVE_OEM121_S_AGENT_BASE%%,COL/TOOL.HCVE.EM.OEM.D_MIDDLEWARE_HOME=%%HCVE_OEM121_S_MW_HOME%%,COL/TOOL.HCVE.EM.OEM.D_INVENTORY=%%HCVE_OEM121_S_INV%%,COL/TOOL.HCVE.EM.OEM.B_DB_LOCAL=0,COL/TOOL.HCVE.EM.OEM.D_ORACLE_HOME=%%HCVE_OEM121_S_OH%%,COL/TOOL.HCVE.EM.OEM.T_SID=%%HCVE_OEM121_S_SID%%,COL/TOOL.HCVE.EM.OEM.T_USER=%%HCVE_OEM121_S_USR%%,PASS=%%SAVE_WALLET.HCVE_OEM121_S.PASS%%
    </command_args>
  </command>

  <command>
    <command_menu>PREREQ_PATHCODES</command_menu>
    <command_title>Valid values for boolean questions</command_title>  
            <command_descr><![CDATA[
          Command Summary

          Command Detail
            o 

          Input Requirements
            o 

          Output Details
            o 
          ]]></command_descr>

    <command_type>OS</command_type>        
    <command_args>
      echo DV910
      echo PS910
   </command_args>
    <command_args_windows>@echo off
      echo DV910_WINDOWS
      echo PS910_WINDOWS
    </command_args_windows>              
  </command>    

    
  <command>
    <command_menu>content_demo</command_menu>
    <command_title>Shows how various data/content elements can be extracted</command_title>  
    <command_descr>Demo the data/content extraction.</command_descr>
    <command_type>OS</command_type>  
    <command_required_content>myPerl.pm,myProp,myZip</command_required_content>
    <command_args>
      ls %%DA_OUTPUT%%/downloads
   </command_args>
    <command_args_windows>@echo off
      DIR %%DA_OUTPUT%%\downloads
    </command_args_windows>              
  </command>  
  
  
  <command>
    <command_menu>sql_plugins_jdbc</command_menu>
    <command_title>QUERY using SqlApplicationImpl</command_title>
    <category_id>emdebug</category_id>
    <command_descr><![CDATA[ ]]></command_descr>
    <command_type>Sql</command_type>    
    <command_args><![CDATA[sql output_format=csv jdbc=sysman:SYSMAN:slc07fzr.test-domain.com:15044:sem131
select dp.plugin_id, dp.plugin_name, dp.version, dp.plugin_home,
pa.patch_id
from sysman.GC_CURRENT_DEPLOYED_PLUGIN_AGT dp,
sysman.MGMT$OH_PATCHED_COMPONENT pa
where dp.plugin_id||'.plugin.' ||
decode(dp.content_type, 'Plugin', 'agent',
'Discovery', 'discovery') = pa.component_name (+)
and dp.version = pa.component_version (+)
order by dp.plugin_name
   ]]></command_args>
</command>
  
  
</commands>


<!-- ###########################################################################    
  Start of any data/content 
###########################################################################  -->
<data>

 <content>
   <content_name>myPerl.pm</content_name>
   <content_path>myPerl.pm</content_path>  
   <content_descr>Perl module support various other commands in this menu file.</content_descr>
   <content_help>
   Help: 
     Perl module support various other commands in this menu file.
   Usage:
     Perl module will be written to DA_OUTPUT/downloads/content/myPerl.pm
     when it is need by any listed 'required_by' command_names from the 
     commands.
   </content_help>
   <content_usage>PerlModule</content_usage>
   <content_type>PerlModule</content_type>    
   <content_data><![CDATA[#!perl
## Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved. 
##
## $Date: 2015-07-27 12:15:09 -0400 (Wed, 27 Jul 2015) $
##
## NAME:
##   DaPerl.pm     $Revision: 5026 $
##
## DESCRIPTION:
##   Diagnostic Assistant supporting perl routines available to 
##   perl programs that include DaPerl.pm 
##
## PARAMETERS:
##   Example Usage:
##     use myPerl; 
##     print "\n#### myPerl::printHello(" STEVE ") - Show a timmed message ####:\n";
##
## UPDATED BY:
##   27-JUL-2015 ssa    - Created
## 

###########################################################################
# Requires PERL5LIB had this in its path, Da Discovery provides this 
# or set|export PERL5LIB=.:{da_output}/download to include this which is
# always added along with std. perl libs and da_home/lib/includes 
# which supports DA provided perl module DaPerl.pm.
###########################################################################
package myPerl;

# BEGIN {

use strict;
use warnings;
use POSIX qw(strftime);
use Exporter;
use vars qw($VERSION @ISA @EXPORT @EXPORT_OK %EXPORT_TAGS);
use File::Copy qw(copy);
use File::Copy qw(move);
use Env qw(PATH HOME HOMEPATH);     # import all possible variables
use Cwd; 

$VERSION     = 1.00;
@ISA         = qw(Exporter);
@EXPORT      = ();
@EXPORT_OK   = qw(trim ltrim rtrim ls ls_l cat ps);
%EXPORT_TAGS = ( DEFAULT => [qw(&ls)],
                 Both    => [qw(&ls ls_l &cat &ps &run &find)]);
                 
# our vs. my is like public/private in java
our $NT = 0;
our $isUnix = 0;
our $isWindows = 0;
if ($^O =~ /MSWin32/i){
  $NT = 1;
  $isWindows = 1;
} else {
  $isUnix = 1;
}

#######################################################################
# Share our variables to be use by other programs as: $DaPerl::daHome #
#######################################################################
our $pathseparator = $NT ? "\\" : "\/";
our $classpath_separator = $NT ? ";":":";
our $perlVersion = $^V ; 
our $perlPath = $^X ; 
our $pwd = cwd();             # get current working directory
our $HOME = $HOME ? $HOME : $HOMEPATH;
# DA Specific available paths:
our $daHome = $ENV{"DA_HOME"} ? $ENV{"DA_HOME"} : ".";
our $daOutput = $ENV{"DA_OUTPUT"} ? $ENV{"DA_OUTPUT"} : "output";
#######################################################################
### End Share our variables                                         ###
#######################################################################

# Declare the subroutines
sub printHello($);
sub ltrim($);
sub rtrim($);
sub trim($);

# Simple hello using trim
sub printHello($)
{
  my $string = shift;  
  $string = trim($string);
  print "Hello ".$string."\n";
}

# Perl trim function to remove whitespace from the start and end of the string
sub trim($)
{
  my $string = shift;
  $string =~ s/^\s+//;
  $string =~ s/\s+$//;
  return $string;
}

# Left trim function to remove leading whitespace
sub ltrim($)
{
  my $string = shift;
  $string =~ s/^\s+//;
  return $string;
}

# Right trim function to remove trailing whitespace
sub rtrim($)
{
  my $string = shift;
  $string =~ s/\s+$//;
  return $string;
} 

1;

__END__

=head1 NAME

MyPerl - Interfaces to demo user provided Module

=head1 DESCRIPTION

The MyPerl module contains functions to demo how to include a 
perl module in the DA xml that can be used in another DA command.

=head2 Alphabetical Listing of MyPerl Functions

printHello
ltrim
rtrim
trim

=over

=item DaPerl Global variables - General

The following variables are setup in DaPerl and can be accessed with
the $MyPerl::{variable} syntax from calling perl.

 $pathseparator - either the Windows "\\" or Unix "\/" path character(s)
 $classpath_separator - either the Windows ";" or Unix ":" path separator
 $perlVersion - the current perl version
 $perlPath - the perl path
 $pwd - provides the current working directory the program was started from.
 $HOME - either the Windows or Unix HOME directory path

=item DaPerl Global variables - Diagnostic Assistant Specific

 $daHome - path to DA_HOME env variable if setup.
 $daOutput - path to DA_HOME env variable if setup or output.
 $perlLogfile - the default or set log file path such as: "$daOutput/log/da_perl.log"

=item myPerl::printHello(name)

Prints a Hello + name with name trimmed of spaces.

=item myPerl::trim(str)

Returns the trimmed string of white spaces.

=back

=cut

 ]]></content_data>     
 </content>

 <content>
   <content_name>myProp</content_name>
   <content_path>myProp.property</content_path>  
   <content_descr>Properties file support various other commands in this menu file.</content_descr>
   <content_help>
   Help: 
     Property file Content
   Usage:
     Property file will be written to DA_OUTPUT/downloads/content/myProp.properties
     when it is need by any listed 'required_by' command_names from the 
     commands.
   </content_help>
   <content_usage>properties</content_usage>
   <content_type>Properties</content_type>    
    <content_data><![CDATA[
name1=ONE
name2=TWO
name3=THREE
 ]]></content_data>     
 </content>

 <content>
   <content_name>myZip</content_name>
   <content_path>myZip.zip</content_path>  
   <content_descr>Zip file support various other commands in this menu file.</content_descr>
   <content_help>
   Help: 
     Zip file Content
   Usage:
     Zip file will be written to DA_OUTPUT/downloads/content/myZip.zip
     when it is need by any listed 'required_by' command_names from the 
     commands.
   </content_help>
   <content_usage>Zip</content_usage>
   <content_type>zip_uue_extract</content_type>    
   <content_data><![CDATA[begin 644 encoder.buf
M4$L#!!0    ( /R-#T=_+P++/P   &8    -    5&5S=$9I;&4Q+G1X=)7+
ML0F 0! %T?RJ^!4(9Q%&AH(%R%<69 ]T LOW6KAL8'C[$Q!Y"7_H:(D3T73&
M;6U^67K4B7[72*N683*7'U!+ P04    " #\C0]'3S/F/#\   !F    #0  
M %1E<W1&:6QE,BYT>'25R[$)@$ 0!='\JO@5"%X11H:"!<A7%F0/= ++]UJX
M;&!X^Q,0>0E_Z&B)$]%TQFUM?EEZU(E^UTAK+L.DEA]02P,$%     @ _(T/
M1U_'16X_    9@    T   !497-T1FEL93,N='ATE<NQ"8! $ 71_*KX%0AJ
M#T:&@@7(5Q9D#W0"R_=:N&Q@>/L3$'D)?^BHB1-1=<9M;7Y96LP#[:Z1UEBZ
MR51^4$L#!!0    ( /R-#T=N#5\(0    &8    -    5&5S=$9I;&4T+G1X
M=)7+L0F 0! %T?RJ^!4(BC48&0H6(%]9D#W0"2S?:^&R@>'M3T#D)?RAHR9.
M1-49M[7Y96DQ#[2[1EICZ293^0%02P$"%  4    " #\C0]'?R\"RS\   !F
M    #0           "          5&5S=$9I;&4Q+G1X=%!+ 0(4 !0    (
M /R-#T=/,^8\/P   &8    -            (    &H   !497-T1FEL93(N
M='AT4$L! A0 %     @ _(T/1U_'16X_    9@    T            @    
MU    %1E<W1&:6QE,RYT>'102P$"%  4    " #\C0]';@U?"$    !F    
M#0           "     ^ 0  5&5S=$9I;&4T+G1X=%!+!08     !  $ .P 
(  "I 0     !
 
end]]></content_data>     
 </content>
 
</data>
<!-- ###########################################################################    
  End of any data/content 
###########################################################################  -->



</menus>



